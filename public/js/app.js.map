{
  "version": 3,
  "sources": ["../../node_modules/solid-js/dist/solid.js", "../../node_modules/solid-js/web/dist/web.js", "../../node_modules/solid-js/store/dist/store.js", "../../node_modules/@solidjs/router/dist/index.js", "../../src/ts/features/store/StateProvider.tsx", "../../node_modules/redux/src/utils/formatProdErrorMessage.ts", "../../node_modules/redux/src/utils/symbol-observable.ts", "../../node_modules/redux/src/utils/actionTypes.ts", "../../node_modules/redux/src/utils/isPlainObject.ts", "../../node_modules/redux/src/utils/kindOf.ts", "../../node_modules/redux/src/createStore.ts", "../../node_modules/redux/src/utils/warning.ts", "../../node_modules/redux/src/combineReducers.ts", "../../node_modules/redux/src/bindActionCreators.ts", "../../node_modules/redux/src/compose.ts", "../../node_modules/redux/src/applyMiddleware.ts", "../../node_modules/redux/src/utils/isAction.ts", "../../node_modules/immer/src/utils/env.ts", "../../node_modules/immer/src/utils/errors.ts", "../../node_modules/immer/src/utils/common.ts", "../../node_modules/immer/src/utils/plugins.ts", "../../node_modules/immer/src/core/scope.ts", "../../node_modules/immer/src/core/finalize.ts", "../../node_modules/immer/src/core/proxy.ts", "../../node_modules/immer/src/core/immerClass.ts", "../../node_modules/immer/src/core/current.ts", "../../node_modules/immer/src/plugins/patches.ts", "../../node_modules/immer/src/plugins/mapset.ts", "../../node_modules/immer/src/immer.ts", "../../node_modules/redux-thunk/dist/redux-thunk.mjs", "../../node_modules/@reduxjs/toolkit/src/index.ts", "../../node_modules/@reduxjs/toolkit/src/createDraftSafeSelector.ts", "../../node_modules/@reduxjs/toolkit/src/configureStore.ts", "../../node_modules/@reduxjs/toolkit/src/devtoolsExtension.ts", "../../node_modules/@reduxjs/toolkit/src/getDefaultMiddleware.ts", "../../node_modules/@reduxjs/toolkit/src/createAction.ts", "../../node_modules/@reduxjs/toolkit/src/tsHelpers.ts", "../../node_modules/@reduxjs/toolkit/src/actionCreatorInvariantMiddleware.ts", "../../node_modules/@reduxjs/toolkit/src/utils.ts", "../../node_modules/@reduxjs/toolkit/src/immutableStateInvariantMiddleware.ts", "../../node_modules/@reduxjs/toolkit/src/serializableStateInvariantMiddleware.ts", "../../node_modules/@reduxjs/toolkit/src/autoBatchEnhancer.ts", "../../node_modules/@reduxjs/toolkit/src/getDefaultEnhancers.ts", "../../node_modules/@reduxjs/toolkit/src/createReducer.ts", "../../node_modules/@reduxjs/toolkit/src/mapBuilders.ts", "../../node_modules/@reduxjs/toolkit/src/matchers.ts", "../../node_modules/@reduxjs/toolkit/src/nanoid.ts", "../../node_modules/@reduxjs/toolkit/src/createAsyncThunk.ts", "../../node_modules/@reduxjs/toolkit/src/createSlice.ts", "../../node_modules/@reduxjs/toolkit/src/entities/entity_state.ts", "../../node_modules/@reduxjs/toolkit/src/entities/state_selectors.ts", "../../node_modules/@reduxjs/toolkit/src/entities/state_adapter.ts", "../../node_modules/@reduxjs/toolkit/src/entities/utils.ts", "../../node_modules/@reduxjs/toolkit/src/entities/unsorted_state_adapter.ts", "../../node_modules/@reduxjs/toolkit/src/entities/sorted_state_adapter.ts", "../../node_modules/@reduxjs/toolkit/src/entities/create_adapter.ts", "../../node_modules/@reduxjs/toolkit/src/listenerMiddleware/index.ts", "../../node_modules/@reduxjs/toolkit/src/listenerMiddleware/exceptions.ts", "../../node_modules/@reduxjs/toolkit/src/listenerMiddleware/utils.ts", "../../node_modules/@reduxjs/toolkit/src/listenerMiddleware/task.ts", "../../node_modules/@reduxjs/toolkit/src/dynamicMiddleware/index.ts", "../../node_modules/@reduxjs/toolkit/src/combineSlices.ts", "../../node_modules/@reduxjs/toolkit/src/formatProdErrorMessage.ts", "../../src/ts/features/auth/authSlice.ts", "../../node_modules/tslib/tslib.es6.mjs", "../../node_modules/rxjs/src/internal/util/isFunction.ts", "../../node_modules/rxjs/src/internal/util/createErrorClass.ts", "../../node_modules/rxjs/src/internal/util/UnsubscriptionError.ts", "../../node_modules/rxjs/src/internal/util/arrRemove.ts", "../../node_modules/rxjs/src/internal/Subscription.ts", "../../node_modules/rxjs/src/internal/config.ts", "../../node_modules/rxjs/src/internal/scheduler/timeoutProvider.ts", "../../node_modules/rxjs/src/internal/util/reportUnhandledError.ts", "../../node_modules/rxjs/src/internal/util/noop.ts", "../../node_modules/rxjs/src/internal/NotificationFactories.ts", "../../node_modules/rxjs/src/internal/util/errorContext.ts", "../../node_modules/rxjs/src/internal/Subscriber.ts", "../../node_modules/rxjs/src/internal/symbol/observable.ts", "../../node_modules/rxjs/src/internal/util/identity.ts", "../../node_modules/rxjs/src/internal/util/pipe.ts", "../../node_modules/rxjs/src/internal/Observable.ts", "../../node_modules/rxjs/src/internal/util/lift.ts", "../../node_modules/rxjs/src/internal/operators/OperatorSubscriber.ts", "../../node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts", "../../node_modules/rxjs/src/internal/Subject.ts", "../../node_modules/rxjs/src/internal/scheduler/dateTimestampProvider.ts", "../../node_modules/rxjs/src/internal/scheduler/Action.ts", "../../node_modules/rxjs/src/internal/scheduler/intervalProvider.ts", "../../node_modules/rxjs/src/internal/scheduler/AsyncAction.ts", "../../node_modules/rxjs/src/internal/Scheduler.ts", "../../node_modules/rxjs/src/internal/scheduler/AsyncScheduler.ts", "../../node_modules/rxjs/src/internal/scheduler/QueueAction.ts", "../../node_modules/rxjs/src/internal/scheduler/QueueScheduler.ts", "../../node_modules/rxjs/src/internal/scheduler/queue.ts", "../../node_modules/rxjs/src/internal/observable/empty.ts", "../../node_modules/rxjs/src/internal/util/isScheduler.ts", "../../node_modules/rxjs/src/internal/util/args.ts", "../../node_modules/rxjs/src/internal/util/isArrayLike.ts", "../../node_modules/rxjs/src/internal/util/isPromise.ts", "../../node_modules/rxjs/src/internal/util/isInteropObservable.ts", "../../node_modules/rxjs/src/internal/util/isAsyncIterable.ts", "../../node_modules/rxjs/src/internal/util/throwUnobservableError.ts", "../../node_modules/rxjs/src/internal/symbol/iterator.ts", "../../node_modules/rxjs/src/internal/util/isIterable.ts", "../../node_modules/rxjs/src/internal/util/isReadableStreamLike.ts", "../../node_modules/rxjs/src/internal/observable/innerFrom.ts", "../../node_modules/rxjs/src/internal/util/executeSchedule.ts", "../../node_modules/rxjs/src/internal/operators/observeOn.ts", "../../node_modules/rxjs/src/internal/operators/subscribeOn.ts", "../../node_modules/rxjs/src/internal/scheduled/scheduleObservable.ts", "../../node_modules/rxjs/src/internal/scheduled/schedulePromise.ts", "../../node_modules/rxjs/src/internal/scheduled/scheduleArray.ts", "../../node_modules/rxjs/src/internal/scheduled/scheduleIterable.ts", "../../node_modules/rxjs/src/internal/scheduled/scheduleAsyncIterable.ts", "../../node_modules/rxjs/src/internal/scheduled/scheduleReadableStreamLike.ts", "../../node_modules/rxjs/src/internal/scheduled/scheduled.ts", "../../node_modules/rxjs/src/internal/observable/from.ts", "../../node_modules/rxjs/src/internal/observable/of.ts", "../../node_modules/rxjs/src/internal/operators/map.ts", "../../node_modules/rxjs/src/internal/operators/mergeInternals.ts", "../../node_modules/rxjs/src/internal/operators/mergeMap.ts", "../../node_modules/rxjs/src/internal/operators/mergeAll.ts", "../../node_modules/rxjs/src/internal/observable/merge.ts", "../../node_modules/rxjs/src/internal/operators/filter.ts", "../../node_modules/rxjs/src/internal/operators/catchError.ts", "../../node_modules/redux-observable/src/StateObservable.ts", "../../node_modules/redux-observable/src/combineEpics.ts", "../../node_modules/redux-observable/src/createEpicMiddleware.ts", "../../node_modules/redux-observable/src/utils/console.ts", "../../node_modules/redux-observable/src/operators.ts", "../../src/ts/features/epics/appDidStart.ts", "../../node_modules/appwrite/node_modules/tslib/tslib.es6.js", "../../node_modules/appwrite/src/service.ts", "../../node_modules/appwrite/src/query.ts", "../../node_modules/appwrite/src/client.ts", "../../node_modules/appwrite/src/services/account.ts", "../../node_modules/appwrite/src/services/avatars.ts", "../../node_modules/appwrite/src/services/databases.ts", "../../node_modules/appwrite/src/services/functions.ts", "../../node_modules/appwrite/src/services/graphql.ts", "../../node_modules/appwrite/src/services/locale.ts", "../../node_modules/appwrite/src/services/messaging.ts", "../../node_modules/appwrite/src/services/storage.ts", "../../node_modules/appwrite/src/services/teams.ts", "../../node_modules/appwrite/src/permission.ts", "../../node_modules/appwrite/src/role.ts", "../../node_modules/appwrite/src/id.ts", "../../node_modules/appwrite/src/enums/authenticator-type.ts", "../../node_modules/appwrite/src/enums/authentication-factor.ts", "../../node_modules/appwrite/src/enums/o-auth-provider.ts", "../../node_modules/appwrite/src/enums/browser.ts", "../../node_modules/appwrite/src/enums/credit-card.ts", "../../node_modules/appwrite/src/enums/flag.ts", "../../node_modules/appwrite/src/enums/execution-method.ts", "../../node_modules/appwrite/src/enums/image-gravity.ts", "../../node_modules/appwrite/src/enums/image-format.ts", "../../src/ts/features/appwrite/appwrite.ts", "../../src/ts/features/epics/authWillGetUser.ts", "../../src/ts/features/epics/authDidGetLoginEmail.ts", "../../src/ts/features/epics/authWillCreateSession.ts", "../../src/ts/features/epics/authDidCreateSession.ts", "../../src/ts/app/reduxStore.ts", "../../src/ts/features/store/useRedux.ts", "../../src/ts/main.tsx"],
  "sourcesContent": ["let taskIdCounter = 1,\n  isCallbackScheduled = false,\n  isPerformingWork = false,\n  taskQueue = [],\n  currentTask = null,\n  shouldYieldToHost = null,\n  yieldInterval = 5,\n  deadline = 0,\n  maxYieldInterval = 300,\n  scheduleCallback = null,\n  scheduledCallback = null;\nconst maxSigned31BitInt = 1073741823;\nfunction setupScheduler() {\n  const channel = new MessageChannel(),\n    port = channel.port2;\n  scheduleCallback = () => port.postMessage(null);\n  channel.port1.onmessage = () => {\n    if (scheduledCallback !== null) {\n      const currentTime = performance.now();\n      deadline = currentTime + yieldInterval;\n      const hasTimeRemaining = true;\n      try {\n        const hasMoreWork = scheduledCallback(hasTimeRemaining, currentTime);\n        if (!hasMoreWork) {\n          scheduledCallback = null;\n        } else port.postMessage(null);\n      } catch (error) {\n        port.postMessage(null);\n        throw error;\n      }\n    }\n  };\n  if (navigator && navigator.scheduling && navigator.scheduling.isInputPending) {\n    const scheduling = navigator.scheduling;\n    shouldYieldToHost = () => {\n      const currentTime = performance.now();\n      if (currentTime >= deadline) {\n        if (scheduling.isInputPending()) {\n          return true;\n        }\n        return currentTime >= maxYieldInterval;\n      } else {\n        return false;\n      }\n    };\n  } else {\n    shouldYieldToHost = () => performance.now() >= deadline;\n  }\n}\nfunction enqueue(taskQueue, task) {\n  function findIndex() {\n    let m = 0;\n    let n = taskQueue.length - 1;\n    while (m <= n) {\n      const k = (n + m) >> 1;\n      const cmp = task.expirationTime - taskQueue[k].expirationTime;\n      if (cmp > 0) m = k + 1;\n      else if (cmp < 0) n = k - 1;\n      else return k;\n    }\n    return m;\n  }\n  taskQueue.splice(findIndex(), 0, task);\n}\nfunction requestCallback(fn, options) {\n  if (!scheduleCallback) setupScheduler();\n  let startTime = performance.now(),\n    timeout = maxSigned31BitInt;\n  if (options && options.timeout) timeout = options.timeout;\n  const newTask = {\n    id: taskIdCounter++,\n    fn,\n    startTime,\n    expirationTime: startTime + timeout\n  };\n  enqueue(taskQueue, newTask);\n  if (!isCallbackScheduled && !isPerformingWork) {\n    isCallbackScheduled = true;\n    scheduledCallback = flushWork;\n    scheduleCallback();\n  }\n  return newTask;\n}\nfunction cancelCallback(task) {\n  task.fn = null;\n}\nfunction flushWork(hasTimeRemaining, initialTime) {\n  isCallbackScheduled = false;\n  isPerformingWork = true;\n  try {\n    return workLoop(hasTimeRemaining, initialTime);\n  } finally {\n    currentTask = null;\n    isPerformingWork = false;\n  }\n}\nfunction workLoop(hasTimeRemaining, initialTime) {\n  let currentTime = initialTime;\n  currentTask = taskQueue[0] || null;\n  while (currentTask !== null) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n      break;\n    }\n    const callback = currentTask.fn;\n    if (callback !== null) {\n      currentTask.fn = null;\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n      callback(didUserCallbackTimeout);\n      currentTime = performance.now();\n      if (currentTask === taskQueue[0]) {\n        taskQueue.shift();\n      }\n    } else taskQueue.shift();\n    currentTask = taskQueue[0] || null;\n  }\n  return currentTask !== null;\n}\n\nconst sharedConfig = {\n  context: undefined,\n  registry: undefined,\n  done: false,\n  getContextId() {\n    return getContextId(this.context.count);\n  },\n  getNextContextId() {\n    return getContextId(this.context.count++);\n  }\n};\nfunction getContextId(count) {\n  const num = String(count),\n    len = num.length - 1;\n  return sharedConfig.context.id + (len ? String.fromCharCode(96 + len) : \"\") + num;\n}\nfunction setHydrateContext(context) {\n  sharedConfig.context = context;\n}\nfunction nextHydrateContext() {\n  return {\n    ...sharedConfig.context,\n    id: sharedConfig.getNextContextId(),\n    count: 0\n  };\n}\n\nconst equalFn = (a, b) => a === b;\nconst $PROXY = Symbol(\"solid-proxy\");\nconst $TRACK = Symbol(\"solid-track\");\nconst $DEVCOMP = Symbol(\"solid-dev-component\");\nconst signalOptions = {\n  equals: equalFn\n};\nlet ERROR = null;\nlet runEffects = runQueue;\nconst STALE = 1;\nconst PENDING = 2;\nconst UNOWNED = {\n  owned: null,\n  cleanups: null,\n  context: null,\n  owner: null\n};\nconst NO_INIT = {};\nvar Owner = null;\nlet Transition = null;\nlet Scheduler = null;\nlet ExternalSourceConfig = null;\nlet Listener = null;\nlet Updates = null;\nlet Effects = null;\nlet ExecCount = 0;\nfunction createRoot(fn, detachedOwner) {\n  const listener = Listener,\n    owner = Owner,\n    unowned = fn.length === 0,\n    current = detachedOwner === undefined ? owner : detachedOwner,\n    root = unowned\n      ? UNOWNED\n      : {\n          owned: null,\n          cleanups: null,\n          context: current ? current.context : null,\n          owner: current\n        },\n    updateFn = unowned ? fn : () => fn(() => untrack(() => cleanNode(root)));\n  Owner = root;\n  Listener = null;\n  try {\n    return runUpdates(updateFn, true);\n  } finally {\n    Listener = listener;\n    Owner = owner;\n  }\n}\nfunction createSignal(value, options) {\n  options = options ? Object.assign({}, signalOptions, options) : signalOptions;\n  const s = {\n    value,\n    observers: null,\n    observerSlots: null,\n    comparator: options.equals || undefined\n  };\n  const setter = value => {\n    if (typeof value === \"function\") {\n      if (Transition && Transition.running && Transition.sources.has(s)) value = value(s.tValue);\n      else value = value(s.value);\n    }\n    return writeSignal(s, value);\n  };\n  return [readSignal.bind(s), setter];\n}\nfunction createComputed(fn, value, options) {\n  const c = createComputation(fn, value, true, STALE);\n  if (Scheduler && Transition && Transition.running) Updates.push(c);\n  else updateComputation(c);\n}\nfunction createRenderEffect(fn, value, options) {\n  const c = createComputation(fn, value, false, STALE);\n  if (Scheduler && Transition && Transition.running) Updates.push(c);\n  else updateComputation(c);\n}\nfunction createEffect(fn, value, options) {\n  runEffects = runUserEffects;\n  const c = createComputation(fn, value, false, STALE),\n    s = SuspenseContext && useContext(SuspenseContext);\n  if (s) c.suspense = s;\n  if (!options || !options.render) c.user = true;\n  Effects ? Effects.push(c) : updateComputation(c);\n}\nfunction createReaction(onInvalidate, options) {\n  let fn;\n  const c = createComputation(\n      () => {\n        fn ? fn() : untrack(onInvalidate);\n        fn = undefined;\n      },\n      undefined,\n      false,\n      0\n    ),\n    s = SuspenseContext && useContext(SuspenseContext);\n  if (s) c.suspense = s;\n  c.user = true;\n  return tracking => {\n    fn = tracking;\n    updateComputation(c);\n  };\n}\nfunction createMemo(fn, value, options) {\n  options = options ? Object.assign({}, signalOptions, options) : signalOptions;\n  const c = createComputation(fn, value, true, 0);\n  c.observers = null;\n  c.observerSlots = null;\n  c.comparator = options.equals || undefined;\n  if (Scheduler && Transition && Transition.running) {\n    c.tState = STALE;\n    Updates.push(c);\n  } else updateComputation(c);\n  return readSignal.bind(c);\n}\nfunction isPromise(v) {\n  return v && typeof v === \"object\" && \"then\" in v;\n}\nfunction createResource(pSource, pFetcher, pOptions) {\n  let source;\n  let fetcher;\n  let options;\n  if ((arguments.length === 2 && typeof pFetcher === \"object\") || arguments.length === 1) {\n    source = true;\n    fetcher = pSource;\n    options = pFetcher || {};\n  } else {\n    source = pSource;\n    fetcher = pFetcher;\n    options = pOptions || {};\n  }\n  let pr = null,\n    initP = NO_INIT,\n    id = null,\n    loadedUnderTransition = false,\n    scheduled = false,\n    resolved = \"initialValue\" in options,\n    dynamic = typeof source === \"function\" && createMemo(source);\n  const contexts = new Set(),\n    [value, setValue] = (options.storage || createSignal)(options.initialValue),\n    [error, setError] = createSignal(undefined),\n    [track, trigger] = createSignal(undefined, {\n      equals: false\n    }),\n    [state, setState] = createSignal(resolved ? \"ready\" : \"unresolved\");\n  if (sharedConfig.context) {\n    id = sharedConfig.getNextContextId();\n    if (options.ssrLoadFrom === \"initial\") initP = options.initialValue;\n    else if (sharedConfig.load && sharedConfig.has(id)) initP = sharedConfig.load(id);\n  }\n  function loadEnd(p, v, error, key) {\n    if (pr === p) {\n      pr = null;\n      key !== undefined && (resolved = true);\n      if ((p === initP || v === initP) && options.onHydrated)\n        queueMicrotask(() =>\n          options.onHydrated(key, {\n            value: v\n          })\n        );\n      initP = NO_INIT;\n      if (Transition && p && loadedUnderTransition) {\n        Transition.promises.delete(p);\n        loadedUnderTransition = false;\n        runUpdates(() => {\n          Transition.running = true;\n          completeLoad(v, error);\n        }, false);\n      } else completeLoad(v, error);\n    }\n    return v;\n  }\n  function completeLoad(v, err) {\n    runUpdates(() => {\n      if (err === undefined) setValue(() => v);\n      setState(err !== undefined ? \"errored\" : resolved ? \"ready\" : \"unresolved\");\n      setError(err);\n      for (const c of contexts.keys()) c.decrement();\n      contexts.clear();\n    }, false);\n  }\n  function read() {\n    const c = SuspenseContext && useContext(SuspenseContext),\n      v = value(),\n      err = error();\n    if (err !== undefined && !pr) throw err;\n    if (Listener && !Listener.user && c) {\n      createComputed(() => {\n        track();\n        if (pr) {\n          if (c.resolved && Transition && loadedUnderTransition) Transition.promises.add(pr);\n          else if (!contexts.has(c)) {\n            c.increment();\n            contexts.add(c);\n          }\n        }\n      });\n    }\n    return v;\n  }\n  function load(refetching = true) {\n    if (refetching !== false && scheduled) return;\n    scheduled = false;\n    const lookup = dynamic ? dynamic() : source;\n    loadedUnderTransition = Transition && Transition.running;\n    if (lookup == null || lookup === false) {\n      loadEnd(pr, untrack(value));\n      return;\n    }\n    if (Transition && pr) Transition.promises.delete(pr);\n    const p =\n      initP !== NO_INIT\n        ? initP\n        : untrack(() =>\n            fetcher(lookup, {\n              value: value(),\n              refetching\n            })\n          );\n    if (!isPromise(p)) {\n      loadEnd(pr, p, undefined, lookup);\n      return p;\n    }\n    pr = p;\n    if (\"value\" in p) {\n      if (p.status === \"success\") loadEnd(pr, p.value, undefined, lookup);\n      else loadEnd(pr, undefined, castError(p.value), lookup);\n      return p;\n    }\n    scheduled = true;\n    queueMicrotask(() => (scheduled = false));\n    runUpdates(() => {\n      setState(resolved ? \"refreshing\" : \"pending\");\n      trigger();\n    }, false);\n    return p.then(\n      v => loadEnd(p, v, undefined, lookup),\n      e => loadEnd(p, undefined, castError(e), lookup)\n    );\n  }\n  Object.defineProperties(read, {\n    state: {\n      get: () => state()\n    },\n    error: {\n      get: () => error()\n    },\n    loading: {\n      get() {\n        const s = state();\n        return s === \"pending\" || s === \"refreshing\";\n      }\n    },\n    latest: {\n      get() {\n        if (!resolved) return read();\n        const err = error();\n        if (err && !pr) throw err;\n        return value();\n      }\n    }\n  });\n  if (dynamic) createComputed(() => load(false));\n  else load(false);\n  return [\n    read,\n    {\n      refetch: load,\n      mutate: setValue\n    }\n  ];\n}\nfunction createDeferred(source, options) {\n  let t,\n    timeout = options ? options.timeoutMs : undefined;\n  const node = createComputation(\n    () => {\n      if (!t || !t.fn)\n        t = requestCallback(\n          () => setDeferred(() => node.value),\n          timeout !== undefined\n            ? {\n                timeout\n              }\n            : undefined\n        );\n      return source();\n    },\n    undefined,\n    true\n  );\n  const [deferred, setDeferred] = createSignal(\n    Transition && Transition.running && Transition.sources.has(node) ? node.tValue : node.value,\n    options\n  );\n  updateComputation(node);\n  setDeferred(() =>\n    Transition && Transition.running && Transition.sources.has(node) ? node.tValue : node.value\n  );\n  return deferred;\n}\nfunction createSelector(source, fn = equalFn, options) {\n  const subs = new Map();\n  const node = createComputation(\n    p => {\n      const v = source();\n      for (const [key, val] of subs.entries())\n        if (fn(key, v) !== fn(key, p)) {\n          for (const c of val.values()) {\n            c.state = STALE;\n            if (c.pure) Updates.push(c);\n            else Effects.push(c);\n          }\n        }\n      return v;\n    },\n    undefined,\n    true,\n    STALE\n  );\n  updateComputation(node);\n  return key => {\n    const listener = Listener;\n    if (listener) {\n      let l;\n      if ((l = subs.get(key))) l.add(listener);\n      else subs.set(key, (l = new Set([listener])));\n      onCleanup(() => {\n        l.delete(listener);\n        !l.size && subs.delete(key);\n      });\n    }\n    return fn(\n      key,\n      Transition && Transition.running && Transition.sources.has(node) ? node.tValue : node.value\n    );\n  };\n}\nfunction batch(fn) {\n  return runUpdates(fn, false);\n}\nfunction untrack(fn) {\n  if (!ExternalSourceConfig && Listener === null) return fn();\n  const listener = Listener;\n  Listener = null;\n  try {\n    if (ExternalSourceConfig) return ExternalSourceConfig.untrack(fn);\n    return fn();\n  } finally {\n    Listener = listener;\n  }\n}\nfunction on(deps, fn, options) {\n  const isArray = Array.isArray(deps);\n  let prevInput;\n  let defer = options && options.defer;\n  return prevValue => {\n    let input;\n    if (isArray) {\n      input = Array(deps.length);\n      for (let i = 0; i < deps.length; i++) input[i] = deps[i]();\n    } else input = deps();\n    if (defer) {\n      defer = false;\n      return prevValue;\n    }\n    const result = untrack(() => fn(input, prevInput, prevValue));\n    prevInput = input;\n    return result;\n  };\n}\nfunction onMount(fn) {\n  createEffect(() => untrack(fn));\n}\nfunction onCleanup(fn) {\n  if (Owner === null);\n  else if (Owner.cleanups === null) Owner.cleanups = [fn];\n  else Owner.cleanups.push(fn);\n  return fn;\n}\nfunction catchError(fn, handler) {\n  ERROR || (ERROR = Symbol(\"error\"));\n  Owner = createComputation(undefined, undefined, true);\n  Owner.context = {\n    ...Owner.context,\n    [ERROR]: [handler]\n  };\n  if (Transition && Transition.running) Transition.sources.add(Owner);\n  try {\n    return fn();\n  } catch (err) {\n    handleError(err);\n  } finally {\n    Owner = Owner.owner;\n  }\n}\nfunction getListener() {\n  return Listener;\n}\nfunction getOwner() {\n  return Owner;\n}\nfunction runWithOwner(o, fn) {\n  const prev = Owner;\n  const prevListener = Listener;\n  Owner = o;\n  Listener = null;\n  try {\n    return runUpdates(fn, true);\n  } catch (err) {\n    handleError(err);\n  } finally {\n    Owner = prev;\n    Listener = prevListener;\n  }\n}\nfunction enableScheduling(scheduler = requestCallback) {\n  Scheduler = scheduler;\n}\nfunction startTransition(fn) {\n  if (Transition && Transition.running) {\n    fn();\n    return Transition.done;\n  }\n  const l = Listener;\n  const o = Owner;\n  return Promise.resolve().then(() => {\n    Listener = l;\n    Owner = o;\n    let t;\n    if (Scheduler || SuspenseContext) {\n      t =\n        Transition ||\n        (Transition = {\n          sources: new Set(),\n          effects: [],\n          promises: new Set(),\n          disposed: new Set(),\n          queue: new Set(),\n          running: true\n        });\n      t.done || (t.done = new Promise(res => (t.resolve = res)));\n      t.running = true;\n    }\n    runUpdates(fn, false);\n    Listener = Owner = null;\n    return t ? t.done : undefined;\n  });\n}\nconst [transPending, setTransPending] = /*@__PURE__*/ createSignal(false);\nfunction useTransition() {\n  return [transPending, startTransition];\n}\nfunction resumeEffects(e) {\n  Effects.push.apply(Effects, e);\n  e.length = 0;\n}\nfunction createContext(defaultValue, options) {\n  const id = Symbol(\"context\");\n  return {\n    id,\n    Provider: createProvider(id),\n    defaultValue\n  };\n}\nfunction useContext(context) {\n  let value;\n  return Owner && Owner.context && (value = Owner.context[context.id]) !== undefined\n    ? value\n    : context.defaultValue;\n}\nfunction children(fn) {\n  const children = createMemo(fn);\n  const memo = createMemo(() => resolveChildren(children()));\n  memo.toArray = () => {\n    const c = memo();\n    return Array.isArray(c) ? c : c != null ? [c] : [];\n  };\n  return memo;\n}\nlet SuspenseContext;\nfunction getSuspenseContext() {\n  return SuspenseContext || (SuspenseContext = createContext());\n}\nfunction enableExternalSource(factory, untrack = fn => fn()) {\n  if (ExternalSourceConfig) {\n    const { factory: oldFactory, untrack: oldUntrack } = ExternalSourceConfig;\n    ExternalSourceConfig = {\n      factory: (fn, trigger) => {\n        const oldSource = oldFactory(fn, trigger);\n        const source = factory(x => oldSource.track(x), trigger);\n        return {\n          track: x => source.track(x),\n          dispose() {\n            source.dispose();\n            oldSource.dispose();\n          }\n        };\n      },\n      untrack: fn => oldUntrack(() => untrack(fn))\n    };\n  } else {\n    ExternalSourceConfig = {\n      factory,\n      untrack\n    };\n  }\n}\nfunction readSignal() {\n  const runningTransition = Transition && Transition.running;\n  if (this.sources && (runningTransition ? this.tState : this.state)) {\n    if ((runningTransition ? this.tState : this.state) === STALE) updateComputation(this);\n    else {\n      const updates = Updates;\n      Updates = null;\n      runUpdates(() => lookUpstream(this), false);\n      Updates = updates;\n    }\n  }\n  if (Listener) {\n    const sSlot = this.observers ? this.observers.length : 0;\n    if (!Listener.sources) {\n      Listener.sources = [this];\n      Listener.sourceSlots = [sSlot];\n    } else {\n      Listener.sources.push(this);\n      Listener.sourceSlots.push(sSlot);\n    }\n    if (!this.observers) {\n      this.observers = [Listener];\n      this.observerSlots = [Listener.sources.length - 1];\n    } else {\n      this.observers.push(Listener);\n      this.observerSlots.push(Listener.sources.length - 1);\n    }\n  }\n  if (runningTransition && Transition.sources.has(this)) return this.tValue;\n  return this.value;\n}\nfunction writeSignal(node, value, isComp) {\n  let current =\n    Transition && Transition.running && Transition.sources.has(node) ? node.tValue : node.value;\n  if (!node.comparator || !node.comparator(current, value)) {\n    if (Transition) {\n      const TransitionRunning = Transition.running;\n      if (TransitionRunning || (!isComp && Transition.sources.has(node))) {\n        Transition.sources.add(node);\n        node.tValue = value;\n      }\n      if (!TransitionRunning) node.value = value;\n    } else node.value = value;\n    if (node.observers && node.observers.length) {\n      runUpdates(() => {\n        for (let i = 0; i < node.observers.length; i += 1) {\n          const o = node.observers[i];\n          const TransitionRunning = Transition && Transition.running;\n          if (TransitionRunning && Transition.disposed.has(o)) continue;\n          if (TransitionRunning ? !o.tState : !o.state) {\n            if (o.pure) Updates.push(o);\n            else Effects.push(o);\n            if (o.observers) markDownstream(o);\n          }\n          if (!TransitionRunning) o.state = STALE;\n          else o.tState = STALE;\n        }\n        if (Updates.length > 10e5) {\n          Updates = [];\n          if (false);\n          throw new Error();\n        }\n      }, false);\n    }\n  }\n  return value;\n}\nfunction updateComputation(node) {\n  if (!node.fn) return;\n  cleanNode(node);\n  const time = ExecCount;\n  runComputation(\n    node,\n    Transition && Transition.running && Transition.sources.has(node) ? node.tValue : node.value,\n    time\n  );\n  if (Transition && !Transition.running && Transition.sources.has(node)) {\n    queueMicrotask(() => {\n      runUpdates(() => {\n        Transition && (Transition.running = true);\n        Listener = Owner = node;\n        runComputation(node, node.tValue, time);\n        Listener = Owner = null;\n      }, false);\n    });\n  }\n}\nfunction runComputation(node, value, time) {\n  let nextValue;\n  const owner = Owner,\n    listener = Listener;\n  Listener = Owner = node;\n  try {\n    nextValue = node.fn(value);\n  } catch (err) {\n    if (node.pure) {\n      if (Transition && Transition.running) {\n        node.tState = STALE;\n        node.tOwned && node.tOwned.forEach(cleanNode);\n        node.tOwned = undefined;\n      } else {\n        node.state = STALE;\n        node.owned && node.owned.forEach(cleanNode);\n        node.owned = null;\n      }\n    }\n    node.updatedAt = time + 1;\n    return handleError(err);\n  } finally {\n    Listener = listener;\n    Owner = owner;\n  }\n  if (!node.updatedAt || node.updatedAt <= time) {\n    if (node.updatedAt != null && \"observers\" in node) {\n      writeSignal(node, nextValue, true);\n    } else if (Transition && Transition.running && node.pure) {\n      Transition.sources.add(node);\n      node.tValue = nextValue;\n    } else node.value = nextValue;\n    node.updatedAt = time;\n  }\n}\nfunction createComputation(fn, init, pure, state = STALE, options) {\n  const c = {\n    fn,\n    state: state,\n    updatedAt: null,\n    owned: null,\n    sources: null,\n    sourceSlots: null,\n    cleanups: null,\n    value: init,\n    owner: Owner,\n    context: Owner ? Owner.context : null,\n    pure\n  };\n  if (Transition && Transition.running) {\n    c.state = 0;\n    c.tState = state;\n  }\n  if (Owner === null);\n  else if (Owner !== UNOWNED) {\n    if (Transition && Transition.running && Owner.pure) {\n      if (!Owner.tOwned) Owner.tOwned = [c];\n      else Owner.tOwned.push(c);\n    } else {\n      if (!Owner.owned) Owner.owned = [c];\n      else Owner.owned.push(c);\n    }\n  }\n  if (ExternalSourceConfig && c.fn) {\n    const [track, trigger] = createSignal(undefined, {\n      equals: false\n    });\n    const ordinary = ExternalSourceConfig.factory(c.fn, trigger);\n    onCleanup(() => ordinary.dispose());\n    const triggerInTransition = () => startTransition(trigger).then(() => inTransition.dispose());\n    const inTransition = ExternalSourceConfig.factory(c.fn, triggerInTransition);\n    c.fn = x => {\n      track();\n      return Transition && Transition.running ? inTransition.track(x) : ordinary.track(x);\n    };\n  }\n  return c;\n}\nfunction runTop(node) {\n  const runningTransition = Transition && Transition.running;\n  if ((runningTransition ? node.tState : node.state) === 0) return;\n  if ((runningTransition ? node.tState : node.state) === PENDING) return lookUpstream(node);\n  if (node.suspense && untrack(node.suspense.inFallback)) return node.suspense.effects.push(node);\n  const ancestors = [node];\n  while ((node = node.owner) && (!node.updatedAt || node.updatedAt < ExecCount)) {\n    if (runningTransition && Transition.disposed.has(node)) return;\n    if (runningTransition ? node.tState : node.state) ancestors.push(node);\n  }\n  for (let i = ancestors.length - 1; i >= 0; i--) {\n    node = ancestors[i];\n    if (runningTransition) {\n      let top = node,\n        prev = ancestors[i + 1];\n      while ((top = top.owner) && top !== prev) {\n        if (Transition.disposed.has(top)) return;\n      }\n    }\n    if ((runningTransition ? node.tState : node.state) === STALE) {\n      updateComputation(node);\n    } else if ((runningTransition ? node.tState : node.state) === PENDING) {\n      const updates = Updates;\n      Updates = null;\n      runUpdates(() => lookUpstream(node, ancestors[0]), false);\n      Updates = updates;\n    }\n  }\n}\nfunction runUpdates(fn, init) {\n  if (Updates) return fn();\n  let wait = false;\n  if (!init) Updates = [];\n  if (Effects) wait = true;\n  else Effects = [];\n  ExecCount++;\n  try {\n    const res = fn();\n    completeUpdates(wait);\n    return res;\n  } catch (err) {\n    if (!wait) Effects = null;\n    Updates = null;\n    handleError(err);\n  }\n}\nfunction completeUpdates(wait) {\n  if (Updates) {\n    if (Scheduler && Transition && Transition.running) scheduleQueue(Updates);\n    else runQueue(Updates);\n    Updates = null;\n  }\n  if (wait) return;\n  let res;\n  if (Transition) {\n    if (!Transition.promises.size && !Transition.queue.size) {\n      const sources = Transition.sources;\n      const disposed = Transition.disposed;\n      Effects.push.apply(Effects, Transition.effects);\n      res = Transition.resolve;\n      for (const e of Effects) {\n        \"tState\" in e && (e.state = e.tState);\n        delete e.tState;\n      }\n      Transition = null;\n      runUpdates(() => {\n        for (const d of disposed) cleanNode(d);\n        for (const v of sources) {\n          v.value = v.tValue;\n          if (v.owned) {\n            for (let i = 0, len = v.owned.length; i < len; i++) cleanNode(v.owned[i]);\n          }\n          if (v.tOwned) v.owned = v.tOwned;\n          delete v.tValue;\n          delete v.tOwned;\n          v.tState = 0;\n        }\n        setTransPending(false);\n      }, false);\n    } else if (Transition.running) {\n      Transition.running = false;\n      Transition.effects.push.apply(Transition.effects, Effects);\n      Effects = null;\n      setTransPending(true);\n      return;\n    }\n  }\n  const e = Effects;\n  Effects = null;\n  if (e.length) runUpdates(() => runEffects(e), false);\n  if (res) res();\n}\nfunction runQueue(queue) {\n  for (let i = 0; i < queue.length; i++) runTop(queue[i]);\n}\nfunction scheduleQueue(queue) {\n  for (let i = 0; i < queue.length; i++) {\n    const item = queue[i];\n    const tasks = Transition.queue;\n    if (!tasks.has(item)) {\n      tasks.add(item);\n      Scheduler(() => {\n        tasks.delete(item);\n        runUpdates(() => {\n          Transition.running = true;\n          runTop(item);\n        }, false);\n        Transition && (Transition.running = false);\n      });\n    }\n  }\n}\nfunction runUserEffects(queue) {\n  let i,\n    userLength = 0;\n  for (i = 0; i < queue.length; i++) {\n    const e = queue[i];\n    if (!e.user) runTop(e);\n    else queue[userLength++] = e;\n  }\n  if (sharedConfig.context) {\n    if (sharedConfig.count) {\n      sharedConfig.effects || (sharedConfig.effects = []);\n      sharedConfig.effects.push(...queue.slice(0, userLength));\n      return;\n    } else if (sharedConfig.effects) {\n      queue = [...sharedConfig.effects, ...queue];\n      userLength += sharedConfig.effects.length;\n      delete sharedConfig.effects;\n    }\n    setHydrateContext();\n  }\n  for (i = 0; i < userLength; i++) runTop(queue[i]);\n}\nfunction lookUpstream(node, ignore) {\n  const runningTransition = Transition && Transition.running;\n  if (runningTransition) node.tState = 0;\n  else node.state = 0;\n  for (let i = 0; i < node.sources.length; i += 1) {\n    const source = node.sources[i];\n    if (source.sources) {\n      const state = runningTransition ? source.tState : source.state;\n      if (state === STALE) {\n        if (source !== ignore && (!source.updatedAt || source.updatedAt < ExecCount))\n          runTop(source);\n      } else if (state === PENDING) lookUpstream(source, ignore);\n    }\n  }\n}\nfunction markDownstream(node) {\n  const runningTransition = Transition && Transition.running;\n  for (let i = 0; i < node.observers.length; i += 1) {\n    const o = node.observers[i];\n    if (runningTransition ? !o.tState : !o.state) {\n      if (runningTransition) o.tState = PENDING;\n      else o.state = PENDING;\n      if (o.pure) Updates.push(o);\n      else Effects.push(o);\n      o.observers && markDownstream(o);\n    }\n  }\n}\nfunction cleanNode(node) {\n  let i;\n  if (node.sources) {\n    while (node.sources.length) {\n      const source = node.sources.pop(),\n        index = node.sourceSlots.pop(),\n        obs = source.observers;\n      if (obs && obs.length) {\n        const n = obs.pop(),\n          s = source.observerSlots.pop();\n        if (index < obs.length) {\n          n.sourceSlots[s] = index;\n          obs[index] = n;\n          source.observerSlots[index] = s;\n        }\n      }\n    }\n  }\n  if (Transition && Transition.running && node.pure) {\n    if (node.tOwned) {\n      for (i = node.tOwned.length - 1; i >= 0; i--) cleanNode(node.tOwned[i]);\n      delete node.tOwned;\n    }\n    reset(node, true);\n  } else if (node.owned) {\n    for (i = node.owned.length - 1; i >= 0; i--) cleanNode(node.owned[i]);\n    node.owned = null;\n  }\n  if (node.cleanups) {\n    for (i = node.cleanups.length - 1; i >= 0; i--) node.cleanups[i]();\n    node.cleanups = null;\n  }\n  if (Transition && Transition.running) node.tState = 0;\n  else node.state = 0;\n}\nfunction reset(node, top) {\n  if (!top) {\n    node.tState = 0;\n    Transition.disposed.add(node);\n  }\n  if (node.owned) {\n    for (let i = 0; i < node.owned.length; i++) reset(node.owned[i]);\n  }\n}\nfunction castError(err) {\n  if (err instanceof Error) return err;\n  return new Error(typeof err === \"string\" ? err : \"Unknown error\", {\n    cause: err\n  });\n}\nfunction runErrors(err, fns, owner) {\n  try {\n    for (const f of fns) f(err);\n  } catch (e) {\n    handleError(e, (owner && owner.owner) || null);\n  }\n}\nfunction handleError(err, owner = Owner) {\n  const fns = ERROR && owner && owner.context && owner.context[ERROR];\n  const error = castError(err);\n  if (!fns) throw error;\n  if (Effects)\n    Effects.push({\n      fn() {\n        runErrors(error, fns, owner);\n      },\n      state: STALE\n    });\n  else runErrors(error, fns, owner);\n}\nfunction resolveChildren(children) {\n  if (typeof children === \"function\" && !children.length) return resolveChildren(children());\n  if (Array.isArray(children)) {\n    const results = [];\n    for (let i = 0; i < children.length; i++) {\n      const result = resolveChildren(children[i]);\n      Array.isArray(result) ? results.push.apply(results, result) : results.push(result);\n    }\n    return results;\n  }\n  return children;\n}\nfunction createProvider(id, options) {\n  return function provider(props) {\n    let res;\n    createRenderEffect(\n      () =>\n        (res = untrack(() => {\n          Owner.context = {\n            ...Owner.context,\n            [id]: props.value\n          };\n          return children(() => props.children);\n        })),\n      undefined\n    );\n    return res;\n  };\n}\nfunction onError(fn) {\n  ERROR || (ERROR = Symbol(\"error\"));\n  if (Owner === null);\n  else if (Owner.context === null || !Owner.context[ERROR]) {\n    Owner.context = {\n      ...Owner.context,\n      [ERROR]: [fn]\n    };\n    mutateContext(Owner, ERROR, [fn]);\n  } else Owner.context[ERROR].push(fn);\n}\nfunction mutateContext(o, key, value) {\n  if (o.owned) {\n    for (let i = 0; i < o.owned.length; i++) {\n      if (o.owned[i].context === o.context) mutateContext(o.owned[i], key, value);\n      if (!o.owned[i].context) {\n        o.owned[i].context = o.context;\n        mutateContext(o.owned[i], key, value);\n      } else if (!o.owned[i].context[key]) {\n        o.owned[i].context[key] = value;\n        mutateContext(o.owned[i], key, value);\n      }\n    }\n  }\n}\n\nfunction observable(input) {\n  return {\n    subscribe(observer) {\n      if (!(observer instanceof Object) || observer == null) {\n        throw new TypeError(\"Expected the observer to be an object.\");\n      }\n      const handler =\n        typeof observer === \"function\" ? observer : observer.next && observer.next.bind(observer);\n      if (!handler) {\n        return {\n          unsubscribe() {}\n        };\n      }\n      const dispose = createRoot(disposer => {\n        createEffect(() => {\n          const v = input();\n          untrack(() => handler(v));\n        });\n        return disposer;\n      });\n      if (getOwner()) onCleanup(dispose);\n      return {\n        unsubscribe() {\n          dispose();\n        }\n      };\n    },\n    [Symbol.observable || \"@@observable\"]() {\n      return this;\n    }\n  };\n}\nfunction from(producer) {\n  const [s, set] = createSignal(undefined, {\n    equals: false\n  });\n  if (\"subscribe\" in producer) {\n    const unsub = producer.subscribe(v => set(() => v));\n    onCleanup(() => (\"unsubscribe\" in unsub ? unsub.unsubscribe() : unsub()));\n  } else {\n    const clean = producer(set);\n    onCleanup(clean);\n  }\n  return s;\n}\n\nconst FALLBACK = Symbol(\"fallback\");\nfunction dispose(d) {\n  for (let i = 0; i < d.length; i++) d[i]();\n}\nfunction mapArray(list, mapFn, options = {}) {\n  let items = [],\n    mapped = [],\n    disposers = [],\n    len = 0,\n    indexes = mapFn.length > 1 ? [] : null;\n  onCleanup(() => dispose(disposers));\n  return () => {\n    let newItems = list() || [],\n      newLen = newItems.length,\n      i,\n      j;\n    newItems[$TRACK];\n    return untrack(() => {\n      let newIndices, newIndicesNext, temp, tempdisposers, tempIndexes, start, end, newEnd, item;\n      if (newLen === 0) {\n        if (len !== 0) {\n          dispose(disposers);\n          disposers = [];\n          items = [];\n          mapped = [];\n          len = 0;\n          indexes && (indexes = []);\n        }\n        if (options.fallback) {\n          items = [FALLBACK];\n          mapped[0] = createRoot(disposer => {\n            disposers[0] = disposer;\n            return options.fallback();\n          });\n          len = 1;\n        }\n      } else if (len === 0) {\n        mapped = new Array(newLen);\n        for (j = 0; j < newLen; j++) {\n          items[j] = newItems[j];\n          mapped[j] = createRoot(mapper);\n        }\n        len = newLen;\n      } else {\n        temp = new Array(newLen);\n        tempdisposers = new Array(newLen);\n        indexes && (tempIndexes = new Array(newLen));\n        for (\n          start = 0, end = Math.min(len, newLen);\n          start < end && items[start] === newItems[start];\n          start++\n        );\n        for (\n          end = len - 1, newEnd = newLen - 1;\n          end >= start && newEnd >= start && items[end] === newItems[newEnd];\n          end--, newEnd--\n        ) {\n          temp[newEnd] = mapped[end];\n          tempdisposers[newEnd] = disposers[end];\n          indexes && (tempIndexes[newEnd] = indexes[end]);\n        }\n        newIndices = new Map();\n        newIndicesNext = new Array(newEnd + 1);\n        for (j = newEnd; j >= start; j--) {\n          item = newItems[j];\n          i = newIndices.get(item);\n          newIndicesNext[j] = i === undefined ? -1 : i;\n          newIndices.set(item, j);\n        }\n        for (i = start; i <= end; i++) {\n          item = items[i];\n          j = newIndices.get(item);\n          if (j !== undefined && j !== -1) {\n            temp[j] = mapped[i];\n            tempdisposers[j] = disposers[i];\n            indexes && (tempIndexes[j] = indexes[i]);\n            j = newIndicesNext[j];\n            newIndices.set(item, j);\n          } else disposers[i]();\n        }\n        for (j = start; j < newLen; j++) {\n          if (j in temp) {\n            mapped[j] = temp[j];\n            disposers[j] = tempdisposers[j];\n            if (indexes) {\n              indexes[j] = tempIndexes[j];\n              indexes[j](j);\n            }\n          } else mapped[j] = createRoot(mapper);\n        }\n        mapped = mapped.slice(0, (len = newLen));\n        items = newItems.slice(0);\n      }\n      return mapped;\n    });\n    function mapper(disposer) {\n      disposers[j] = disposer;\n      if (indexes) {\n        const [s, set] = createSignal(j);\n        indexes[j] = set;\n        return mapFn(newItems[j], s);\n      }\n      return mapFn(newItems[j]);\n    }\n  };\n}\nfunction indexArray(list, mapFn, options = {}) {\n  let items = [],\n    mapped = [],\n    disposers = [],\n    signals = [],\n    len = 0,\n    i;\n  onCleanup(() => dispose(disposers));\n  return () => {\n    const newItems = list() || [],\n      newLen = newItems.length;\n    newItems[$TRACK];\n    return untrack(() => {\n      if (newLen === 0) {\n        if (len !== 0) {\n          dispose(disposers);\n          disposers = [];\n          items = [];\n          mapped = [];\n          len = 0;\n          signals = [];\n        }\n        if (options.fallback) {\n          items = [FALLBACK];\n          mapped[0] = createRoot(disposer => {\n            disposers[0] = disposer;\n            return options.fallback();\n          });\n          len = 1;\n        }\n        return mapped;\n      }\n      if (items[0] === FALLBACK) {\n        disposers[0]();\n        disposers = [];\n        items = [];\n        mapped = [];\n        len = 0;\n      }\n      for (i = 0; i < newLen; i++) {\n        if (i < items.length && items[i] !== newItems[i]) {\n          signals[i](() => newItems[i]);\n        } else if (i >= items.length) {\n          mapped[i] = createRoot(mapper);\n        }\n      }\n      for (; i < items.length; i++) {\n        disposers[i]();\n      }\n      len = signals.length = disposers.length = newLen;\n      items = newItems.slice(0);\n      return (mapped = mapped.slice(0, len));\n    });\n    function mapper(disposer) {\n      disposers[i] = disposer;\n      const [s, set] = createSignal(newItems[i]);\n      signals[i] = set;\n      return mapFn(s, i);\n    }\n  };\n}\n\nlet hydrationEnabled = false;\nfunction enableHydration() {\n  hydrationEnabled = true;\n}\nfunction createComponent(Comp, props) {\n  if (hydrationEnabled) {\n    if (sharedConfig.context) {\n      const c = sharedConfig.context;\n      setHydrateContext(nextHydrateContext());\n      const r = untrack(() => Comp(props || {}));\n      setHydrateContext(c);\n      return r;\n    }\n  }\n  return untrack(() => Comp(props || {}));\n}\nfunction trueFn() {\n  return true;\n}\nconst propTraps = {\n  get(_, property, receiver) {\n    if (property === $PROXY) return receiver;\n    return _.get(property);\n  },\n  has(_, property) {\n    if (property === $PROXY) return true;\n    return _.has(property);\n  },\n  set: trueFn,\n  deleteProperty: trueFn,\n  getOwnPropertyDescriptor(_, property) {\n    return {\n      configurable: true,\n      enumerable: true,\n      get() {\n        return _.get(property);\n      },\n      set: trueFn,\n      deleteProperty: trueFn\n    };\n  },\n  ownKeys(_) {\n    return _.keys();\n  }\n};\nfunction resolveSource(s) {\n  return !(s = typeof s === \"function\" ? s() : s) ? {} : s;\n}\nfunction resolveSources() {\n  for (let i = 0, length = this.length; i < length; ++i) {\n    const v = this[i]();\n    if (v !== undefined) return v;\n  }\n}\nfunction mergeProps(...sources) {\n  let proxy = false;\n  for (let i = 0; i < sources.length; i++) {\n    const s = sources[i];\n    proxy = proxy || (!!s && $PROXY in s);\n    sources[i] = typeof s === \"function\" ? ((proxy = true), createMemo(s)) : s;\n  }\n  if (proxy) {\n    return new Proxy(\n      {\n        get(property) {\n          for (let i = sources.length - 1; i >= 0; i--) {\n            const v = resolveSource(sources[i])[property];\n            if (v !== undefined) return v;\n          }\n        },\n        has(property) {\n          for (let i = sources.length - 1; i >= 0; i--) {\n            if (property in resolveSource(sources[i])) return true;\n          }\n          return false;\n        },\n        keys() {\n          const keys = [];\n          for (let i = 0; i < sources.length; i++)\n            keys.push(...Object.keys(resolveSource(sources[i])));\n          return [...new Set(keys)];\n        }\n      },\n      propTraps\n    );\n  }\n  const sourcesMap = {};\n  const defined = Object.create(null);\n  for (let i = sources.length - 1; i >= 0; i--) {\n    const source = sources[i];\n    if (!source) continue;\n    const sourceKeys = Object.getOwnPropertyNames(source);\n    for (let i = sourceKeys.length - 1; i >= 0; i--) {\n      const key = sourceKeys[i];\n      if (key === \"__proto__\" || key === \"constructor\") continue;\n      const desc = Object.getOwnPropertyDescriptor(source, key);\n      if (!defined[key]) {\n        defined[key] = desc.get\n          ? {\n              enumerable: true,\n              configurable: true,\n              get: resolveSources.bind((sourcesMap[key] = [desc.get.bind(source)]))\n            }\n          : desc.value !== undefined\n          ? desc\n          : undefined;\n      } else {\n        const sources = sourcesMap[key];\n        if (sources) {\n          if (desc.get) sources.push(desc.get.bind(source));\n          else if (desc.value !== undefined) sources.push(() => desc.value);\n        }\n      }\n    }\n  }\n  const target = {};\n  const definedKeys = Object.keys(defined);\n  for (let i = definedKeys.length - 1; i >= 0; i--) {\n    const key = definedKeys[i],\n      desc = defined[key];\n    if (desc && desc.get) Object.defineProperty(target, key, desc);\n    else target[key] = desc ? desc.value : undefined;\n  }\n  return target;\n}\nfunction splitProps(props, ...keys) {\n  if ($PROXY in props) {\n    const blocked = new Set(keys.length > 1 ? keys.flat() : keys[0]);\n    const res = keys.map(k => {\n      return new Proxy(\n        {\n          get(property) {\n            return k.includes(property) ? props[property] : undefined;\n          },\n          has(property) {\n            return k.includes(property) && property in props;\n          },\n          keys() {\n            return k.filter(property => property in props);\n          }\n        },\n        propTraps\n      );\n    });\n    res.push(\n      new Proxy(\n        {\n          get(property) {\n            return blocked.has(property) ? undefined : props[property];\n          },\n          has(property) {\n            return blocked.has(property) ? false : property in props;\n          },\n          keys() {\n            return Object.keys(props).filter(k => !blocked.has(k));\n          }\n        },\n        propTraps\n      )\n    );\n    return res;\n  }\n  const otherObject = {};\n  const objects = keys.map(() => ({}));\n  for (const propName of Object.getOwnPropertyNames(props)) {\n    const desc = Object.getOwnPropertyDescriptor(props, propName);\n    const isDefaultDesc =\n      !desc.get && !desc.set && desc.enumerable && desc.writable && desc.configurable;\n    let blocked = false;\n    let objectIndex = 0;\n    for (const k of keys) {\n      if (k.includes(propName)) {\n        blocked = true;\n        isDefaultDesc\n          ? (objects[objectIndex][propName] = desc.value)\n          : Object.defineProperty(objects[objectIndex], propName, desc);\n      }\n      ++objectIndex;\n    }\n    if (!blocked) {\n      isDefaultDesc\n        ? (otherObject[propName] = desc.value)\n        : Object.defineProperty(otherObject, propName, desc);\n    }\n  }\n  return [...objects, otherObject];\n}\nfunction lazy(fn) {\n  let comp;\n  let p;\n  const wrap = props => {\n    const ctx = sharedConfig.context;\n    if (ctx) {\n      const [s, set] = createSignal();\n      sharedConfig.count || (sharedConfig.count = 0);\n      sharedConfig.count++;\n      (p || (p = fn())).then(mod => {\n        !sharedConfig.done && setHydrateContext(ctx);\n        sharedConfig.count--;\n        set(() => mod.default);\n        setHydrateContext();\n      });\n      comp = s;\n    } else if (!comp) {\n      const [s] = createResource(() => (p || (p = fn())).then(mod => mod.default));\n      comp = s;\n    }\n    let Comp;\n    return createMemo(() =>\n      (Comp = comp())\n        ? untrack(() => {\n            if (false);\n            if (!ctx || sharedConfig.done) return Comp(props);\n            const c = sharedConfig.context;\n            setHydrateContext(ctx);\n            const r = Comp(props);\n            setHydrateContext(c);\n            return r;\n          })\n        : \"\"\n    );\n  };\n  wrap.preload = () => p || ((p = fn()).then(mod => (comp = () => mod.default)), p);\n  return wrap;\n}\nlet counter = 0;\nfunction createUniqueId() {\n  const ctx = sharedConfig.context;\n  return ctx ? sharedConfig.getNextContextId() : `cl-${counter++}`;\n}\n\nconst narrowedError = name => `Stale read from <${name}>.`;\nfunction For(props) {\n  const fallback = \"fallback\" in props && {\n    fallback: () => props.fallback\n  };\n  return createMemo(mapArray(() => props.each, props.children, fallback || undefined));\n}\nfunction Index(props) {\n  const fallback = \"fallback\" in props && {\n    fallback: () => props.fallback\n  };\n  return createMemo(indexArray(() => props.each, props.children, fallback || undefined));\n}\nfunction Show(props) {\n  const keyed = props.keyed;\n  const condition = createMemo(() => props.when, undefined, {\n    equals: (a, b) => (keyed ? a === b : !a === !b)\n  });\n  return createMemo(\n    () => {\n      const c = condition();\n      if (c) {\n        const child = props.children;\n        const fn = typeof child === \"function\" && child.length > 0;\n        return fn\n          ? untrack(() =>\n              child(\n                keyed\n                  ? c\n                  : () => {\n                      if (!untrack(condition)) throw narrowedError(\"Show\");\n                      return props.when;\n                    }\n              )\n            )\n          : child;\n      }\n      return props.fallback;\n    },\n    undefined,\n    undefined\n  );\n}\nfunction Switch(props) {\n  let keyed = false;\n  const equals = (a, b) => (keyed ? a[1] === b[1] : !a[1] === !b[1]) && a[2] === b[2];\n  const conditions = children(() => props.children),\n    evalConditions = createMemo(\n      () => {\n        let conds = conditions();\n        if (!Array.isArray(conds)) conds = [conds];\n        for (let i = 0; i < conds.length; i++) {\n          const c = conds[i].when;\n          if (c) {\n            keyed = !!conds[i].keyed;\n            return [i, c, conds[i]];\n          }\n        }\n        return [-1];\n      },\n      undefined,\n      {\n        equals\n      }\n    );\n  return createMemo(\n    () => {\n      const [index, when, cond] = evalConditions();\n      if (index < 0) return props.fallback;\n      const c = cond.children;\n      const fn = typeof c === \"function\" && c.length > 0;\n      return fn\n        ? untrack(() =>\n            c(\n              keyed\n                ? when\n                : () => {\n                    if (untrack(evalConditions)[0] !== index) throw narrowedError(\"Match\");\n                    return cond.when;\n                  }\n            )\n          )\n        : c;\n    },\n    undefined,\n    undefined\n  );\n}\nfunction Match(props) {\n  return props;\n}\nlet Errors;\nfunction resetErrorBoundaries() {\n  Errors && [...Errors].forEach(fn => fn());\n}\nfunction ErrorBoundary(props) {\n  let err;\n  if (sharedConfig.context && sharedConfig.load)\n    err = sharedConfig.load(sharedConfig.getContextId());\n  const [errored, setErrored] = createSignal(err, undefined);\n  Errors || (Errors = new Set());\n  Errors.add(setErrored);\n  onCleanup(() => Errors.delete(setErrored));\n  return createMemo(\n    () => {\n      let e;\n      if ((e = errored())) {\n        const f = props.fallback;\n        return typeof f === \"function\" && f.length ? untrack(() => f(e, () => setErrored())) : f;\n      }\n      return catchError(() => props.children, setErrored);\n    },\n    undefined,\n    undefined\n  );\n}\n\nconst suspenseListEquals = (a, b) =>\n  a.showContent === b.showContent && a.showFallback === b.showFallback;\nconst SuspenseListContext = /* #__PURE__ */ createContext();\nfunction SuspenseList(props) {\n  let [wrapper, setWrapper] = createSignal(() => ({\n      inFallback: false\n    })),\n    show;\n  const listContext = useContext(SuspenseListContext);\n  const [registry, setRegistry] = createSignal([]);\n  if (listContext) {\n    show = listContext.register(createMemo(() => wrapper()().inFallback));\n  }\n  const resolved = createMemo(\n    prev => {\n      const reveal = props.revealOrder,\n        tail = props.tail,\n        { showContent = true, showFallback = true } = show ? show() : {},\n        reg = registry(),\n        reverse = reveal === \"backwards\";\n      if (reveal === \"together\") {\n        const all = reg.every(inFallback => !inFallback());\n        const res = reg.map(() => ({\n          showContent: all && showContent,\n          showFallback\n        }));\n        res.inFallback = !all;\n        return res;\n      }\n      let stop = false;\n      let inFallback = prev.inFallback;\n      const res = [];\n      for (let i = 0, len = reg.length; i < len; i++) {\n        const n = reverse ? len - i - 1 : i,\n          s = reg[n]();\n        if (!stop && !s) {\n          res[n] = {\n            showContent,\n            showFallback\n          };\n        } else {\n          const next = !stop;\n          if (next) inFallback = true;\n          res[n] = {\n            showContent: next,\n            showFallback: !tail || (next && tail === \"collapsed\") ? showFallback : false\n          };\n          stop = true;\n        }\n      }\n      if (!stop) inFallback = false;\n      res.inFallback = inFallback;\n      return res;\n    },\n    {\n      inFallback: false\n    }\n  );\n  setWrapper(() => resolved);\n  return createComponent(SuspenseListContext.Provider, {\n    value: {\n      register: inFallback => {\n        let index;\n        setRegistry(registry => {\n          index = registry.length;\n          return [...registry, inFallback];\n        });\n        return createMemo(() => resolved()[index], undefined, {\n          equals: suspenseListEquals\n        });\n      }\n    },\n    get children() {\n      return props.children;\n    }\n  });\n}\nfunction Suspense(props) {\n  let counter = 0,\n    show,\n    ctx,\n    p,\n    flicker,\n    error;\n  const [inFallback, setFallback] = createSignal(false),\n    SuspenseContext = getSuspenseContext(),\n    store = {\n      increment: () => {\n        if (++counter === 1) setFallback(true);\n      },\n      decrement: () => {\n        if (--counter === 0) setFallback(false);\n      },\n      inFallback,\n      effects: [],\n      resolved: false\n    },\n    owner = getOwner();\n  if (sharedConfig.context && sharedConfig.load) {\n    const key = sharedConfig.getContextId();\n    let ref = sharedConfig.load(key);\n    if (ref) {\n      if (typeof ref !== \"object\" || ref.status !== \"success\") p = ref;\n      else sharedConfig.gather(key);\n    }\n    if (p && p !== \"$$f\") {\n      const [s, set] = createSignal(undefined, {\n        equals: false\n      });\n      flicker = s;\n      p.then(\n        () => {\n          if (sharedConfig.done) return set();\n          sharedConfig.gather(key);\n          setHydrateContext(ctx);\n          set();\n          setHydrateContext();\n        },\n        err => {\n          error = err;\n          set();\n        }\n      );\n    }\n  }\n  const listContext = useContext(SuspenseListContext);\n  if (listContext) show = listContext.register(store.inFallback);\n  let dispose;\n  onCleanup(() => dispose && dispose());\n  return createComponent(SuspenseContext.Provider, {\n    value: store,\n    get children() {\n      return createMemo(() => {\n        if (error) throw error;\n        ctx = sharedConfig.context;\n        if (flicker) {\n          flicker();\n          return (flicker = undefined);\n        }\n        if (ctx && p === \"$$f\") setHydrateContext();\n        const rendered = createMemo(() => props.children);\n        return createMemo(prev => {\n          const inFallback = store.inFallback(),\n            { showContent = true, showFallback = true } = show ? show() : {};\n          if ((!inFallback || (p && p !== \"$$f\")) && showContent) {\n            store.resolved = true;\n            dispose && dispose();\n            dispose = ctx = p = undefined;\n            resumeEffects(store.effects);\n            return rendered();\n          }\n          if (!showFallback) return;\n          if (dispose) return prev;\n          return createRoot(disposer => {\n            dispose = disposer;\n            if (ctx) {\n              setHydrateContext({\n                id: ctx.id + \"F\",\n                count: 0\n              });\n              ctx = undefined;\n            }\n            return props.fallback;\n          }, owner);\n        });\n      });\n    }\n  });\n}\n\nconst DEV = undefined;\n\nexport {\n  $DEVCOMP,\n  $PROXY,\n  $TRACK,\n  DEV,\n  ErrorBoundary,\n  For,\n  Index,\n  Match,\n  Show,\n  Suspense,\n  SuspenseList,\n  Switch,\n  batch,\n  cancelCallback,\n  catchError,\n  children,\n  createComponent,\n  createComputed,\n  createContext,\n  createDeferred,\n  createEffect,\n  createMemo,\n  createReaction,\n  createRenderEffect,\n  createResource,\n  createRoot,\n  createSelector,\n  createSignal,\n  createUniqueId,\n  enableExternalSource,\n  enableHydration,\n  enableScheduling,\n  equalFn,\n  from,\n  getListener,\n  getOwner,\n  indexArray,\n  lazy,\n  mapArray,\n  mergeProps,\n  observable,\n  on,\n  onCleanup,\n  onError,\n  onMount,\n  requestCallback,\n  resetErrorBoundaries,\n  runWithOwner,\n  sharedConfig,\n  splitProps,\n  startTransition,\n  untrack,\n  useContext,\n  useTransition\n};\n", "import {\n  createRoot,\n  createRenderEffect,\n  untrack,\n  sharedConfig,\n  enableHydration,\n  getOwner,\n  createEffect,\n  runWithOwner,\n  createMemo,\n  createSignal,\n  onCleanup,\n  splitProps\n} from \"solid-js\";\nexport {\n  ErrorBoundary,\n  For,\n  Index,\n  Match,\n  Show,\n  Suspense,\n  SuspenseList,\n  Switch,\n  createComponent,\n  createRenderEffect as effect,\n  getOwner,\n  createMemo as memo,\n  mergeProps,\n  untrack\n} from \"solid-js\";\n\nconst booleans = [\n  \"allowfullscreen\",\n  \"async\",\n  \"autofocus\",\n  \"autoplay\",\n  \"checked\",\n  \"controls\",\n  \"default\",\n  \"disabled\",\n  \"formnovalidate\",\n  \"hidden\",\n  \"indeterminate\",\n  \"inert\",\n  \"ismap\",\n  \"loop\",\n  \"multiple\",\n  \"muted\",\n  \"nomodule\",\n  \"novalidate\",\n  \"open\",\n  \"playsinline\",\n  \"readonly\",\n  \"required\",\n  \"reversed\",\n  \"seamless\",\n  \"selected\"\n];\nconst Properties = /*#__PURE__*/ new Set([\n  \"className\",\n  \"value\",\n  \"readOnly\",\n  \"formNoValidate\",\n  \"isMap\",\n  \"noModule\",\n  \"playsInline\",\n  ...booleans\n]);\nconst ChildProperties = /*#__PURE__*/ new Set([\n  \"innerHTML\",\n  \"textContent\",\n  \"innerText\",\n  \"children\"\n]);\nconst Aliases = /*#__PURE__*/ Object.assign(Object.create(null), {\n  className: \"class\",\n  htmlFor: \"for\"\n});\nconst PropAliases = /*#__PURE__*/ Object.assign(Object.create(null), {\n  class: \"className\",\n  formnovalidate: {\n    $: \"formNoValidate\",\n    BUTTON: 1,\n    INPUT: 1\n  },\n  ismap: {\n    $: \"isMap\",\n    IMG: 1\n  },\n  nomodule: {\n    $: \"noModule\",\n    SCRIPT: 1\n  },\n  playsinline: {\n    $: \"playsInline\",\n    VIDEO: 1\n  },\n  readonly: {\n    $: \"readOnly\",\n    INPUT: 1,\n    TEXTAREA: 1\n  }\n});\nfunction getPropAlias(prop, tagName) {\n  const a = PropAliases[prop];\n  return typeof a === \"object\" ? (a[tagName] ? a[\"$\"] : undefined) : a;\n}\nconst DelegatedEvents = /*#__PURE__*/ new Set([\n  \"beforeinput\",\n  \"click\",\n  \"dblclick\",\n  \"contextmenu\",\n  \"focusin\",\n  \"focusout\",\n  \"input\",\n  \"keydown\",\n  \"keyup\",\n  \"mousedown\",\n  \"mousemove\",\n  \"mouseout\",\n  \"mouseover\",\n  \"mouseup\",\n  \"pointerdown\",\n  \"pointermove\",\n  \"pointerout\",\n  \"pointerover\",\n  \"pointerup\",\n  \"touchend\",\n  \"touchmove\",\n  \"touchstart\"\n]);\nconst SVGElements = /*#__PURE__*/ new Set([\n  \"altGlyph\",\n  \"altGlyphDef\",\n  \"altGlyphItem\",\n  \"animate\",\n  \"animateColor\",\n  \"animateMotion\",\n  \"animateTransform\",\n  \"circle\",\n  \"clipPath\",\n  \"color-profile\",\n  \"cursor\",\n  \"defs\",\n  \"desc\",\n  \"ellipse\",\n  \"feBlend\",\n  \"feColorMatrix\",\n  \"feComponentTransfer\",\n  \"feComposite\",\n  \"feConvolveMatrix\",\n  \"feDiffuseLighting\",\n  \"feDisplacementMap\",\n  \"feDistantLight\",\n  \"feDropShadow\",\n  \"feFlood\",\n  \"feFuncA\",\n  \"feFuncB\",\n  \"feFuncG\",\n  \"feFuncR\",\n  \"feGaussianBlur\",\n  \"feImage\",\n  \"feMerge\",\n  \"feMergeNode\",\n  \"feMorphology\",\n  \"feOffset\",\n  \"fePointLight\",\n  \"feSpecularLighting\",\n  \"feSpotLight\",\n  \"feTile\",\n  \"feTurbulence\",\n  \"filter\",\n  \"font\",\n  \"font-face\",\n  \"font-face-format\",\n  \"font-face-name\",\n  \"font-face-src\",\n  \"font-face-uri\",\n  \"foreignObject\",\n  \"g\",\n  \"glyph\",\n  \"glyphRef\",\n  \"hkern\",\n  \"image\",\n  \"line\",\n  \"linearGradient\",\n  \"marker\",\n  \"mask\",\n  \"metadata\",\n  \"missing-glyph\",\n  \"mpath\",\n  \"path\",\n  \"pattern\",\n  \"polygon\",\n  \"polyline\",\n  \"radialGradient\",\n  \"rect\",\n  \"set\",\n  \"stop\",\n  \"svg\",\n  \"switch\",\n  \"symbol\",\n  \"text\",\n  \"textPath\",\n  \"tref\",\n  \"tspan\",\n  \"use\",\n  \"view\",\n  \"vkern\"\n]);\nconst SVGNamespace = {\n  xlink: \"http://www.w3.org/1999/xlink\",\n  xml: \"http://www.w3.org/XML/1998/namespace\"\n};\nconst DOMElements = /*#__PURE__*/ new Set([\n  \"html\",\n  \"base\",\n  \"head\",\n  \"link\",\n  \"meta\",\n  \"style\",\n  \"title\",\n  \"body\",\n  \"address\",\n  \"article\",\n  \"aside\",\n  \"footer\",\n  \"header\",\n  \"main\",\n  \"nav\",\n  \"section\",\n  \"body\",\n  \"blockquote\",\n  \"dd\",\n  \"div\",\n  \"dl\",\n  \"dt\",\n  \"figcaption\",\n  \"figure\",\n  \"hr\",\n  \"li\",\n  \"ol\",\n  \"p\",\n  \"pre\",\n  \"ul\",\n  \"a\",\n  \"abbr\",\n  \"b\",\n  \"bdi\",\n  \"bdo\",\n  \"br\",\n  \"cite\",\n  \"code\",\n  \"data\",\n  \"dfn\",\n  \"em\",\n  \"i\",\n  \"kbd\",\n  \"mark\",\n  \"q\",\n  \"rp\",\n  \"rt\",\n  \"ruby\",\n  \"s\",\n  \"samp\",\n  \"small\",\n  \"span\",\n  \"strong\",\n  \"sub\",\n  \"sup\",\n  \"time\",\n  \"u\",\n  \"var\",\n  \"wbr\",\n  \"area\",\n  \"audio\",\n  \"img\",\n  \"map\",\n  \"track\",\n  \"video\",\n  \"embed\",\n  \"iframe\",\n  \"object\",\n  \"param\",\n  \"picture\",\n  \"portal\",\n  \"source\",\n  \"svg\",\n  \"math\",\n  \"canvas\",\n  \"noscript\",\n  \"script\",\n  \"del\",\n  \"ins\",\n  \"caption\",\n  \"col\",\n  \"colgroup\",\n  \"table\",\n  \"tbody\",\n  \"td\",\n  \"tfoot\",\n  \"th\",\n  \"thead\",\n  \"tr\",\n  \"button\",\n  \"datalist\",\n  \"fieldset\",\n  \"form\",\n  \"input\",\n  \"label\",\n  \"legend\",\n  \"meter\",\n  \"optgroup\",\n  \"option\",\n  \"output\",\n  \"progress\",\n  \"select\",\n  \"textarea\",\n  \"details\",\n  \"dialog\",\n  \"menu\",\n  \"summary\",\n  \"details\",\n  \"slot\",\n  \"template\",\n  \"acronym\",\n  \"applet\",\n  \"basefont\",\n  \"bgsound\",\n  \"big\",\n  \"blink\",\n  \"center\",\n  \"content\",\n  \"dir\",\n  \"font\",\n  \"frame\",\n  \"frameset\",\n  \"hgroup\",\n  \"image\",\n  \"keygen\",\n  \"marquee\",\n  \"menuitem\",\n  \"nobr\",\n  \"noembed\",\n  \"noframes\",\n  \"plaintext\",\n  \"rb\",\n  \"rtc\",\n  \"shadow\",\n  \"spacer\",\n  \"strike\",\n  \"tt\",\n  \"xmp\",\n  \"a\",\n  \"abbr\",\n  \"acronym\",\n  \"address\",\n  \"applet\",\n  \"area\",\n  \"article\",\n  \"aside\",\n  \"audio\",\n  \"b\",\n  \"base\",\n  \"basefont\",\n  \"bdi\",\n  \"bdo\",\n  \"bgsound\",\n  \"big\",\n  \"blink\",\n  \"blockquote\",\n  \"body\",\n  \"br\",\n  \"button\",\n  \"canvas\",\n  \"caption\",\n  \"center\",\n  \"cite\",\n  \"code\",\n  \"col\",\n  \"colgroup\",\n  \"content\",\n  \"data\",\n  \"datalist\",\n  \"dd\",\n  \"del\",\n  \"details\",\n  \"dfn\",\n  \"dialog\",\n  \"dir\",\n  \"div\",\n  \"dl\",\n  \"dt\",\n  \"em\",\n  \"embed\",\n  \"fieldset\",\n  \"figcaption\",\n  \"figure\",\n  \"font\",\n  \"footer\",\n  \"form\",\n  \"frame\",\n  \"frameset\",\n  \"head\",\n  \"header\",\n  \"hgroup\",\n  \"hr\",\n  \"html\",\n  \"i\",\n  \"iframe\",\n  \"image\",\n  \"img\",\n  \"input\",\n  \"ins\",\n  \"kbd\",\n  \"keygen\",\n  \"label\",\n  \"legend\",\n  \"li\",\n  \"link\",\n  \"main\",\n  \"map\",\n  \"mark\",\n  \"marquee\",\n  \"menu\",\n  \"menuitem\",\n  \"meta\",\n  \"meter\",\n  \"nav\",\n  \"nobr\",\n  \"noembed\",\n  \"noframes\",\n  \"noscript\",\n  \"object\",\n  \"ol\",\n  \"optgroup\",\n  \"option\",\n  \"output\",\n  \"p\",\n  \"param\",\n  \"picture\",\n  \"plaintext\",\n  \"portal\",\n  \"pre\",\n  \"progress\",\n  \"q\",\n  \"rb\",\n  \"rp\",\n  \"rt\",\n  \"rtc\",\n  \"ruby\",\n  \"s\",\n  \"samp\",\n  \"script\",\n  \"section\",\n  \"select\",\n  \"shadow\",\n  \"slot\",\n  \"small\",\n  \"source\",\n  \"spacer\",\n  \"span\",\n  \"strike\",\n  \"strong\",\n  \"style\",\n  \"sub\",\n  \"summary\",\n  \"sup\",\n  \"table\",\n  \"tbody\",\n  \"td\",\n  \"template\",\n  \"textarea\",\n  \"tfoot\",\n  \"th\",\n  \"thead\",\n  \"time\",\n  \"title\",\n  \"tr\",\n  \"track\",\n  \"tt\",\n  \"u\",\n  \"ul\",\n  \"var\",\n  \"video\",\n  \"wbr\",\n  \"xmp\",\n  \"input\",\n  \"h1\",\n  \"h2\",\n  \"h3\",\n  \"h4\",\n  \"h5\",\n  \"h6\"\n]);\n\nfunction reconcileArrays(parentNode, a, b) {\n  let bLength = b.length,\n    aEnd = a.length,\n    bEnd = bLength,\n    aStart = 0,\n    bStart = 0,\n    after = a[aEnd - 1].nextSibling,\n    map = null;\n  while (aStart < aEnd || bStart < bEnd) {\n    if (a[aStart] === b[bStart]) {\n      aStart++;\n      bStart++;\n      continue;\n    }\n    while (a[aEnd - 1] === b[bEnd - 1]) {\n      aEnd--;\n      bEnd--;\n    }\n    if (aEnd === aStart) {\n      const node = bEnd < bLength ? (bStart ? b[bStart - 1].nextSibling : b[bEnd - bStart]) : after;\n      while (bStart < bEnd) parentNode.insertBefore(b[bStart++], node);\n    } else if (bEnd === bStart) {\n      while (aStart < aEnd) {\n        if (!map || !map.has(a[aStart])) a[aStart].remove();\n        aStart++;\n      }\n    } else if (a[aStart] === b[bEnd - 1] && b[bStart] === a[aEnd - 1]) {\n      const node = a[--aEnd].nextSibling;\n      parentNode.insertBefore(b[bStart++], a[aStart++].nextSibling);\n      parentNode.insertBefore(b[--bEnd], node);\n      a[aEnd] = b[bEnd];\n    } else {\n      if (!map) {\n        map = new Map();\n        let i = bStart;\n        while (i < bEnd) map.set(b[i], i++);\n      }\n      const index = map.get(a[aStart]);\n      if (index != null) {\n        if (bStart < index && index < bEnd) {\n          let i = aStart,\n            sequence = 1,\n            t;\n          while (++i < aEnd && i < bEnd) {\n            if ((t = map.get(a[i])) == null || t !== index + sequence) break;\n            sequence++;\n          }\n          if (sequence > index - bStart) {\n            const node = a[aStart];\n            while (bStart < index) parentNode.insertBefore(b[bStart++], node);\n          } else parentNode.replaceChild(b[bStart++], a[aStart++]);\n        } else aStart++;\n      } else a[aStart++].remove();\n    }\n  }\n}\n\nconst $$EVENTS = \"_$DX_DELEGATE\";\nfunction render(code, element, init, options = {}) {\n  let disposer;\n  createRoot(dispose => {\n    disposer = dispose;\n    element === document\n      ? code()\n      : insert(element, code(), element.firstChild ? null : undefined, init);\n  }, options.owner);\n  return () => {\n    disposer();\n    element.textContent = \"\";\n  };\n}\nfunction template(html, isCE, isSVG) {\n  let node;\n  const create = () => {\n    const t = document.createElement(\"template\");\n    t.innerHTML = html;\n    return isSVG ? t.content.firstChild.firstChild : t.content.firstChild;\n  };\n  const fn = isCE\n    ? () => untrack(() => document.importNode(node || (node = create()), true))\n    : () => (node || (node = create())).cloneNode(true);\n  fn.cloneNode = fn;\n  return fn;\n}\nfunction delegateEvents(eventNames, document = window.document) {\n  const e = document[$$EVENTS] || (document[$$EVENTS] = new Set());\n  for (let i = 0, l = eventNames.length; i < l; i++) {\n    const name = eventNames[i];\n    if (!e.has(name)) {\n      e.add(name);\n      document.addEventListener(name, eventHandler);\n    }\n  }\n}\nfunction clearDelegatedEvents(document = window.document) {\n  if (document[$$EVENTS]) {\n    for (let name of document[$$EVENTS].keys()) document.removeEventListener(name, eventHandler);\n    delete document[$$EVENTS];\n  }\n}\nfunction setProperty(node, name, value) {\n  if (isHydrating(node)) return;\n  node[name] = value;\n}\nfunction setAttribute(node, name, value) {\n  if (isHydrating(node)) return;\n  if (value == null) node.removeAttribute(name);\n  else node.setAttribute(name, value);\n}\nfunction setAttributeNS(node, namespace, name, value) {\n  if (isHydrating(node)) return;\n  if (value == null) node.removeAttributeNS(namespace, name);\n  else node.setAttributeNS(namespace, name, value);\n}\nfunction className(node, value) {\n  if (isHydrating(node)) return;\n  if (value == null) node.removeAttribute(\"class\");\n  else node.className = value;\n}\nfunction addEventListener(node, name, handler, delegate) {\n  if (delegate) {\n    if (Array.isArray(handler)) {\n      node[`$$${name}`] = handler[0];\n      node[`$$${name}Data`] = handler[1];\n    } else node[`$$${name}`] = handler;\n  } else if (Array.isArray(handler)) {\n    const handlerFn = handler[0];\n    node.addEventListener(name, (handler[0] = e => handlerFn.call(node, handler[1], e)));\n  } else node.addEventListener(name, handler);\n}\nfunction classList(node, value, prev = {}) {\n  const classKeys = Object.keys(value || {}),\n    prevKeys = Object.keys(prev);\n  let i, len;\n  for (i = 0, len = prevKeys.length; i < len; i++) {\n    const key = prevKeys[i];\n    if (!key || key === \"undefined\" || value[key]) continue;\n    toggleClassKey(node, key, false);\n    delete prev[key];\n  }\n  for (i = 0, len = classKeys.length; i < len; i++) {\n    const key = classKeys[i],\n      classValue = !!value[key];\n    if (!key || key === \"undefined\" || prev[key] === classValue || !classValue) continue;\n    toggleClassKey(node, key, true);\n    prev[key] = classValue;\n  }\n  return prev;\n}\nfunction style(node, value, prev) {\n  if (!value) return prev ? setAttribute(node, \"style\") : value;\n  const nodeStyle = node.style;\n  if (typeof value === \"string\") return (nodeStyle.cssText = value);\n  typeof prev === \"string\" && (nodeStyle.cssText = prev = undefined);\n  prev || (prev = {});\n  value || (value = {});\n  let v, s;\n  for (s in prev) {\n    value[s] == null && nodeStyle.removeProperty(s);\n    delete prev[s];\n  }\n  for (s in value) {\n    v = value[s];\n    if (v !== prev[s]) {\n      nodeStyle.setProperty(s, v);\n      prev[s] = v;\n    }\n  }\n  return prev;\n}\nfunction spread(node, props = {}, isSVG, skipChildren) {\n  const prevProps = {};\n  if (!skipChildren) {\n    createRenderEffect(\n      () => (prevProps.children = insertExpression(node, props.children, prevProps.children))\n    );\n  }\n  createRenderEffect(() => typeof props.ref === \"function\" && use(props.ref, node));\n  createRenderEffect(() => assign(node, props, isSVG, true, prevProps, true));\n  return prevProps;\n}\nfunction dynamicProperty(props, key) {\n  const src = props[key];\n  Object.defineProperty(props, key, {\n    get() {\n      return src();\n    },\n    enumerable: true\n  });\n  return props;\n}\nfunction use(fn, element, arg) {\n  return untrack(() => fn(element, arg));\n}\nfunction insert(parent, accessor, marker, initial) {\n  if (marker !== undefined && !initial) initial = [];\n  if (typeof accessor !== \"function\") return insertExpression(parent, accessor, initial, marker);\n  createRenderEffect(current => insertExpression(parent, accessor(), current, marker), initial);\n}\nfunction assign(node, props, isSVG, skipChildren, prevProps = {}, skipRef = false) {\n  props || (props = {});\n  for (const prop in prevProps) {\n    if (!(prop in props)) {\n      if (prop === \"children\") continue;\n      prevProps[prop] = assignProp(node, prop, null, prevProps[prop], isSVG, skipRef);\n    }\n  }\n  for (const prop in props) {\n    if (prop === \"children\") {\n      if (!skipChildren) insertExpression(node, props.children);\n      continue;\n    }\n    const value = props[prop];\n    prevProps[prop] = assignProp(node, prop, value, prevProps[prop], isSVG, skipRef);\n  }\n}\nfunction hydrate$1(code, element, options = {}) {\n  if (globalThis._$HY.done) return render(code, element, [...element.childNodes], options);\n  sharedConfig.completed = globalThis._$HY.completed;\n  sharedConfig.events = globalThis._$HY.events;\n  sharedConfig.load = id => globalThis._$HY.r[id];\n  sharedConfig.has = id => id in globalThis._$HY.r;\n  sharedConfig.gather = root => gatherHydratable(element, root);\n  sharedConfig.registry = new Map();\n  sharedConfig.context = {\n    id: options.renderId || \"\",\n    count: 0\n  };\n  try {\n    gatherHydratable(element, options.renderId);\n    return render(code, element, [...element.childNodes], options);\n  } finally {\n    sharedConfig.context = null;\n  }\n}\nfunction getNextElement(template) {\n  let node,\n    key,\n    hydrating = isHydrating();\n  if (!hydrating || !(node = sharedConfig.registry.get((key = getHydrationKey())))) {\n    return template();\n  }\n  if (sharedConfig.completed) sharedConfig.completed.add(node);\n  sharedConfig.registry.delete(key);\n  return node;\n}\nfunction getNextMatch(el, nodeName) {\n  while (el && el.localName !== nodeName) el = el.nextSibling;\n  return el;\n}\nfunction getNextMarker(start) {\n  let end = start,\n    count = 0,\n    current = [];\n  if (isHydrating(start)) {\n    while (end) {\n      if (end.nodeType === 8) {\n        const v = end.nodeValue;\n        if (v === \"$\") count++;\n        else if (v === \"/\") {\n          if (count === 0) return [end, current];\n          count--;\n        }\n      }\n      current.push(end);\n      end = end.nextSibling;\n    }\n  }\n  return [end, current];\n}\nfunction runHydrationEvents() {\n  if (sharedConfig.events && !sharedConfig.events.queued) {\n    queueMicrotask(() => {\n      const { completed, events } = sharedConfig;\n      events.queued = false;\n      while (events.length) {\n        const [el, e] = events[0];\n        if (!completed.has(el)) return;\n        events.shift();\n        eventHandler(e);\n      }\n      if (sharedConfig.done) {\n        sharedConfig.events = _$HY.events = null;\n        sharedConfig.completed = _$HY.completed = null;\n      }\n    });\n    sharedConfig.events.queued = true;\n  }\n}\nfunction isHydrating(node) {\n  return !!sharedConfig.context && !sharedConfig.done && (!node || node.isConnected);\n}\nfunction toPropertyName(name) {\n  return name.toLowerCase().replace(/-([a-z])/g, (_, w) => w.toUpperCase());\n}\nfunction toggleClassKey(node, key, value) {\n  const classNames = key.trim().split(/\\s+/);\n  for (let i = 0, nameLen = classNames.length; i < nameLen; i++)\n    node.classList.toggle(classNames[i], value);\n}\nfunction assignProp(node, prop, value, prev, isSVG, skipRef) {\n  let isCE, isProp, isChildProp, propAlias, forceProp;\n  if (prop === \"style\") return style(node, value, prev);\n  if (prop === \"classList\") return classList(node, value, prev);\n  if (value === prev) return prev;\n  if (prop === \"ref\") {\n    if (!skipRef) value(node);\n  } else if (prop.slice(0, 3) === \"on:\") {\n    const e = prop.slice(3);\n    prev && node.removeEventListener(e, prev);\n    value && node.addEventListener(e, value);\n  } else if (prop.slice(0, 10) === \"oncapture:\") {\n    const e = prop.slice(10);\n    prev && node.removeEventListener(e, prev, true);\n    value && node.addEventListener(e, value, true);\n  } else if (prop.slice(0, 2) === \"on\") {\n    const name = prop.slice(2).toLowerCase();\n    const delegate = DelegatedEvents.has(name);\n    if (!delegate && prev) {\n      const h = Array.isArray(prev) ? prev[0] : prev;\n      node.removeEventListener(name, h);\n    }\n    if (delegate || value) {\n      addEventListener(node, name, value, delegate);\n      delegate && delegateEvents([name]);\n    }\n  } else if (prop.slice(0, 5) === \"attr:\") {\n    setAttribute(node, prop.slice(5), value);\n  } else if (\n    (forceProp = prop.slice(0, 5) === \"prop:\") ||\n    (isChildProp = ChildProperties.has(prop)) ||\n    (!isSVG &&\n      ((propAlias = getPropAlias(prop, node.tagName)) || (isProp = Properties.has(prop)))) ||\n    (isCE = node.nodeName.includes(\"-\"))\n  ) {\n    if (forceProp) {\n      prop = prop.slice(5);\n      isProp = true;\n    } else if (isHydrating(node)) return value;\n    if (prop === \"class\" || prop === \"className\") className(node, value);\n    else if (isCE && !isProp && !isChildProp) node[toPropertyName(prop)] = value;\n    else node[propAlias || prop] = value;\n  } else {\n    const ns = isSVG && prop.indexOf(\":\") > -1 && SVGNamespace[prop.split(\":\")[0]];\n    if (ns) setAttributeNS(node, ns, prop, value);\n    else setAttribute(node, Aliases[prop] || prop, value);\n  }\n  return value;\n}\nfunction eventHandler(e) {\n  if (sharedConfig.registry && sharedConfig.events) {\n    if (sharedConfig.events.find(([el, ev]) => ev === e)) return;\n  }\n  const key = `$$${e.type}`;\n  let node = (e.composedPath && e.composedPath()[0]) || e.target;\n  if (e.target !== node) {\n    Object.defineProperty(e, \"target\", {\n      configurable: true,\n      value: node\n    });\n  }\n  Object.defineProperty(e, \"currentTarget\", {\n    configurable: true,\n    get() {\n      return node || document;\n    }\n  });\n  if (sharedConfig.registry && !sharedConfig.done) sharedConfig.done = _$HY.done = true;\n  while (node) {\n    const handler = node[key];\n    if (handler && !node.disabled) {\n      const data = node[`${key}Data`];\n      data !== undefined ? handler.call(node, data, e) : handler.call(node, e);\n      if (e.cancelBubble) return;\n    }\n    node = node._$host || node.parentNode || node.host;\n  }\n}\nfunction insertExpression(parent, value, current, marker, unwrapArray) {\n  const hydrating = isHydrating(parent);\n  if (hydrating) {\n    !current && (current = [...parent.childNodes]);\n    let cleaned = [];\n    for (let i = 0; i < current.length; i++) {\n      const node = current[i];\n      if (node.nodeType === 8 && node.data.slice(0, 2) === \"!$\") node.remove();\n      else cleaned.push(node);\n    }\n    current = cleaned;\n  }\n  while (typeof current === \"function\") current = current();\n  if (value === current) return current;\n  const t = typeof value,\n    multi = marker !== undefined;\n  parent = (multi && current[0] && current[0].parentNode) || parent;\n  if (t === \"string\" || t === \"number\") {\n    if (hydrating) return current;\n    if (t === \"number\") {\n      value = value.toString();\n      if (value === current) return current;\n    }\n    if (multi) {\n      let node = current[0];\n      if (node && node.nodeType === 3) {\n        node.data !== value && (node.data = value);\n      } else node = document.createTextNode(value);\n      current = cleanChildren(parent, current, marker, node);\n    } else {\n      if (current !== \"\" && typeof current === \"string\") {\n        current = parent.firstChild.data = value;\n      } else current = parent.textContent = value;\n    }\n  } else if (value == null || t === \"boolean\") {\n    if (hydrating) return current;\n    current = cleanChildren(parent, current, marker);\n  } else if (t === \"function\") {\n    createRenderEffect(() => {\n      let v = value();\n      while (typeof v === \"function\") v = v();\n      current = insertExpression(parent, v, current, marker);\n    });\n    return () => current;\n  } else if (Array.isArray(value)) {\n    const array = [];\n    const currentArray = current && Array.isArray(current);\n    if (normalizeIncomingArray(array, value, current, unwrapArray)) {\n      createRenderEffect(() => (current = insertExpression(parent, array, current, marker, true)));\n      return () => current;\n    }\n    if (hydrating) {\n      if (!array.length) return current;\n      if (marker === undefined) return (current = [...parent.childNodes]);\n      let node = array[0];\n      if (node.parentNode !== parent) return current;\n      const nodes = [node];\n      while ((node = node.nextSibling) !== marker) nodes.push(node);\n      return (current = nodes);\n    }\n    if (array.length === 0) {\n      current = cleanChildren(parent, current, marker);\n      if (multi) return current;\n    } else if (currentArray) {\n      if (current.length === 0) {\n        appendNodes(parent, array, marker);\n      } else reconcileArrays(parent, current, array);\n    } else {\n      current && cleanChildren(parent);\n      appendNodes(parent, array);\n    }\n    current = array;\n  } else if (value.nodeType) {\n    if (hydrating && value.parentNode) return (current = multi ? [value] : value);\n    if (Array.isArray(current)) {\n      if (multi) return (current = cleanChildren(parent, current, marker, value));\n      cleanChildren(parent, current, null, value);\n    } else if (current == null || current === \"\" || !parent.firstChild) {\n      parent.appendChild(value);\n    } else parent.replaceChild(value, parent.firstChild);\n    current = value;\n  } else;\n  return current;\n}\nfunction normalizeIncomingArray(normalized, array, current, unwrap) {\n  let dynamic = false;\n  for (let i = 0, len = array.length; i < len; i++) {\n    let item = array[i],\n      prev = current && current[normalized.length],\n      t;\n    if (item == null || item === true || item === false);\n    else if ((t = typeof item) === \"object\" && item.nodeType) {\n      normalized.push(item);\n    } else if (Array.isArray(item)) {\n      dynamic = normalizeIncomingArray(normalized, item, prev) || dynamic;\n    } else if (t === \"function\") {\n      if (unwrap) {\n        while (typeof item === \"function\") item = item();\n        dynamic =\n          normalizeIncomingArray(\n            normalized,\n            Array.isArray(item) ? item : [item],\n            Array.isArray(prev) ? prev : [prev]\n          ) || dynamic;\n      } else {\n        normalized.push(item);\n        dynamic = true;\n      }\n    } else {\n      const value = String(item);\n      if (prev && prev.nodeType === 3 && prev.data === value) normalized.push(prev);\n      else normalized.push(document.createTextNode(value));\n    }\n  }\n  return dynamic;\n}\nfunction appendNodes(parent, array, marker = null) {\n  for (let i = 0, len = array.length; i < len; i++) parent.insertBefore(array[i], marker);\n}\nfunction cleanChildren(parent, current, marker, replacement) {\n  if (marker === undefined) return (parent.textContent = \"\");\n  const node = replacement || document.createTextNode(\"\");\n  if (current.length) {\n    let inserted = false;\n    for (let i = current.length - 1; i >= 0; i--) {\n      const el = current[i];\n      if (node !== el) {\n        const isParent = el.parentNode === parent;\n        if (!inserted && !i)\n          isParent ? parent.replaceChild(node, el) : parent.insertBefore(node, marker);\n        else isParent && el.remove();\n      } else inserted = true;\n    }\n  } else parent.insertBefore(node, marker);\n  return [node];\n}\nfunction gatherHydratable(element, root) {\n  const templates = element.querySelectorAll(`*[data-hk]`);\n  for (let i = 0; i < templates.length; i++) {\n    const node = templates[i];\n    const key = node.getAttribute(\"data-hk\");\n    if ((!root || key.startsWith(root)) && !sharedConfig.registry.has(key))\n      sharedConfig.registry.set(key, node);\n  }\n}\nfunction getHydrationKey() {\n  return sharedConfig.getNextContextId();\n}\nfunction NoHydration(props) {\n  return sharedConfig.context ? undefined : props.children;\n}\nfunction Hydration(props) {\n  return props.children;\n}\nconst voidFn = () => undefined;\nconst RequestContext = Symbol();\nfunction innerHTML(parent, content) {\n  !sharedConfig.context && (parent.innerHTML = content);\n}\n\nfunction throwInBrowser(func) {\n  const err = new Error(`${func.name} is not supported in the browser, returning undefined`);\n  console.error(err);\n}\nfunction renderToString(fn, options) {\n  throwInBrowser(renderToString);\n}\nfunction renderToStringAsync(fn, options) {\n  throwInBrowser(renderToStringAsync);\n}\nfunction renderToStream(fn, options) {\n  throwInBrowser(renderToStream);\n}\nfunction ssr(template, ...nodes) {}\nfunction ssrElement(name, props, children, needsId) {}\nfunction ssrClassList(value) {}\nfunction ssrStyle(value) {}\nfunction ssrAttribute(key, value) {}\nfunction ssrHydrationKey() {}\nfunction resolveSSRNode(node) {}\nfunction escape(html) {}\nfunction ssrSpread(props, isSVG, skipChildren) {}\n\nconst isServer = false;\nconst isDev = false;\nconst SVG_NAMESPACE = \"http://www.w3.org/2000/svg\";\nfunction createElement(tagName, isSVG = false) {\n  return isSVG ? document.createElementNS(SVG_NAMESPACE, tagName) : document.createElement(tagName);\n}\nconst hydrate = (...args) => {\n  enableHydration();\n  return hydrate$1(...args);\n};\nfunction Portal(props) {\n  const { useShadow } = props,\n    marker = document.createTextNode(\"\"),\n    mount = () => props.mount || document.body,\n    owner = getOwner();\n  let content;\n  let hydrating = !!sharedConfig.context;\n  createEffect(\n    () => {\n      if (hydrating) getOwner().user = hydrating = false;\n      content || (content = runWithOwner(owner, () => createMemo(() => props.children)));\n      const el = mount();\n      if (el instanceof HTMLHeadElement) {\n        const [clean, setClean] = createSignal(false);\n        const cleanup = () => setClean(true);\n        createRoot(dispose => insert(el, () => (!clean() ? content() : dispose()), null));\n        onCleanup(cleanup);\n      } else {\n        const container = createElement(props.isSVG ? \"g\" : \"div\", props.isSVG),\n          renderRoot =\n            useShadow && container.attachShadow\n              ? container.attachShadow({\n                  mode: \"open\"\n                })\n              : container;\n        Object.defineProperty(container, \"_$host\", {\n          get() {\n            return marker.parentNode;\n          },\n          configurable: true\n        });\n        insert(renderRoot, content);\n        el.appendChild(container);\n        props.ref && props.ref(container);\n        onCleanup(() => el.removeChild(container));\n      }\n    },\n    undefined,\n    {\n      render: !hydrating\n    }\n  );\n  return marker;\n}\nfunction Dynamic(props) {\n  const [p, others] = splitProps(props, [\"component\"]);\n  const cached = createMemo(() => p.component);\n  return createMemo(() => {\n    const component = cached();\n    switch (typeof component) {\n      case \"function\":\n        return untrack(() => component(others));\n      case \"string\":\n        const isSvg = SVGElements.has(component);\n        const el = sharedConfig.context ? getNextElement() : createElement(component, isSvg);\n        spread(el, others, isSvg);\n        return el;\n    }\n  });\n}\n\nexport {\n  Aliases,\n  voidFn as Assets,\n  ChildProperties,\n  DOMElements,\n  DelegatedEvents,\n  Dynamic,\n  Hydration,\n  voidFn as HydrationScript,\n  NoHydration,\n  Portal,\n  Properties,\n  RequestContext,\n  SVGElements,\n  SVGNamespace,\n  addEventListener,\n  assign,\n  classList,\n  className,\n  clearDelegatedEvents,\n  delegateEvents,\n  dynamicProperty,\n  escape,\n  voidFn as generateHydrationScript,\n  voidFn as getAssets,\n  getHydrationKey,\n  getNextElement,\n  getNextMarker,\n  getNextMatch,\n  getPropAlias,\n  voidFn as getRequestEvent,\n  hydrate,\n  innerHTML,\n  insert,\n  isDev,\n  isServer,\n  render,\n  renderToStream,\n  renderToString,\n  renderToStringAsync,\n  resolveSSRNode,\n  runHydrationEvents,\n  setAttribute,\n  setAttributeNS,\n  setProperty,\n  spread,\n  ssr,\n  ssrAttribute,\n  ssrClassList,\n  ssrElement,\n  ssrHydrationKey,\n  ssrSpread,\n  ssrStyle,\n  style,\n  template,\n  use,\n  voidFn as useAssets\n};\n", "import { $PROXY, $TRACK, getListener, batch, createSignal } from \"solid-js\";\n\nconst $RAW = Symbol(\"store-raw\"),\n  $NODE = Symbol(\"store-node\"),\n  $HAS = Symbol(\"store-has\"),\n  $SELF = Symbol(\"store-self\");\nfunction wrap$1(value) {\n  let p = value[$PROXY];\n  if (!p) {\n    Object.defineProperty(value, $PROXY, {\n      value: (p = new Proxy(value, proxyTraps$1))\n    });\n    if (!Array.isArray(value)) {\n      const keys = Object.keys(value),\n        desc = Object.getOwnPropertyDescriptors(value);\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const prop = keys[i];\n        if (desc[prop].get) {\n          Object.defineProperty(value, prop, {\n            enumerable: desc[prop].enumerable,\n            get: desc[prop].get.bind(p)\n          });\n        }\n      }\n    }\n  }\n  return p;\n}\nfunction isWrappable(obj) {\n  let proto;\n  return (\n    obj != null &&\n    typeof obj === \"object\" &&\n    (obj[$PROXY] ||\n      !(proto = Object.getPrototypeOf(obj)) ||\n      proto === Object.prototype ||\n      Array.isArray(obj))\n  );\n}\nfunction unwrap(item, set = new Set()) {\n  let result, unwrapped, v, prop;\n  if ((result = item != null && item[$RAW])) return result;\n  if (!isWrappable(item) || set.has(item)) return item;\n  if (Array.isArray(item)) {\n    if (Object.isFrozen(item)) item = item.slice(0);\n    else set.add(item);\n    for (let i = 0, l = item.length; i < l; i++) {\n      v = item[i];\n      if ((unwrapped = unwrap(v, set)) !== v) item[i] = unwrapped;\n    }\n  } else {\n    if (Object.isFrozen(item)) item = Object.assign({}, item);\n    else set.add(item);\n    const keys = Object.keys(item),\n      desc = Object.getOwnPropertyDescriptors(item);\n    for (let i = 0, l = keys.length; i < l; i++) {\n      prop = keys[i];\n      if (desc[prop].get) continue;\n      v = item[prop];\n      if ((unwrapped = unwrap(v, set)) !== v) item[prop] = unwrapped;\n    }\n  }\n  return item;\n}\nfunction getNodes(target, symbol) {\n  let nodes = target[symbol];\n  if (!nodes)\n    Object.defineProperty(target, symbol, {\n      value: (nodes = Object.create(null))\n    });\n  return nodes;\n}\nfunction getNode(nodes, property, value) {\n  if (nodes[property]) return nodes[property];\n  const [s, set] = createSignal(value, {\n    equals: false,\n    internal: true\n  });\n  s.$ = set;\n  return (nodes[property] = s);\n}\nfunction proxyDescriptor$1(target, property) {\n  const desc = Reflect.getOwnPropertyDescriptor(target, property);\n  if (!desc || desc.get || !desc.configurable || property === $PROXY || property === $NODE)\n    return desc;\n  delete desc.value;\n  delete desc.writable;\n  desc.get = () => target[$PROXY][property];\n  return desc;\n}\nfunction trackSelf(target) {\n  getListener() && getNode(getNodes(target, $NODE), $SELF)();\n}\nfunction ownKeys(target) {\n  trackSelf(target);\n  return Reflect.ownKeys(target);\n}\nconst proxyTraps$1 = {\n  get(target, property, receiver) {\n    if (property === $RAW) return target;\n    if (property === $PROXY) return receiver;\n    if (property === $TRACK) {\n      trackSelf(target);\n      return receiver;\n    }\n    const nodes = getNodes(target, $NODE);\n    const tracked = nodes[property];\n    let value = tracked ? tracked() : target[property];\n    if (property === $NODE || property === $HAS || property === \"__proto__\") return value;\n    if (!tracked) {\n      const desc = Object.getOwnPropertyDescriptor(target, property);\n      if (\n        getListener() &&\n        (typeof value !== \"function\" || target.hasOwnProperty(property)) &&\n        !(desc && desc.get)\n      )\n        value = getNode(nodes, property, value)();\n    }\n    return isWrappable(value) ? wrap$1(value) : value;\n  },\n  has(target, property) {\n    if (\n      property === $RAW ||\n      property === $PROXY ||\n      property === $TRACK ||\n      property === $NODE ||\n      property === $HAS ||\n      property === \"__proto__\"\n    )\n      return true;\n    getListener() && getNode(getNodes(target, $HAS), property)();\n    return property in target;\n  },\n  set() {\n    return true;\n  },\n  deleteProperty() {\n    return true;\n  },\n  ownKeys: ownKeys,\n  getOwnPropertyDescriptor: proxyDescriptor$1\n};\nfunction setProperty(state, property, value, deleting = false) {\n  if (!deleting && state[property] === value) return;\n  const prev = state[property],\n    len = state.length;\n  if (value === undefined) {\n    delete state[property];\n    if (state[$HAS] && state[$HAS][property] && prev !== undefined) state[$HAS][property].$();\n  } else {\n    state[property] = value;\n    if (state[$HAS] && state[$HAS][property] && prev === undefined) state[$HAS][property].$();\n  }\n  let nodes = getNodes(state, $NODE),\n    node;\n  if ((node = getNode(nodes, property, prev))) node.$(() => value);\n  if (Array.isArray(state) && state.length !== len) {\n    for (let i = state.length; i < len; i++) (node = nodes[i]) && node.$();\n    (node = getNode(nodes, \"length\", len)) && node.$(state.length);\n  }\n  (node = nodes[$SELF]) && node.$();\n}\nfunction mergeStoreNode(state, value) {\n  const keys = Object.keys(value);\n  for (let i = 0; i < keys.length; i += 1) {\n    const key = keys[i];\n    setProperty(state, key, value[key]);\n  }\n}\nfunction updateArray(current, next) {\n  if (typeof next === \"function\") next = next(current);\n  next = unwrap(next);\n  if (Array.isArray(next)) {\n    if (current === next) return;\n    let i = 0,\n      len = next.length;\n    for (; i < len; i++) {\n      const value = next[i];\n      if (current[i] !== value) setProperty(current, i, value);\n    }\n    setProperty(current, \"length\", len);\n  } else mergeStoreNode(current, next);\n}\nfunction updatePath(current, path, traversed = []) {\n  let part,\n    prev = current;\n  if (path.length > 1) {\n    part = path.shift();\n    const partType = typeof part,\n      isArray = Array.isArray(current);\n    if (Array.isArray(part)) {\n      for (let i = 0; i < part.length; i++) {\n        updatePath(current, [part[i]].concat(path), traversed);\n      }\n      return;\n    } else if (isArray && partType === \"function\") {\n      for (let i = 0; i < current.length; i++) {\n        if (part(current[i], i)) updatePath(current, [i].concat(path), traversed);\n      }\n      return;\n    } else if (isArray && partType === \"object\") {\n      const { from = 0, to = current.length - 1, by = 1 } = part;\n      for (let i = from; i <= to; i += by) {\n        updatePath(current, [i].concat(path), traversed);\n      }\n      return;\n    } else if (path.length > 1) {\n      updatePath(current[part], path, [part].concat(traversed));\n      return;\n    }\n    prev = current[part];\n    traversed = [part].concat(traversed);\n  }\n  let value = path[0];\n  if (typeof value === \"function\") {\n    value = value(prev, traversed);\n    if (value === prev) return;\n  }\n  if (part === undefined && value == undefined) return;\n  value = unwrap(value);\n  if (part === undefined || (isWrappable(prev) && isWrappable(value) && !Array.isArray(value))) {\n    mergeStoreNode(prev, value);\n  } else setProperty(current, part, value);\n}\nfunction createStore(...[store, options]) {\n  const unwrappedStore = unwrap(store || {});\n  const isArray = Array.isArray(unwrappedStore);\n  const wrappedStore = wrap$1(unwrappedStore);\n  function setStore(...args) {\n    batch(() => {\n      isArray && args.length === 1\n        ? updateArray(unwrappedStore, args[0])\n        : updatePath(unwrappedStore, args);\n    });\n  }\n  return [wrappedStore, setStore];\n}\n\nfunction proxyDescriptor(target, property) {\n  const desc = Reflect.getOwnPropertyDescriptor(target, property);\n  if (\n    !desc ||\n    desc.get ||\n    desc.set ||\n    !desc.configurable ||\n    property === $PROXY ||\n    property === $NODE\n  )\n    return desc;\n  delete desc.value;\n  delete desc.writable;\n  desc.get = () => target[$PROXY][property];\n  desc.set = v => (target[$PROXY][property] = v);\n  return desc;\n}\nconst proxyTraps = {\n  get(target, property, receiver) {\n    if (property === $RAW) return target;\n    if (property === $PROXY) return receiver;\n    if (property === $TRACK) {\n      trackSelf(target);\n      return receiver;\n    }\n    const nodes = getNodes(target, $NODE);\n    const tracked = nodes[property];\n    let value = tracked ? tracked() : target[property];\n    if (property === $NODE || property === $HAS || property === \"__proto__\") return value;\n    if (!tracked) {\n      const desc = Object.getOwnPropertyDescriptor(target, property);\n      const isFunction = typeof value === \"function\";\n      if (getListener() && (!isFunction || target.hasOwnProperty(property)) && !(desc && desc.get))\n        value = getNode(nodes, property, value)();\n      else if (value != null && isFunction && value === Array.prototype[property]) {\n        return (...args) => batch(() => Array.prototype[property].apply(receiver, args));\n      }\n    }\n    return isWrappable(value) ? wrap(value) : value;\n  },\n  has(target, property) {\n    if (\n      property === $RAW ||\n      property === $PROXY ||\n      property === $TRACK ||\n      property === $NODE ||\n      property === $HAS ||\n      property === \"__proto__\"\n    )\n      return true;\n    getListener() && getNode(getNodes(target, $HAS), property)();\n    return property in target;\n  },\n  set(target, property, value) {\n    batch(() => setProperty(target, property, unwrap(value)));\n    return true;\n  },\n  deleteProperty(target, property) {\n    batch(() => setProperty(target, property, undefined, true));\n    return true;\n  },\n  ownKeys: ownKeys,\n  getOwnPropertyDescriptor: proxyDescriptor\n};\nfunction wrap(value) {\n  let p = value[$PROXY];\n  if (!p) {\n    Object.defineProperty(value, $PROXY, {\n      value: (p = new Proxy(value, proxyTraps))\n    });\n    const keys = Object.keys(value),\n      desc = Object.getOwnPropertyDescriptors(value);\n    const proto = Object.getPrototypeOf(value);\n    const isClass =\n      value !== null &&\n      typeof value === \"object\" &&\n      !Array.isArray(value) &&\n      proto !== Object.prototype;\n    if (isClass) {\n      const descriptors = Object.getOwnPropertyDescriptors(proto);\n      keys.push(...Object.keys(descriptors));\n      Object.assign(desc, descriptors);\n    }\n    for (let i = 0, l = keys.length; i < l; i++) {\n      const prop = keys[i];\n      if (isClass && prop === \"constructor\") continue;\n      if (desc[prop].get) {\n        const get = desc[prop].get.bind(p);\n        Object.defineProperty(value, prop, {\n          get,\n          configurable: true\n        });\n      }\n      if (desc[prop].set) {\n        const og = desc[prop].set,\n          set = v => batch(() => og.call(p, v));\n        Object.defineProperty(value, prop, {\n          set,\n          configurable: true\n        });\n      }\n    }\n  }\n  return p;\n}\nfunction createMutable(state, options) {\n  const unwrappedStore = unwrap(state || {});\n  const wrappedStore = wrap(unwrappedStore);\n  return wrappedStore;\n}\nfunction modifyMutable(state, modifier) {\n  batch(() => modifier(unwrap(state)));\n}\n\nconst $ROOT = Symbol(\"store-root\");\nfunction applyState(target, parent, property, merge, key) {\n  const previous = parent[property];\n  if (target === previous) return;\n  const isArray = Array.isArray(target);\n  if (\n    property !== $ROOT &&\n    (!isWrappable(target) ||\n      !isWrappable(previous) ||\n      isArray !== Array.isArray(previous) ||\n      (key && target[key] !== previous[key]))\n  ) {\n    setProperty(parent, property, target);\n    return;\n  }\n  if (isArray) {\n    if (\n      target.length &&\n      previous.length &&\n      (!merge || (key && target[0] && target[0][key] != null))\n    ) {\n      let i, j, start, end, newEnd, item, newIndicesNext, keyVal;\n      for (\n        start = 0, end = Math.min(previous.length, target.length);\n        start < end &&\n        (previous[start] === target[start] ||\n          (key && previous[start] && target[start] && previous[start][key] === target[start][key]));\n        start++\n      ) {\n        applyState(target[start], previous, start, merge, key);\n      }\n      const temp = new Array(target.length),\n        newIndices = new Map();\n      for (\n        end = previous.length - 1, newEnd = target.length - 1;\n        end >= start &&\n        newEnd >= start &&\n        (previous[end] === target[newEnd] ||\n          (key && previous[start] && target[start] && previous[end][key] === target[newEnd][key]));\n        end--, newEnd--\n      ) {\n        temp[newEnd] = previous[end];\n      }\n      if (start > newEnd || start > end) {\n        for (j = start; j <= newEnd; j++) setProperty(previous, j, target[j]);\n        for (; j < target.length; j++) {\n          setProperty(previous, j, temp[j]);\n          applyState(target[j], previous, j, merge, key);\n        }\n        if (previous.length > target.length) setProperty(previous, \"length\", target.length);\n        return;\n      }\n      newIndicesNext = new Array(newEnd + 1);\n      for (j = newEnd; j >= start; j--) {\n        item = target[j];\n        keyVal = key && item ? item[key] : item;\n        i = newIndices.get(keyVal);\n        newIndicesNext[j] = i === undefined ? -1 : i;\n        newIndices.set(keyVal, j);\n      }\n      for (i = start; i <= end; i++) {\n        item = previous[i];\n        keyVal = key && item ? item[key] : item;\n        j = newIndices.get(keyVal);\n        if (j !== undefined && j !== -1) {\n          temp[j] = previous[i];\n          j = newIndicesNext[j];\n          newIndices.set(keyVal, j);\n        }\n      }\n      for (j = start; j < target.length; j++) {\n        if (j in temp) {\n          setProperty(previous, j, temp[j]);\n          applyState(target[j], previous, j, merge, key);\n        } else setProperty(previous, j, target[j]);\n      }\n    } else {\n      for (let i = 0, len = target.length; i < len; i++) {\n        applyState(target[i], previous, i, merge, key);\n      }\n    }\n    if (previous.length > target.length) setProperty(previous, \"length\", target.length);\n    return;\n  }\n  const targetKeys = Object.keys(target);\n  for (let i = 0, len = targetKeys.length; i < len; i++) {\n    applyState(target[targetKeys[i]], previous, targetKeys[i], merge, key);\n  }\n  const previousKeys = Object.keys(previous);\n  for (let i = 0, len = previousKeys.length; i < len; i++) {\n    if (target[previousKeys[i]] === undefined) setProperty(previous, previousKeys[i], undefined);\n  }\n}\nfunction reconcile(value, options = {}) {\n  const { merge, key = \"id\" } = options,\n    v = unwrap(value);\n  return state => {\n    if (!isWrappable(state) || !isWrappable(v)) return v;\n    const res = applyState(\n      v,\n      {\n        [$ROOT]: state\n      },\n      $ROOT,\n      merge,\n      key\n    );\n    return res === undefined ? state : res;\n  };\n}\nconst producers = new WeakMap();\nconst setterTraps = {\n  get(target, property) {\n    if (property === $RAW) return target;\n    const value = target[property];\n    let proxy;\n    return isWrappable(value)\n      ? producers.get(value) ||\n          (producers.set(value, (proxy = new Proxy(value, setterTraps))), proxy)\n      : value;\n  },\n  set(target, property, value) {\n    setProperty(target, property, unwrap(value));\n    return true;\n  },\n  deleteProperty(target, property) {\n    setProperty(target, property, undefined, true);\n    return true;\n  }\n};\nfunction produce(fn) {\n  return state => {\n    if (isWrappable(state)) {\n      let proxy;\n      if (!(proxy = producers.get(state))) {\n        producers.set(state, (proxy = new Proxy(state, setterTraps)));\n      }\n      fn(proxy);\n    }\n    return state;\n  };\n}\n\nconst DEV = undefined;\n\nexport { $RAW, DEV, createMutable, createStore, modifyMutable, produce, reconcile, unwrap };\n", "import { isServer, getRequestEvent, createComponent as createComponent$1, memo, delegateEvents, spread, mergeProps as mergeProps$1, template } from 'solid-js/web';\nimport { getOwner, runWithOwner, createMemo, createContext, onCleanup, useContext, untrack, createSignal, createRenderEffect, on, startTransition, resetErrorBoundaries, batch, createComponent, children, mergeProps, Show, createRoot, sharedConfig, getListener, $TRACK, splitProps, createResource } from 'solid-js';\nimport { createStore, reconcile, unwrap } from 'solid-js/store';\n\nfunction createBeforeLeave() {\n  let listeners = new Set();\n  function subscribe(listener) {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  }\n  let ignore = false;\n  function confirm(to, options) {\n    if (ignore) return !(ignore = false);\n    const e = {\n      to,\n      options,\n      defaultPrevented: false,\n      preventDefault: () => e.defaultPrevented = true\n    };\n    for (const l of listeners) l.listener({\n      ...e,\n      from: l.location,\n      retry: force => {\n        force && (ignore = true);\n        l.navigate(to, {\n          ...options,\n          resolve: false\n        });\n      }\n    });\n    return !e.defaultPrevented;\n  }\n  return {\n    subscribe,\n    confirm\n  };\n}\n\n// The following supports browser initiated blocking (eg back/forward)\n\nlet depth;\nfunction saveCurrentDepth() {\n  if (!window.history.state || window.history.state._depth == null) {\n    window.history.replaceState({\n      ...window.history.state,\n      _depth: window.history.length - 1\n    }, \"\");\n  }\n  depth = window.history.state._depth;\n}\nif (!isServer) {\n  saveCurrentDepth();\n}\nfunction keepDepth(state) {\n  return {\n    ...state,\n    _depth: window.history.state && window.history.state._depth\n  };\n}\nfunction notifyIfNotBlocked(notify, block) {\n  let ignore = false;\n  return () => {\n    const prevDepth = depth;\n    saveCurrentDepth();\n    const delta = prevDepth == null ? null : depth - prevDepth;\n    if (ignore) {\n      ignore = false;\n      return;\n    }\n    if (delta && block(delta)) {\n      ignore = true;\n      window.history.go(-delta);\n    } else {\n      notify();\n    }\n  };\n}\n\nconst hasSchemeRegex = /^(?:[a-z0-9]+:)?\\/\\//i;\nconst trimPathRegex = /^\\/+|(\\/)\\/+$/g;\nconst mockBase = \"http://sr\";\nfunction normalizePath(path, omitSlash = false) {\n  const s = path.replace(trimPathRegex, \"$1\");\n  return s ? omitSlash || /^[?#]/.test(s) ? s : \"/\" + s : \"\";\n}\nfunction resolvePath(base, path, from) {\n  if (hasSchemeRegex.test(path)) {\n    return undefined;\n  }\n  const basePath = normalizePath(base);\n  const fromPath = from && normalizePath(from);\n  let result = \"\";\n  if (!fromPath || path.startsWith(\"/\")) {\n    result = basePath;\n  } else if (fromPath.toLowerCase().indexOf(basePath.toLowerCase()) !== 0) {\n    result = basePath + fromPath;\n  } else {\n    result = fromPath;\n  }\n  return (result || \"/\") + normalizePath(path, !result);\n}\nfunction invariant(value, message) {\n  if (value == null) {\n    throw new Error(message);\n  }\n  return value;\n}\nfunction joinPaths(from, to) {\n  return normalizePath(from).replace(/\\/*(\\*.*)?$/g, \"\") + normalizePath(to);\n}\nfunction extractSearchParams(url) {\n  const params = {};\n  url.searchParams.forEach((value, key) => {\n    params[key] = value;\n  });\n  return params;\n}\nfunction createMatcher(path, partial, matchFilters) {\n  const [pattern, splat] = path.split(\"/*\", 2);\n  const segments = pattern.split(\"/\").filter(Boolean);\n  const len = segments.length;\n  return location => {\n    const locSegments = location.split(\"/\").filter(Boolean);\n    const lenDiff = locSegments.length - len;\n    if (lenDiff < 0 || lenDiff > 0 && splat === undefined && !partial) {\n      return null;\n    }\n    const match = {\n      path: len ? \"\" : \"/\",\n      params: {}\n    };\n    const matchFilter = s => matchFilters === undefined ? undefined : matchFilters[s];\n    for (let i = 0; i < len; i++) {\n      const segment = segments[i];\n      const locSegment = locSegments[i];\n      const dynamic = segment[0] === \":\";\n      const key = dynamic ? segment.slice(1) : segment;\n      if (dynamic && matchSegment(locSegment, matchFilter(key))) {\n        match.params[key] = locSegment;\n      } else if (dynamic || !matchSegment(locSegment, segment)) {\n        return null;\n      }\n      match.path += `/${locSegment}`;\n    }\n    if (splat) {\n      const remainder = lenDiff ? locSegments.slice(-lenDiff).join(\"/\") : \"\";\n      if (matchSegment(remainder, matchFilter(splat))) {\n        match.params[splat] = remainder;\n      } else {\n        return null;\n      }\n    }\n    return match;\n  };\n}\nfunction matchSegment(input, filter) {\n  const isEqual = s => s.localeCompare(input, undefined, {\n    sensitivity: \"base\"\n  }) === 0;\n  if (filter === undefined) {\n    return true;\n  } else if (typeof filter === \"string\") {\n    return isEqual(filter);\n  } else if (typeof filter === \"function\") {\n    return filter(input);\n  } else if (Array.isArray(filter)) {\n    return filter.some(isEqual);\n  } else if (filter instanceof RegExp) {\n    return filter.test(input);\n  }\n  return false;\n}\nfunction scoreRoute(route) {\n  const [pattern, splat] = route.pattern.split(\"/*\", 2);\n  const segments = pattern.split(\"/\").filter(Boolean);\n  return segments.reduce((score, segment) => score + (segment.startsWith(\":\") ? 2 : 3), segments.length - (splat === undefined ? 0 : 1));\n}\nfunction createMemoObject(fn) {\n  const map = new Map();\n  const owner = getOwner();\n  return new Proxy({}, {\n    get(_, property) {\n      if (!map.has(property)) {\n        runWithOwner(owner, () => map.set(property, createMemo(() => fn()[property])));\n      }\n      return map.get(property)();\n    },\n    getOwnPropertyDescriptor() {\n      return {\n        enumerable: true,\n        configurable: true\n      };\n    },\n    ownKeys() {\n      return Reflect.ownKeys(fn());\n    }\n  });\n}\nfunction mergeSearchString(search, params) {\n  const merged = new URLSearchParams(search);\n  Object.entries(params).forEach(([key, value]) => {\n    if (value == null || value === \"\") {\n      merged.delete(key);\n    } else {\n      merged.set(key, String(value));\n    }\n  });\n  const s = merged.toString();\n  return s ? `?${s}` : \"\";\n}\nfunction expandOptionals(pattern) {\n  let match = /(\\/?\\:[^\\/]+)\\?/.exec(pattern);\n  if (!match) return [pattern];\n  let prefix = pattern.slice(0, match.index);\n  let suffix = pattern.slice(match.index + match[0].length);\n  const prefixes = [prefix, prefix += match[1]];\n\n  // This section handles adjacent optional params. We don't actually want all permuations since\n  // that will lead to equivalent routes which have the same number of params. For example\n  // `/:a?/:b?/:c`? only has the unique expansion: `/`, `/:a`, `/:a/:b`, `/:a/:b/:c` and we can\n  // discard `/:b`, `/:c`, `/:b/:c` by building them up in order and not recursing. This also helps\n  // ensure predictability where earlier params have precidence.\n  while (match = /^(\\/\\:[^\\/]+)\\?/.exec(suffix)) {\n    prefixes.push(prefix += match[1]);\n    suffix = suffix.slice(match[0].length);\n  }\n  return expandOptionals(suffix).reduce((results, expansion) => [...results, ...prefixes.map(p => p + expansion)], []);\n}\n\nconst MAX_REDIRECTS = 100;\nconst RouterContextObj = createContext();\nconst RouteContextObj = createContext();\nconst useRouter = () => invariant(useContext(RouterContextObj), \"<A> and 'use' router primitives can be only used inside a Route.\");\nconst useRoute = () => useContext(RouteContextObj) || useRouter().base;\nconst useResolvedPath = path => {\n  const route = useRoute();\n  return createMemo(() => route.resolvePath(path()));\n};\nconst useHref = to => {\n  const router = useRouter();\n  return createMemo(() => {\n    const to_ = to();\n    return to_ !== undefined ? router.renderPath(to_) : to_;\n  });\n};\nconst useNavigate = () => useRouter().navigatorFactory();\nconst useLocation = () => useRouter().location;\nconst useIsRouting = () => useRouter().isRouting;\nconst usePreloadRoute = () => useRouter().preloadRoute;\nconst useMatch = (path, matchFilters) => {\n  const location = useLocation();\n  const matchers = createMemo(() => expandOptionals(path()).map(path => createMatcher(path, undefined, matchFilters)));\n  return createMemo(() => {\n    for (const matcher of matchers()) {\n      const match = matcher(location.pathname);\n      if (match) return match;\n    }\n  });\n};\nconst useCurrentMatches = () => useRouter().matches;\nconst useParams = () => useRouter().params;\nconst useSearchParams = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const setSearchParams = (params, options) => {\n    const searchString = untrack(() => mergeSearchString(location.search, params) + location.hash);\n    navigate(searchString, {\n      scroll: false,\n      resolve: false,\n      ...options\n    });\n  };\n  return [location.query, setSearchParams];\n};\nconst useBeforeLeave = listener => {\n  const s = useRouter().beforeLeave.subscribe({\n    listener,\n    location: useLocation(),\n    navigate: useNavigate()\n  });\n  onCleanup(s);\n};\nfunction createRoutes(routeDef, base = \"\") {\n  const {\n    component,\n    preload,\n    load,\n    children,\n    info\n  } = routeDef;\n  const isLeaf = !children || Array.isArray(children) && !children.length;\n  const shared = {\n    key: routeDef,\n    component,\n    preload: preload || load,\n    info\n  };\n  return asArray(routeDef.path).reduce((acc, originalPath) => {\n    for (const expandedPath of expandOptionals(originalPath)) {\n      const path = joinPaths(base, expandedPath);\n      let pattern = isLeaf ? path : path.split(\"/*\", 1)[0];\n      pattern = pattern.split(\"/\").map(s => {\n        return s.startsWith(\":\") || s.startsWith(\"*\") ? s : encodeURIComponent(s);\n      }).join(\"/\");\n      acc.push({\n        ...shared,\n        originalPath,\n        pattern,\n        matcher: createMatcher(pattern, !isLeaf, routeDef.matchFilters)\n      });\n    }\n    return acc;\n  }, []);\n}\nfunction createBranch(routes, index = 0) {\n  return {\n    routes,\n    score: scoreRoute(routes[routes.length - 1]) * 10000 - index,\n    matcher(location) {\n      const matches = [];\n      for (let i = routes.length - 1; i >= 0; i--) {\n        const route = routes[i];\n        const match = route.matcher(location);\n        if (!match) {\n          return null;\n        }\n        matches.unshift({\n          ...match,\n          route\n        });\n      }\n      return matches;\n    }\n  };\n}\nfunction asArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\nfunction createBranches(routeDef, base = \"\", stack = [], branches = []) {\n  const routeDefs = asArray(routeDef);\n  for (let i = 0, len = routeDefs.length; i < len; i++) {\n    const def = routeDefs[i];\n    if (def && typeof def === \"object\") {\n      if (!def.hasOwnProperty(\"path\")) def.path = \"\";\n      const routes = createRoutes(def, base);\n      for (const route of routes) {\n        stack.push(route);\n        const isEmptyArray = Array.isArray(def.children) && def.children.length === 0;\n        if (def.children && !isEmptyArray) {\n          createBranches(def.children, route.pattern, stack, branches);\n        } else {\n          const branch = createBranch([...stack], branches.length);\n          branches.push(branch);\n        }\n        stack.pop();\n      }\n    }\n  }\n\n  // Stack will be empty on final return\n  return stack.length ? branches : branches.sort((a, b) => b.score - a.score);\n}\nfunction getRouteMatches(branches, location) {\n  for (let i = 0, len = branches.length; i < len; i++) {\n    const match = branches[i].matcher(location);\n    if (match) {\n      return match;\n    }\n  }\n  return [];\n}\nfunction createLocation(path, state) {\n  const origin = new URL(mockBase);\n  const url = createMemo(prev => {\n    const path_ = path();\n    try {\n      return new URL(path_, origin);\n    } catch (err) {\n      console.error(`Invalid path ${path_}`);\n      return prev;\n    }\n  }, origin, {\n    equals: (a, b) => a.href === b.href\n  });\n  const pathname = createMemo(() => url().pathname);\n  const search = createMemo(() => url().search, true);\n  const hash = createMemo(() => url().hash);\n  const key = () => \"\";\n  return {\n    get pathname() {\n      return pathname();\n    },\n    get search() {\n      return search();\n    },\n    get hash() {\n      return hash();\n    },\n    get state() {\n      return state();\n    },\n    get key() {\n      return key();\n    },\n    query: createMemoObject(on(search, () => extractSearchParams(url())))\n  };\n}\nlet intent;\nfunction getIntent() {\n  return intent;\n}\nlet inPreloadFn = false;\nfunction getInPreloadFn() {\n  return inPreloadFn;\n}\nfunction setInPreloadFn(value) {\n  inPreloadFn = value;\n}\nfunction createRouterContext(integration, branches, getContext, options = {}) {\n  const {\n    signal: [source, setSource],\n    utils = {}\n  } = integration;\n  const parsePath = utils.parsePath || (p => p);\n  const renderPath = utils.renderPath || (p => p);\n  const beforeLeave = utils.beforeLeave || createBeforeLeave();\n  const basePath = resolvePath(\"\", options.base || \"\");\n  if (basePath === undefined) {\n    throw new Error(`${basePath} is not a valid base path`);\n  } else if (basePath && !source().value) {\n    setSource({\n      value: basePath,\n      replace: true,\n      scroll: false\n    });\n  }\n  const [isRouting, setIsRouting] = createSignal(false);\n\n  // Keep track of last target, so that last call to transition wins\n  let lastTransitionTarget;\n\n  // Transition the location to a new value\n  const transition = (newIntent, newTarget) => {\n    if (newTarget.value === reference() && newTarget.state === state()) return;\n    if (lastTransitionTarget === undefined) setIsRouting(true);\n    intent = newIntent;\n    lastTransitionTarget = newTarget;\n    startTransition(() => {\n      if (lastTransitionTarget !== newTarget) return;\n      setReference(lastTransitionTarget.value);\n      setState(lastTransitionTarget.state);\n      resetErrorBoundaries();\n      if (!isServer) submissions[1]([]);\n    }).finally(() => {\n      if (lastTransitionTarget !== newTarget) return;\n\n      // Batch, in order for isRouting and final source update to happen together\n      batch(() => {\n        intent = undefined;\n        if (newIntent === \"navigate\") navigateEnd(lastTransitionTarget);\n        setIsRouting(false);\n        lastTransitionTarget = undefined;\n      });\n    });\n  };\n  const [reference, setReference] = createSignal(source().value);\n  const [state, setState] = createSignal(source().state);\n  const location = createLocation(reference, state);\n  const referrers = [];\n  const submissions = createSignal(isServer ? initFromFlash() : []);\n  const matches = createMemo(() => {\n    if (typeof options.transformUrl === \"function\") {\n      return getRouteMatches(branches(), options.transformUrl(location.pathname));\n    }\n    return getRouteMatches(branches(), location.pathname);\n  });\n  const params = createMemoObject(() => {\n    const m = matches();\n    const params = {};\n    for (let i = 0; i < m.length; i++) {\n      Object.assign(params, m[i].params);\n    }\n    return params;\n  });\n  const baseRoute = {\n    pattern: basePath,\n    path: () => basePath,\n    outlet: () => null,\n    resolvePath(to) {\n      return resolvePath(basePath, to);\n    }\n  };\n\n  // Create a native transition, when source updates\n  createRenderEffect(on(source, source => transition(\"native\", source), {\n    defer: true\n  }));\n  return {\n    base: baseRoute,\n    location,\n    params,\n    isRouting,\n    renderPath,\n    parsePath,\n    navigatorFactory,\n    matches,\n    beforeLeave,\n    preloadRoute,\n    singleFlight: options.singleFlight === undefined ? true : options.singleFlight,\n    submissions\n  };\n  function navigateFromRoute(route, to, options) {\n    // Untrack in case someone navigates in an effect - don't want to track `reference` or route paths\n    untrack(() => {\n      if (typeof to === \"number\") {\n        if (!to) ; else if (utils.go) {\n          utils.go(to);\n        } else {\n          console.warn(\"Router integration does not support relative routing\");\n        }\n        return;\n      }\n      const queryOnly = !to || to[0] === \"?\";\n      const {\n        replace,\n        resolve,\n        scroll,\n        state: nextState\n      } = {\n        replace: false,\n        resolve: !queryOnly,\n        scroll: true,\n        ...options\n      };\n      let s;\n      const resolvedTo = resolve ? route.resolvePath(to) : resolvePath(queryOnly && (s = source().value) && s.split(\"?\")[0] || \"\", to);\n      if (resolvedTo === undefined) {\n        throw new Error(`Path '${to}' is not a routable path`);\n      } else if (referrers.length >= MAX_REDIRECTS) {\n        throw new Error(\"Too many redirects\");\n      }\n      const current = reference();\n      if (resolvedTo !== current || nextState !== state()) {\n        if (isServer) {\n          const e = getRequestEvent();\n          e && (e.response = {\n            status: 302,\n            headers: new Headers({\n              Location: resolvedTo\n            })\n          });\n          setSource({\n            value: resolvedTo,\n            replace,\n            scroll,\n            state: nextState\n          });\n        } else if (beforeLeave.confirm(resolvedTo, options)) {\n          referrers.push({\n            value: current,\n            replace,\n            scroll,\n            state: state()\n          });\n          transition(\"navigate\", {\n            value: resolvedTo,\n            state: nextState\n          });\n        }\n      }\n    });\n  }\n  function navigatorFactory(route) {\n    // Workaround for vite issue (https://github.com/vitejs/vite/issues/3803)\n    route = route || useContext(RouteContextObj) || baseRoute;\n    return (to, options) => navigateFromRoute(route, to, options);\n  }\n  function navigateEnd(next) {\n    const first = referrers[0];\n    if (first) {\n      setSource({\n        ...next,\n        replace: first.replace,\n        scroll: first.scroll\n      });\n      referrers.length = 0;\n    }\n  }\n  function preloadRoute(url, options = {}) {\n    const matches = getRouteMatches(branches(), url.pathname);\n    const prevIntent = intent;\n    intent = \"preload\";\n    for (let match in matches) {\n      const {\n        route,\n        params\n      } = matches[match];\n      route.component && route.component.preload && route.component.preload();\n      const {\n        preload\n      } = route;\n      inPreloadFn = true;\n      options.preloadData && preload && runWithOwner(getContext(), () => preload({\n        params,\n        location: {\n          pathname: url.pathname,\n          search: url.search,\n          hash: url.hash,\n          query: extractSearchParams(url),\n          state: null,\n          key: \"\"\n        },\n        intent: \"preload\"\n      }));\n      inPreloadFn = false;\n    }\n    intent = prevIntent;\n  }\n  function initFromFlash() {\n    const e = getRequestEvent();\n    return e && e.router && e.router.submission ? [e.router.submission] : [];\n  }\n}\nfunction createRouteContext(router, parent, outlet, match) {\n  const {\n    base,\n    location,\n    params\n  } = router;\n  const {\n    pattern,\n    component,\n    preload\n  } = match().route;\n  const path = createMemo(() => match().path);\n  component && component.preload && component.preload();\n  inPreloadFn = true;\n  const data = preload ? preload({\n    params,\n    location,\n    intent: intent || \"initial\"\n  }) : undefined;\n  inPreloadFn = false;\n  const route = {\n    parent,\n    pattern,\n    path,\n    outlet: () => component ? createComponent(component, {\n      params,\n      location,\n      data,\n      get children() {\n        return outlet();\n      }\n    }) : outlet(),\n    resolvePath(to) {\n      return resolvePath(base.path(), to, path());\n    }\n  };\n  return route;\n}\n\nconst createRouterComponent = router => props => {\n  const {\n    base\n  } = props;\n  const routeDefs = children(() => props.children);\n  const branches = createMemo(() => createBranches(routeDefs(), props.base || \"\"));\n  let context;\n  const routerState = createRouterContext(router, branches, () => context, {\n    base,\n    singleFlight: props.singleFlight,\n    transformUrl: props.transformUrl\n  });\n  router.create && router.create(routerState);\n  return createComponent$1(RouterContextObj.Provider, {\n    value: routerState,\n    get children() {\n      return createComponent$1(Root, {\n        routerState: routerState,\n        get root() {\n          return props.root;\n        },\n        get preload() {\n          return props.rootPreload || props.rootLoad;\n        },\n        get children() {\n          return [memo(() => (context = getOwner()) && null), createComponent$1(Routes, {\n            routerState: routerState,\n            get branches() {\n              return branches();\n            }\n          })];\n        }\n      });\n    }\n  });\n};\nfunction Root(props) {\n  const location = props.routerState.location;\n  const params = props.routerState.params;\n  const data = createMemo(() => props.preload && untrack(() => {\n    setInPreloadFn(true);\n    props.preload({\n      params,\n      location,\n      intent: getIntent() || \"initial\"\n    });\n    setInPreloadFn(false);\n  }));\n  return createComponent$1(Show, {\n    get when() {\n      return props.root;\n    },\n    keyed: true,\n    get fallback() {\n      return props.children;\n    },\n    children: Root => createComponent$1(Root, {\n      params: params,\n      location: location,\n      get data() {\n        return data();\n      },\n      get children() {\n        return props.children;\n      }\n    })\n  });\n}\nfunction Routes(props) {\n  if (isServer) {\n    const e = getRequestEvent();\n    if (e && e.router && e.router.dataOnly) {\n      dataOnly(e, props.routerState, props.branches);\n      return;\n    }\n    e && ((e.router || (e.router = {})).matches || (e.router.matches = props.routerState.matches().map(({\n      route,\n      path,\n      params\n    }) => ({\n      path: route.originalPath,\n      pattern: route.pattern,\n      match: path,\n      params,\n      info: route.info\n    }))));\n  }\n  const disposers = [];\n  let root;\n  const routeStates = createMemo(on(props.routerState.matches, (nextMatches, prevMatches, prev) => {\n    let equal = prevMatches && nextMatches.length === prevMatches.length;\n    const next = [];\n    for (let i = 0, len = nextMatches.length; i < len; i++) {\n      const prevMatch = prevMatches && prevMatches[i];\n      const nextMatch = nextMatches[i];\n      if (prev && prevMatch && nextMatch.route.key === prevMatch.route.key) {\n        next[i] = prev[i];\n      } else {\n        equal = false;\n        if (disposers[i]) {\n          disposers[i]();\n        }\n        createRoot(dispose => {\n          disposers[i] = dispose;\n          next[i] = createRouteContext(props.routerState, next[i - 1] || props.routerState.base, createOutlet(() => routeStates()[i + 1]), () => props.routerState.matches()[i]);\n        });\n      }\n    }\n    disposers.splice(nextMatches.length).forEach(dispose => dispose());\n    if (prev && equal) {\n      return prev;\n    }\n    root = next[0];\n    return next;\n  }));\n  return createOutlet(() => routeStates() && root)();\n}\nconst createOutlet = child => {\n  return () => createComponent$1(Show, {\n    get when() {\n      return child();\n    },\n    keyed: true,\n    children: child => createComponent$1(RouteContextObj.Provider, {\n      value: child,\n      get children() {\n        return child.outlet();\n      }\n    })\n  });\n};\nconst Route = props => {\n  const childRoutes = children(() => props.children);\n  return mergeProps(props, {\n    get children() {\n      return childRoutes();\n    }\n  });\n};\n\n// for data only mode with single flight mutations\nfunction dataOnly(event, routerState, branches) {\n  const url = new URL(event.request.url);\n  const prevMatches = getRouteMatches(branches, new URL(event.router.previousUrl || event.request.url).pathname);\n  const matches = getRouteMatches(branches, url.pathname);\n  for (let match = 0; match < matches.length; match++) {\n    if (!prevMatches[match] || matches[match].route !== prevMatches[match].route) event.router.dataOnly = true;\n    const {\n      route,\n      params\n    } = matches[match];\n    route.preload && route.preload({\n      params,\n      location: routerState.location,\n      intent: \"preload\"\n    });\n  }\n}\n\nfunction intercept([value, setValue], get, set) {\n  return [get ? () => get(value()) : value, set ? v => setValue(set(v)) : setValue];\n}\nfunction querySelector(selector) {\n  if (selector === \"#\") {\n    return null;\n  }\n  // Guard against selector being an invalid CSS selector\n  try {\n    return document.querySelector(selector);\n  } catch (e) {\n    return null;\n  }\n}\nfunction createRouter(config) {\n  let ignore = false;\n  const wrap = value => typeof value === \"string\" ? {\n    value\n  } : value;\n  const signal = intercept(createSignal(wrap(config.get()), {\n    equals: (a, b) => a.value === b.value && a.state === b.state\n  }), undefined, next => {\n    !ignore && config.set(next);\n    if (sharedConfig.registry && !sharedConfig.done) sharedConfig.done = true;\n    return next;\n  });\n  config.init && onCleanup(config.init((value = config.get()) => {\n    ignore = true;\n    signal[1](wrap(value));\n    ignore = false;\n  }));\n  return createRouterComponent({\n    signal,\n    create: config.create,\n    utils: config.utils\n  });\n}\nfunction bindEvent(target, type, handler) {\n  target.addEventListener(type, handler);\n  return () => target.removeEventListener(type, handler);\n}\nfunction scrollToHash(hash, fallbackTop) {\n  const el = querySelector(`#${hash}`);\n  if (el) {\n    el.scrollIntoView();\n  } else if (fallbackTop) {\n    window.scrollTo(0, 0);\n  }\n}\n\nfunction getPath(url) {\n  const u = new URL(url);\n  return u.pathname + u.search;\n}\nfunction StaticRouter(props) {\n  let e;\n  const obj = {\n    value: props.url || (e = getRequestEvent()) && getPath(e.request.url) || \"\"\n  };\n  return createRouterComponent({\n    signal: [() => obj, next => Object.assign(obj, next)]\n  })(props);\n}\n\nconst LocationHeader = \"Location\";\nconst PRELOAD_TIMEOUT = 5000;\nconst CACHE_TIMEOUT = 180000;\nlet cacheMap = new Map();\n\n// cleanup forward/back cache\nif (!isServer) {\n  setInterval(() => {\n    const now = Date.now();\n    for (let [k, v] of cacheMap.entries()) {\n      if (!v[3].count && now - v[0] > CACHE_TIMEOUT) {\n        cacheMap.delete(k);\n      }\n    }\n  }, 300000);\n}\nfunction getCache() {\n  if (!isServer) return cacheMap;\n  const req = getRequestEvent();\n  if (!req) throw new Error(\"Cannot find cache context\");\n  return (req.router || (req.router = {})).cache || (req.router.cache = new Map());\n}\nfunction revalidate(key, force = true) {\n  return startTransition(() => {\n    const now = Date.now();\n    cacheKeyOp(key, entry => {\n      force && (entry[0] = 0); //force cache miss\n      entry[3][1](now); // retrigger live signals\n    });\n  });\n}\nfunction cacheKeyOp(key, fn) {\n  key && !Array.isArray(key) && (key = [key]);\n  for (let k of cacheMap.keys()) {\n    if (key === undefined || matchKey(k, key)) fn(cacheMap.get(k));\n  }\n}\nfunction cache(fn, name) {\n  // prioritize GET for server functions\n  if (fn.GET) fn = fn.GET;\n  const cachedFn = (...args) => {\n    const cache = getCache();\n    const intent = getIntent();\n    const inPreloadFn = getInPreloadFn();\n    const owner = getOwner();\n    const navigate = owner ? useNavigate() : undefined;\n    const now = Date.now();\n    const key = name + hashKey(args);\n    let cached = cache.get(key);\n    let tracking;\n    if (isServer) {\n      const e = getRequestEvent();\n      if (e) {\n        const dataOnly = (e.router || (e.router = {})).dataOnly;\n        if (dataOnly) {\n          const data = e && (e.router.data || (e.router.data = {}));\n          if (data && key in data) return data[key];\n          if (Array.isArray(dataOnly) && !dataOnly.includes(key)) {\n            data[key] = undefined;\n            return Promise.resolve();\n          }\n        }\n      }\n    }\n    if (getListener() && !isServer) {\n      tracking = true;\n      onCleanup(() => cached[3].count--);\n    }\n    if (cached && cached[0] && (isServer || intent === \"native\" || cached[3].count || Date.now() - cached[0] < PRELOAD_TIMEOUT)) {\n      if (tracking) {\n        cached[3].count++;\n        cached[3][0](); // track\n      }\n      if (cached[2] === \"preload\" && intent !== \"preload\") {\n        cached[0] = now;\n      }\n      let res = cached[1];\n      if (intent !== \"preload\") {\n        res = \"then\" in cached[1] ? cached[1].then(handleResponse(false), handleResponse(true)) : handleResponse(false)(cached[1]);\n        !isServer && intent === \"navigate\" && startTransition(() => cached[3][1](cached[0])); // update version\n      }\n      inPreloadFn && \"then\" in res && res.catch(() => {});\n      return res;\n    }\n    let res = !isServer && sharedConfig.context && sharedConfig.has(key) ? sharedConfig.load(key) // hydrating\n    : fn(...args);\n    if (cached) {\n      cached[0] = now;\n      cached[1] = res;\n      cached[2] = intent;\n      !isServer && intent === \"navigate\" && startTransition(() => cached[3][1](cached[0])); // update version\n    } else {\n      cache.set(key, cached = [now, res, intent, createSignal(now)]);\n      cached[3].count = 0;\n    }\n    if (tracking) {\n      cached[3].count++;\n      cached[3][0](); // track\n    }\n    if (isServer) {\n      const e = getRequestEvent();\n      if (e && e.router.dataOnly) return e.router.data[key] = res;\n    }\n    if (intent !== \"preload\") {\n      res = \"then\" in res ? res.then(handleResponse(false), handleResponse(true)) : handleResponse(false)(res);\n    }\n    inPreloadFn && \"then\" in res && res.catch(() => {});\n    // serialize on server\n    if (isServer && sharedConfig.context && sharedConfig.context.async && !sharedConfig.context.noHydrate) {\n      const e = getRequestEvent();\n      (!e || !e.serverOnly) && sharedConfig.context.serialize(key, res);\n    }\n    return res;\n    function handleResponse(error) {\n      return async v => {\n        if (v instanceof Response) {\n          const url = v.headers.get(LocationHeader);\n          if (url !== null) {\n            // client + server relative redirect\n            if (navigate && url.startsWith(\"/\")) startTransition(() => {\n              navigate(url, {\n                replace: true\n              });\n            });else if (!isServer) window.location.href = url;else if (isServer) {\n              const e = getRequestEvent();\n              if (e) e.response = {\n                status: 302,\n                headers: new Headers({\n                  Location: url\n                })\n              };\n            }\n            return;\n          }\n          if (v.customBody) v = await v.customBody();\n        }\n        if (error) throw v;\n        return v;\n      };\n    }\n  };\n  cachedFn.keyFor = (...args) => name + hashKey(args);\n  cachedFn.key = name;\n  return cachedFn;\n}\ncache.set = (key, value) => {\n  const cache = getCache();\n  const now = Date.now();\n  let cached = cache.get(key);\n  if (cached) {\n    cached[0] = now;\n    cached[1] = value;\n    cached[2] = \"preload\";\n  } else {\n    cache.set(key, cached = [now, value,, createSignal(now)]);\n    cached[3].count = 0;\n  }\n};\ncache.clear = () => getCache().clear();\nfunction matchKey(key, keys) {\n  for (let k of keys) {\n    if (key.startsWith(k)) return true;\n  }\n  return false;\n}\n\n// Modified from the amazing Tanstack Query library (MIT)\n// https://github.com/TanStack/query/blob/main/packages/query-core/src/utils.ts#L168\nfunction hashKey(args) {\n  return JSON.stringify(args, (_, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {\n    result[key] = val[key];\n    return result;\n  }, {}) : val);\n}\nfunction isPlainObject(obj) {\n  let proto;\n  return obj != null && typeof obj === \"object\" && (!(proto = Object.getPrototypeOf(obj)) || proto === Object.prototype);\n}\n\nconst actions = /* #__PURE__ */new Map();\nfunction useSubmissions(fn, filter) {\n  const router = useRouter();\n  const subs = createMemo(() => router.submissions[0]().filter(s => s.url === fn.toString() && (!filter || filter(s.input))));\n  return new Proxy([], {\n    get(_, property) {\n      if (property === $TRACK) return subs();\n      if (property === \"pending\") return subs().some(sub => !sub.result);\n      return subs()[property];\n    }\n  });\n}\nfunction useSubmission(fn, filter) {\n  const submissions = useSubmissions(fn, filter);\n  return new Proxy({}, {\n    get(_, property) {\n      if (submissions.length === 0 && property === \"clear\" || property === \"retry\") return () => {};\n      return submissions[submissions.length - 1]?.[property];\n    }\n  });\n}\nfunction useAction(action) {\n  const r = useRouter();\n  return (...args) => action.apply({\n    r\n  }, args);\n}\nfunction action(fn, name) {\n  function mutate(...variables) {\n    const router = this.r;\n    const form = this.f;\n    const p = (router.singleFlight && fn.withOptions ? fn.withOptions({\n      headers: {\n        \"X-Single-Flight\": \"true\"\n      }\n    }) : fn)(...variables);\n    const [result, setResult] = createSignal();\n    let submission;\n    function handler(error) {\n      return async res => {\n        const result = await handleResponse(res, error, router.navigatorFactory());\n        if (!result) return submission.clear();\n        setResult(result);\n        if (result.error && !form) throw result.error;\n        return result.data;\n      };\n    }\n    router.submissions[1](s => [...s, submission = {\n      input: variables,\n      url,\n      get result() {\n        return result()?.data;\n      },\n      get error() {\n        return result()?.error;\n      },\n      get pending() {\n        return !result();\n      },\n      clear() {\n        router.submissions[1](v => v.filter(i => i.input !== variables));\n      },\n      retry() {\n        setResult(undefined);\n        const p = fn(...variables);\n        return p.then(handler(), handler(true));\n      }\n    }]);\n    return p.then(handler(), handler(true));\n  }\n  const url = fn.url || name && `https://action/${name}` || (!isServer ? `https://action/${hashString(fn.toString())}` : \"\");\n  return toAction(mutate, url);\n}\nfunction toAction(fn, url) {\n  fn.toString = () => {\n    if (!url) throw new Error(\"Client Actions need explicit names if server rendered\");\n    return url;\n  };\n  fn.with = function (...args) {\n    const newFn = function (...passedArgs) {\n      return fn.call(this, ...args, ...passedArgs);\n    };\n    const uri = new URL(url, mockBase);\n    uri.searchParams.set(\"args\", hashKey(args));\n    return toAction(newFn, (uri.origin === \"https://action\" ? uri.origin : \"\") + uri.pathname + uri.search);\n  };\n  fn.url = url;\n  if (!isServer) {\n    actions.set(url, fn);\n    getOwner() && onCleanup(() => actions.delete(url));\n  }\n  return fn;\n}\nconst hashString = s => s.split(\"\").reduce((a, b) => (a << 5) - a + b.charCodeAt(0) | 0, 0);\nasync function handleResponse(response, error, navigate) {\n  let data;\n  let custom;\n  let keys;\n  let flightKeys;\n  if (response instanceof Response) {\n    if (response.headers.has(\"X-Revalidate\")) keys = response.headers.get(\"X-Revalidate\").split(\",\");\n    if (response.customBody) {\n      data = custom = await response.customBody();\n      if (response.headers.has(\"X-Single-Flight\")) {\n        data = data._$value;\n        delete custom._$value;\n        flightKeys = Object.keys(custom);\n      }\n    }\n    if (response.headers.has(\"Location\")) {\n      const locationUrl = response.headers.get(\"Location\") || \"/\";\n      if (locationUrl.startsWith(\"http\")) {\n        window.location.href = locationUrl;\n      } else {\n        navigate(locationUrl);\n      }\n    }\n  } else if (error) return {\n    error: response\n  };else data = response;\n  // invalidate\n  cacheKeyOp(keys, entry => entry[0] = 0);\n  // set cache\n  flightKeys && flightKeys.forEach(k => cache.set(k, custom[k]));\n  // trigger revalidation\n  await revalidate(keys, false);\n  return data != null ? {\n    data\n  } : undefined;\n}\n\nfunction setupNativeEvents(preload = true, explicitLinks = false, actionBase = \"/_server\", transformUrl) {\n  return router => {\n    const basePath = router.base.path();\n    const navigateFromRoute = router.navigatorFactory(router.base);\n    let preloadTimeout = {};\n    function isSvg(el) {\n      return el.namespaceURI === \"http://www.w3.org/2000/svg\";\n    }\n    function handleAnchor(evt) {\n      if (evt.defaultPrevented || evt.button !== 0 || evt.metaKey || evt.altKey || evt.ctrlKey || evt.shiftKey) return;\n      const a = evt.composedPath().find(el => el instanceof Node && el.nodeName.toUpperCase() === \"A\");\n      if (!a || explicitLinks && !a.hasAttribute(\"link\")) return;\n      const svg = isSvg(a);\n      const href = svg ? a.href.baseVal : a.href;\n      const target = svg ? a.target.baseVal : a.target;\n      if (target || !href && !a.hasAttribute(\"state\")) return;\n      const rel = (a.getAttribute(\"rel\") || \"\").split(/\\s+/);\n      if (a.hasAttribute(\"download\") || rel && rel.includes(\"external\")) return;\n      const url = svg ? new URL(href, document.baseURI) : new URL(href);\n      if (url.origin !== window.location.origin || basePath && url.pathname && !url.pathname.toLowerCase().startsWith(basePath.toLowerCase())) return;\n      return [a, url];\n    }\n    function handleAnchorClick(evt) {\n      const res = handleAnchor(evt);\n      if (!res) return;\n      const [a, url] = res;\n      const to = router.parsePath(url.pathname + url.search + url.hash);\n      const state = a.getAttribute(\"state\");\n      evt.preventDefault();\n      navigateFromRoute(to, {\n        resolve: false,\n        replace: a.hasAttribute(\"replace\"),\n        scroll: !a.hasAttribute(\"noscroll\"),\n        state: state && JSON.parse(state)\n      });\n    }\n    function handleAnchorPreload(evt) {\n      const res = handleAnchor(evt);\n      if (!res) return;\n      const [a, url] = res;\n      if (typeof transformUrl === \"function\") {\n        url.pathname = transformUrl(url.pathname);\n      }\n      if (!preloadTimeout[url.pathname]) router.preloadRoute(url, {\n        preloadData: a.getAttribute(\"preload\") !== \"false\"\n      });\n    }\n    function handleAnchorIn(evt) {\n      const res = handleAnchor(evt);\n      if (!res) return;\n      const [a, url] = res;\n      if (typeof transformUrl === \"function\") {\n        url.pathname = transformUrl(url.pathname);\n      }\n      if (preloadTimeout[url.pathname]) return;\n      preloadTimeout[url.pathname] = setTimeout(() => {\n        router.preloadRoute(url, {\n          preloadData: a.getAttribute(\"preload\") !== \"false\"\n        });\n        delete preloadTimeout[url.pathname];\n      }, 200);\n    }\n    function handleAnchorOut(evt) {\n      const res = handleAnchor(evt);\n      if (!res) return;\n      const [, url] = res;\n      if (typeof transformUrl === \"function\") {\n        url.pathname = transformUrl(url.pathname);\n      }\n      if (preloadTimeout[url.pathname]) {\n        clearTimeout(preloadTimeout[url.pathname]);\n        delete preloadTimeout[url.pathname];\n      }\n    }\n    function handleFormSubmit(evt) {\n      if (evt.defaultPrevented) return;\n      let actionRef = evt.submitter && evt.submitter.hasAttribute(\"formaction\") ? evt.submitter.getAttribute(\"formaction\") : evt.target.getAttribute(\"action\");\n      if (!actionRef) return;\n      if (!actionRef.startsWith(\"https://action/\")) {\n        // normalize server actions\n        const url = new URL(actionRef, mockBase);\n        actionRef = router.parsePath(url.pathname + url.search);\n        if (!actionRef.startsWith(actionBase)) return;\n      }\n      if (evt.target.method.toUpperCase() !== \"POST\") throw new Error(\"Only POST forms are supported for Actions\");\n      const handler = actions.get(actionRef);\n      if (handler) {\n        evt.preventDefault();\n        const data = new FormData(evt.target, evt.submitter);\n        handler.call({\n          r: router,\n          f: evt.target\n        }, evt.target.enctype === \"multipart/form-data\" ? data : new URLSearchParams(data));\n      }\n    }\n\n    // ensure delegated event run first\n    delegateEvents([\"click\", \"submit\"]);\n    document.addEventListener(\"click\", handleAnchorClick);\n    if (preload) {\n      document.addEventListener(\"mouseover\", handleAnchorIn);\n      document.addEventListener(\"mouseout\", handleAnchorOut);\n      document.addEventListener(\"focusin\", handleAnchorPreload);\n      document.addEventListener(\"touchstart\", handleAnchorPreload);\n    }\n    document.addEventListener(\"submit\", handleFormSubmit);\n    onCleanup(() => {\n      document.removeEventListener(\"click\", handleAnchorClick);\n      if (preload) {\n        document.removeEventListener(\"mouseover\", handleAnchorIn);\n        document.removeEventListener(\"mouseout\", handleAnchorOut);\n        document.removeEventListener(\"focusin\", handleAnchorPreload);\n        document.removeEventListener(\"touchstart\", handleAnchorPreload);\n      }\n      document.removeEventListener(\"submit\", handleFormSubmit);\n    });\n  };\n}\n\nfunction Router(props) {\n  if (isServer) return StaticRouter(props);\n  const getSource = () => {\n    const url = window.location.pathname.replace(/^\\/+/, \"/\") + window.location.search;\n    return {\n      value: url + window.location.hash,\n      state: window.history.state\n    };\n  };\n  const beforeLeave = createBeforeLeave();\n  return createRouter({\n    get: getSource,\n    set({\n      value,\n      replace,\n      scroll,\n      state\n    }) {\n      if (replace) {\n        window.history.replaceState(keepDepth(state), \"\", value);\n      } else {\n        window.history.pushState(state, \"\", value);\n      }\n      scrollToHash(decodeURIComponent(window.location.hash.slice(1)), scroll);\n      saveCurrentDepth();\n    },\n    init: notify => bindEvent(window, \"popstate\", notifyIfNotBlocked(notify, delta => {\n      if (delta && delta < 0) {\n        return !beforeLeave.confirm(delta);\n      } else {\n        const s = getSource();\n        return !beforeLeave.confirm(s.value, {\n          state: s.state\n        });\n      }\n    })),\n    create: setupNativeEvents(props.preload, props.explicitLinks, props.actionBase, props.transformUrl),\n    utils: {\n      go: delta => window.history.go(delta),\n      beforeLeave\n    }\n  })(props);\n}\n\nfunction hashParser(str) {\n  const to = str.replace(/^.*?#/, \"\");\n  // Hash-only hrefs like `#foo` from plain anchors will come in as `/#foo` whereas a link to\n  // `/foo` will be `/#/foo`. Check if the to starts with a `/` and if not append it as a hash\n  // to the current path so we can handle these in-page anchors correctly.\n  if (!to.startsWith(\"/\")) {\n    const [, path = \"/\"] = window.location.hash.split(\"#\", 2);\n    return `${path}#${to}`;\n  }\n  return to;\n}\nfunction HashRouter(props) {\n  const getSource = () => window.location.hash.slice(1);\n  const beforeLeave = createBeforeLeave();\n  return createRouter({\n    get: getSource,\n    set({\n      value,\n      replace,\n      scroll,\n      state\n    }) {\n      if (replace) {\n        window.history.replaceState(keepDepth(state), \"\", \"#\" + value);\n      } else {\n        window.history.pushState(state, \"\", \"#\" + value);\n      }\n      const hashIndex = value.indexOf(\"#\");\n      const hash = hashIndex >= 0 ? value.slice(hashIndex + 1) : \"\";\n      scrollToHash(hash, scroll);\n      saveCurrentDepth();\n    },\n    init: notify => bindEvent(window, \"hashchange\", notifyIfNotBlocked(notify, delta => !beforeLeave.confirm(delta && delta < 0 ? delta : getSource()))),\n    create: setupNativeEvents(props.preload, props.explicitLinks, props.actionBase),\n    utils: {\n      go: delta => window.history.go(delta),\n      renderPath: path => `#${path}`,\n      parsePath: hashParser,\n      beforeLeave\n    }\n  })(props);\n}\n\nfunction createMemoryHistory() {\n  const entries = [\"/\"];\n  let index = 0;\n  const listeners = [];\n  const go = n => {\n    // https://github.com/remix-run/react-router/blob/682810ca929d0e3c64a76f8d6e465196b7a2ac58/packages/router/history.ts#L245\n    index = Math.max(0, Math.min(index + n, entries.length - 1));\n    const value = entries[index];\n    listeners.forEach(listener => listener(value));\n  };\n  return {\n    get: () => entries[index],\n    set: ({\n      value,\n      scroll,\n      replace\n    }) => {\n      if (replace) {\n        entries[index] = value;\n      } else {\n        entries.splice(index + 1, entries.length - index, value);\n        index++;\n      }\n      listeners.forEach(listener => listener(value));\n      setTimeout(() => {\n        if (scroll) {\n          scrollToHash(value.split(\"#\")[1] || \"\", true);\n        }\n      }, 0);\n    },\n    back: () => {\n      go(-1);\n    },\n    forward: () => {\n      go(1);\n    },\n    go,\n    listen: listener => {\n      listeners.push(listener);\n      return () => {\n        const index = listeners.indexOf(listener);\n        listeners.splice(index, 1);\n      };\n    }\n  };\n}\nfunction MemoryRouter(props) {\n  const memoryHistory = props.history || createMemoryHistory();\n  return createRouter({\n    get: memoryHistory.get,\n    set: memoryHistory.set,\n    init: memoryHistory.listen,\n    create: setupNativeEvents(props.preload, props.explicitLinks, props.actionBase),\n    utils: {\n      go: memoryHistory.go\n    }\n  })(props);\n}\n\nconst _tmpl$ = /*#__PURE__*/template(`<a>`);\nfunction A(props) {\n  props = mergeProps({\n    inactiveClass: \"inactive\",\n    activeClass: \"active\"\n  }, props);\n  const [, rest] = splitProps(props, [\"href\", \"state\", \"class\", \"activeClass\", \"inactiveClass\", \"end\"]);\n  const to = useResolvedPath(() => props.href);\n  const href = useHref(to);\n  const location = useLocation();\n  const isActive = createMemo(() => {\n    const to_ = to();\n    if (to_ === undefined) return [false, false];\n    const path = normalizePath(to_.split(/[?#]/, 1)[0]).toLowerCase();\n    const loc = normalizePath(location.pathname).toLowerCase();\n    return [props.end ? path === loc : loc.startsWith(path + \"/\") || loc === path, path === loc];\n  });\n  return (() => {\n    const _el$ = _tmpl$();\n    spread(_el$, mergeProps$1(rest, {\n      get href() {\n        return href() || props.href;\n      },\n      get state() {\n        return JSON.stringify(props.state);\n      },\n      get classList() {\n        return {\n          ...(props.class && {\n            [props.class]: true\n          }),\n          [props.inactiveClass]: !isActive()[0],\n          [props.activeClass]: isActive()[0],\n          ...rest.classList\n        };\n      },\n      \"link\": \"\",\n      get [\"aria-current\"]() {\n        return isActive()[1] ? \"page\" : undefined;\n      }\n    }), false, false);\n    return _el$;\n  })();\n}\nfunction Navigate(props) {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const {\n    href,\n    state\n  } = props;\n  const path = typeof href === \"function\" ? href({\n    navigate,\n    location\n  }) : href;\n  navigate(path, {\n    replace: true,\n    state\n  });\n  return null;\n}\n\n/**\n * This is mock of the eventual Solid 2.0 primitive. It is not fully featured.\n */\n\n/**\n * As `createAsync` and `createAsyncStore` are wrappers for `createResource`,\n * this type allows to support `latest` field for these primitives.\n * It will be removed in the future.\n */\n\nfunction createAsync(fn, options) {\n  let resource;\n  let prev = () => !resource || resource.state === \"unresolved\" ? undefined : resource.latest;\n  [resource] = createResource(() => subFetch(fn, untrack(prev)), v => v, options);\n  const resultAccessor = () => resource();\n  Object.defineProperty(resultAccessor, 'latest', {\n    get() {\n      return resource.latest;\n    }\n  });\n  return resultAccessor;\n}\nfunction createAsyncStore(fn, options = {}) {\n  let resource;\n  let prev = () => !resource || resource.state === \"unresolved\" ? undefined : unwrap(resource.latest);\n  [resource] = createResource(() => subFetch(fn, untrack(prev)), v => v, {\n    ...options,\n    storage: init => createDeepSignal(init, options.reconcile)\n  });\n  const resultAccessor = () => resource();\n  Object.defineProperty(resultAccessor, 'latest', {\n    get() {\n      return resource.latest;\n    }\n  });\n  return resultAccessor;\n}\nfunction createDeepSignal(value, options) {\n  const [store, setStore] = createStore({\n    value: structuredClone(value)\n  });\n  return [() => store.value, v => {\n    typeof v === \"function\" && (v = v());\n    setStore(\"value\", reconcile(structuredClone(v), options));\n    return store.value;\n  }];\n}\n\n// mock promise while hydrating to prevent fetching\nclass MockPromise {\n  static all() {\n    return new MockPromise();\n  }\n  static allSettled() {\n    return new MockPromise();\n  }\n  static any() {\n    return new MockPromise();\n  }\n  static race() {\n    return new MockPromise();\n  }\n  static reject() {\n    return new MockPromise();\n  }\n  static resolve() {\n    return new MockPromise();\n  }\n  catch() {\n    return new MockPromise();\n  }\n  then() {\n    return new MockPromise();\n  }\n  finally() {\n    return new MockPromise();\n  }\n}\nfunction subFetch(fn, prev) {\n  if (isServer || !sharedConfig.context) return fn(prev);\n  const ogFetch = fetch;\n  const ogPromise = Promise;\n  try {\n    window.fetch = () => new MockPromise();\n    Promise = MockPromise;\n    return fn(prev);\n  } finally {\n    window.fetch = ogFetch;\n    Promise = ogPromise;\n  }\n}\n\nfunction redirect(url, init = 302) {\n  let responseInit;\n  let revalidate;\n  if (typeof init === \"number\") {\n    responseInit = {\n      status: init\n    };\n  } else {\n    ({\n      revalidate,\n      ...responseInit\n    } = init);\n    if (typeof responseInit.status === \"undefined\") {\n      responseInit.status = 302;\n    }\n  }\n  const headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  revalidate && headers.set(\"X-Revalidate\", revalidate.toString());\n  const response = new Response(null, {\n    ...responseInit,\n    headers: headers\n  });\n  return response;\n}\nfunction reload(init = {}) {\n  const {\n    revalidate,\n    ...responseInit\n  } = init;\n  const headers = new Headers(responseInit.headers);\n  revalidate && headers.set(\"X-Revalidate\", revalidate.toString());\n  return new Response(null, {\n    ...responseInit,\n    headers\n  });\n}\nfunction json(data, init = {}) {\n  const {\n    revalidate,\n    ...responseInit\n  } = init;\n  const headers = new Headers(responseInit.headers);\n  revalidate && headers.set(\"X-Revalidate\", revalidate.toString());\n  headers.set(\"Content-Type\", \"application/json\");\n  const response = new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers\n  });\n  response.customBody = () => data;\n  return response;\n}\n\nexport { A, HashRouter, MemoryRouter, Navigate, Route, Router, StaticRouter, mergeSearchString as _mergeSearchString, action, cache, createAsync, createAsyncStore, createBeforeLeave, createMemoryHistory, createRouter, json, keepDepth, notifyIfNotBlocked, redirect, reload, revalidate, saveCurrentDepth, useAction, useBeforeLeave, useCurrentMatches, useHref, useIsRouting, useLocation, useMatch, useNavigate, useParams, usePreloadRoute, useResolvedPath, useSearchParams, useSubmission, useSubmissions };\n", "import { createContext, ParentProps, useContext } from \"solid-js\";\n\nconst StateContext = createContext();\n\ninterface StateProviderProps extends ParentProps {\n  store: any;\n}\n\nexport function StateProvider(props: StateProviderProps) {\n  return (\n    <StateContext.Provider value={props.store}>\n      {props.children}\n    </StateContext.Provider>\n  );\n}\n\nexport function useState() {\n  const stateContext = useContext(StateContext);\n  if (!stateContext) {\n    throw new Error(\"useState: cannot find a StateContext\");\n  }\n  return stateContext;\n}\n", "/**\n * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js\n *\n * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes\n * during build.\n * @param {number} code\n */\nexport function formatProdErrorMessage(code: number) {\n  return `Minified Redux error #${code}; visit https://redux.js.org/Errors?code=${code} for the full message or ` + 'use the non-minified dev environment for full errors. ';\n}", "declare global {\n  interface SymbolConstructor {\n    readonly observable: symbol;\n  }\n}\nconst $$observable = /* #__PURE__ */(() => typeof Symbol === 'function' && Symbol.observable || '@@observable')();\nexport default $$observable;", "/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\n\nconst randomString = () => Math.random().toString(36).substring(7).split('').join('.');\nconst ActionTypes = {\n  INIT: `@@redux/INIT${/* #__PURE__ */randomString()}`,\n  REPLACE: `@@redux/REPLACE${/* #__PURE__ */randomString()}`,\n  PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`\n};\nexport default ActionTypes;", "/**\n * @param obj The object to inspect.\n * @returns True if the argument appears to be a plain object.\n */\nexport default function isPlainObject(obj: any): obj is object {\n  if (typeof obj !== 'object' || obj === null) return false;\n  let proto = obj;\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n  return Object.getPrototypeOf(obj) === proto || Object.getPrototypeOf(obj) === null;\n}", "// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of\nexport function miniKindOf(val: any): string {\n  if (val === void 0) return 'undefined';\n  if (val === null) return 'null';\n  const type = typeof val;\n  switch (type) {\n    case 'boolean':\n    case 'string':\n    case 'number':\n    case 'symbol':\n    case 'function':\n      {\n        return type;\n      }\n  }\n  if (Array.isArray(val)) return 'array';\n  if (isDate(val)) return 'date';\n  if (isError(val)) return 'error';\n  const constructorName = ctorName(val);\n  switch (constructorName) {\n    case 'Symbol':\n    case 'Promise':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Map':\n    case 'Set':\n      return constructorName;\n  }\n\n  // other\n  return Object.prototype.toString.call(val).slice(8, -1).toLowerCase().replace(/\\s/g, '');\n}\nfunction ctorName(val: any): string | null {\n  return typeof val.constructor === 'function' ? val.constructor.name : null;\n}\nfunction isError(val: any) {\n  return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';\n}\nfunction isDate(val: any) {\n  if (val instanceof Date) return true;\n  return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';\n}\nexport function kindOf(val: any) {\n  let typeOfVal: string = typeof val;\n  if (process.env.NODE_ENV !== 'production') {\n    typeOfVal = miniKindOf(val);\n  }\n  return typeOfVal;\n}", "import { formatProdErrorMessage as _formatProdErrorMessage13 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage12 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage11 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage10 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage9 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage8 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage7 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage6 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage5 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage4 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage3 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage2 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage } from \"src/utils/formatProdErrorMessage\";\nimport $$observable from './utils/symbol-observable';\nimport { Store, StoreEnhancer, Dispatch, Observer, ListenerCallback, UnknownIfNonSpecific } from './types/store';\nimport { Action } from './types/actions';\nimport { Reducer } from './types/reducers';\nimport ActionTypes from './utils/actionTypes';\nimport isPlainObject from './utils/isPlainObject';\nimport { kindOf } from './utils/kindOf';\n\n/**\n * @deprecated\n *\n * **We recommend using the `configureStore` method\n * of the `@reduxjs/toolkit` package**, which replaces `createStore`.\n *\n * Redux Toolkit is our recommended approach for writing Redux logic today,\n * including store setup, reducers, data fetching, and more.\n *\n * **For more details, please read this Redux docs page:**\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * `configureStore` from Redux Toolkit is an improved version of `createStore` that\n * simplifies setup and helps avoid common bugs.\n *\n * You should not be using the `redux` core package by itself today, except for learning purposes.\n * The `createStore` method from the core `redux` package will not be removed, but we encourage\n * all users to migrate to using Redux Toolkit for all Redux code.\n *\n * If you want to use `createStore` without this visual deprecation warning, use\n * the `legacy_createStore` import instead:\n *\n * `import { legacy_createStore as createStore} from 'redux'`\n *\n */\nexport function createStore<S, A extends Action, Ext extends {} = {}, StateExt extends {} = {}>(reducer: Reducer<S, A>, enhancer?: StoreEnhancer<Ext, StateExt>): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext;\n/**\n * @deprecated\n *\n * **We recommend using the `configureStore` method\n * of the `@reduxjs/toolkit` package**, which replaces `createStore`.\n *\n * Redux Toolkit is our recommended approach for writing Redux logic today,\n * including store setup, reducers, data fetching, and more.\n *\n * **For more details, please read this Redux docs page:**\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * `configureStore` from Redux Toolkit is an improved version of `createStore` that\n * simplifies setup and helps avoid common bugs.\n *\n * You should not be using the `redux` core package by itself today, except for learning purposes.\n * The `createStore` method from the core `redux` package will not be removed, but we encourage\n * all users to migrate to using Redux Toolkit for all Redux code.\n *\n * If you want to use `createStore` without this visual deprecation warning, use\n * the `legacy_createStore` import instead:\n *\n * `import { legacy_createStore as createStore} from 'redux'`\n *\n */\nexport function createStore<S, A extends Action, Ext extends {} = {}, StateExt extends {} = {}, PreloadedState = S>(reducer: Reducer<S, A, PreloadedState>, preloadedState?: PreloadedState | undefined, enhancer?: StoreEnhancer<Ext, StateExt>): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext;\nexport function createStore<S, A extends Action, Ext extends {} = {}, StateExt extends {} = {}, PreloadedState = S>(reducer: Reducer<S, A, PreloadedState>, preloadedState?: PreloadedState | StoreEnhancer<Ext, StateExt> | undefined, enhancer?: StoreEnhancer<Ext, StateExt>): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext {\n  if (typeof reducer !== 'function') {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(2) : `Expected the root reducer to be a function. Instead, received: '${kindOf(reducer)}'`);\n  }\n  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(0) : 'It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.');\n  }\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = (preloadedState as StoreEnhancer<Ext, StateExt>);\n    preloadedState = undefined;\n  }\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage3(1) : `Expected the enhancer to be a function. Instead, received: '${kindOf(enhancer)}'`);\n    }\n    return enhancer(createStore)(reducer, (preloadedState as PreloadedState | undefined));\n  }\n  let currentReducer = reducer;\n  let currentState: S | PreloadedState | undefined = (preloadedState as PreloadedState | undefined);\n  let currentListeners: Map<number, ListenerCallback> | null = new Map();\n  let nextListeners = currentListeners;\n  let listenerIdCounter = 0;\n  let isDispatching = false;\n\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = new Map();\n      currentListeners.forEach((listener, key) => {\n        nextListeners.set(key, listener);\n      });\n    }\n  }\n\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns The current state tree of your application.\n   */\n  function getState(): S {\n    if (isDispatching) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage4(3) : 'You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n    }\n    return (currentState as S);\n  }\n\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param listener A callback to be invoked on every dispatch.\n   * @returns A function to remove this change listener.\n   */\n  function subscribe(listener: () => void) {\n    if (typeof listener !== 'function') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage5(4) : `Expected the listener to be a function. Instead, received: '${kindOf(listener)}'`);\n    }\n    if (isDispatching) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage6(5) : 'You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');\n    }\n    let isSubscribed = true;\n    ensureCanMutateNextListeners();\n    const listenerId = listenerIdCounter++;\n    nextListeners.set(listenerId, listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n      if (isDispatching) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage7(6) : 'You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');\n      }\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      nextListeners.delete(listenerId);\n      currentListeners = null;\n    };\n  }\n\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n  function dispatch(action: A) {\n    if (!isPlainObject(action)) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage8(7) : `Actions must be plain objects. Instead, the actual type was: '${kindOf(action)}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);\n    }\n    if (typeof action.type === 'undefined') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage9(8) : 'Actions may not have an undefined \"type\" property. You may have misspelled an action type string constant.');\n    }\n    if (typeof action.type !== 'string') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage10(17) : `Action \"type\" property must be a string. Instead, the actual type was: '${kindOf(action.type)}'. Value was: '${action.type}' (stringified)`);\n    }\n    if (isDispatching) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage11(9) : 'Reducers may not dispatch actions.');\n    }\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n    const listeners = currentListeners = nextListeners;\n    listeners.forEach(listener => {\n      listener();\n    });\n    return action;\n  }\n\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param nextReducer The reducer for the store to use instead.\n   */\n  function replaceReducer(nextReducer: Reducer<S, A>): void {\n    if (typeof nextReducer !== 'function') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage12(10) : `Expected the nextReducer to be a function. Instead, received: '${kindOf(nextReducer)}`);\n    }\n    currentReducer = ((nextReducer as unknown) as Reducer<S, A, PreloadedState>);\n\n    // This action has a similar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n    dispatch(({\n      type: ActionTypes.REPLACE\n    } as A));\n  }\n\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n  function observable() {\n    const outerSubscribe = subscribe;\n    return {\n      /**\n       * The minimal observable subscription method.\n       * @param observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe(observer: unknown) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage13(11) : `Expected the observer to be an object. Instead, received: '${kindOf(observer)}'`);\n        }\n        function observeState() {\n          const observerAsObserver = (observer as Observer<S>);\n          if (observerAsObserver.next) {\n            observerAsObserver.next(getState());\n          }\n        }\n        observeState();\n        const unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe\n        };\n      },\n      [$$observable]() {\n        return this;\n      }\n    };\n  }\n\n  // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n  dispatch(({\n    type: ActionTypes.INIT\n  } as A));\n  const store = (({\n    dispatch: (dispatch as Dispatch<A>),\n    subscribe,\n    getState,\n    replaceReducer,\n    [$$observable]: observable\n  } as unknown) as Store<S, A, StateExt> & Ext);\n  return store;\n}\n\n/**\n * Creates a Redux store that holds the state tree.\n *\n * **We recommend using `configureStore` from the\n * `@reduxjs/toolkit` package**, which replaces `createStore`:\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\nexport function legacy_createStore<S, A extends Action, Ext extends {} = {}, StateExt extends {} = {}>(reducer: Reducer<S, A>, enhancer?: StoreEnhancer<Ext, StateExt>): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext;\n/**\n * Creates a Redux store that holds the state tree.\n *\n * **We recommend using `configureStore` from the\n * `@reduxjs/toolkit` package**, which replaces `createStore`:\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\nexport function legacy_createStore<S, A extends Action, Ext extends {} = {}, StateExt extends {} = {}, PreloadedState = S>(reducer: Reducer<S, A, PreloadedState>, preloadedState?: PreloadedState | undefined, enhancer?: StoreEnhancer<Ext, StateExt>): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext;\nexport function legacy_createStore<S, A extends Action, Ext extends {} = {}, StateExt extends {} = {}, PreloadedState = S>(reducer: Reducer<S, A>, preloadedState?: PreloadedState | StoreEnhancer<Ext, StateExt> | undefined, enhancer?: StoreEnhancer<Ext, StateExt>): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext {\n  return createStore(reducer, (preloadedState as any), enhancer);\n}", "/**\n * Prints a warning in the console if it exists.\n *\n * @param message The warning message.\n */\nexport default function warning(message: string): void {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n}", "import { formatProdErrorMessage as _formatProdErrorMessage3 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage2 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage } from \"src/utils/formatProdErrorMessage\";\nimport { Action } from './types/actions';\nimport { ActionFromReducersMapObject, PreloadedStateShapeFromReducersMapObject, Reducer, StateFromReducersMapObject } from './types/reducers';\nimport ActionTypes from './utils/actionTypes';\nimport isPlainObject from './utils/isPlainObject';\nimport warning from './utils/warning';\nimport { kindOf } from './utils/kindOf';\nfunction getUnexpectedStateShapeWarningMessage(inputState: object, reducers: {\n  [key: string]: Reducer<any, any, any>;\n}, action: Action, unexpectedKeyCache: {\n  [key: string]: true;\n}) {\n  const reducerKeys = Object.keys(reducers);\n  const argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n  if (!isPlainObject(inputState)) {\n    return `The ${argumentName} has unexpected type of \"${kindOf(inputState)}\". Expected argument to be an object with the following ` + `keys: \"${reducerKeys.join('\", \"')}\"`;\n  }\n  const unexpectedKeys = Object.keys(inputState).filter(key => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]);\n  unexpectedKeys.forEach(key => {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === ActionTypes.REPLACE) return;\n  if (unexpectedKeys.length > 0) {\n    return `Unexpected ${unexpectedKeys.length > 1 ? 'keys' : 'key'} ` + `\"${unexpectedKeys.join('\", \"')}\" found in ${argumentName}. ` + `Expected to find one of the known reducer keys instead: ` + `\"${reducerKeys.join('\", \"')}\". Unexpected keys will be ignored.`;\n  }\n}\nfunction assertReducerShape(reducers: {\n  [key: string]: Reducer<any, any, any>;\n}) {\n  Object.keys(reducers).forEach(key => {\n    const reducer = reducers[key];\n    const initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n    if (typeof initialState === 'undefined') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(12) : `The slice reducer for key \"${key}\" returned undefined during initialization. ` + `If the state passed to the reducer is undefined, you must ` + `explicitly return the initial state. The initial state may ` + `not be undefined. If you don't want to set a value for this reducer, ` + `you can use null instead of undefined.`);\n    }\n    if (typeof reducer(undefined, {\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\n    }) === 'undefined') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(13) : `The slice reducer for key \"${key}\" returned undefined when probed with a random type. ` + `Don't try to handle '${ActionTypes.INIT}' or other actions in \"redux/*\" ` + `namespace. They are considered private. Instead, you must return the ` + `current state for any unknown actions, unless it is undefined, ` + `in which case you must return the initial state, regardless of the ` + `action type. The initial state may not be undefined, but can be null.`);\n    }\n  });\n}\n\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @template S Combined state object type.\n *\n * @param reducers An object whose values correspond to different reducer\n *   functions that need to be combined into one. One handy way to obtain it\n *   is to use `import * as reducers` syntax. The reducers may never\n *   return undefined for any action. Instead, they should return their\n *   initial state if the state passed to them was undefined, and the current\n *   state for any unrecognized action.\n *\n * @returns A reducer function that invokes every reducer inside the passed\n *   object, and builds a state object with the same shape.\n */\nexport default function combineReducers<M>(reducers: M): M[keyof M] extends Reducer<any, any, any> | undefined ? Reducer<StateFromReducersMapObject<M>, ActionFromReducersMapObject<M>, Partial<PreloadedStateShapeFromReducersMapObject<M>>> : never;\nexport default function combineReducers(reducers: {\n  [key: string]: Reducer<any, any, any>;\n}) {\n  const reducerKeys = Object.keys(reducers);\n  const finalReducers: {\n    [key: string]: Reducer<any, any, any>;\n  } = {};\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i];\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(`No reducer provided for key \"${key}\"`);\n      }\n    }\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n  const finalReducerKeys = Object.keys(finalReducers);\n\n  // This is used to make sure we don't warn about the same\n  // keys multiple times.\n  let unexpectedKeyCache: {\n    [key: string]: true;\n  };\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {};\n  }\n  let shapeAssertionError: unknown;\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n  return function combination(state: StateFromReducersMapObject<typeof reducers> = {}, action: Action) {\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n    let hasChanged = false;\n    const nextState: StateFromReducersMapObject<typeof reducers> = {};\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i];\n      const reducer = finalReducers[key];\n      const previousStateForKey = state[key];\n      const nextStateForKey = reducer(previousStateForKey, action);\n      if (typeof nextStateForKey === 'undefined') {\n        const actionType = action && action.type;\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage3(14) : `When called with an action of type ${actionType ? `\"${String(actionType)}\"` : '(unknown type)'}, the slice reducer for key \"${key}\" returned undefined. ` + `To ignore an action, you must explicitly return the previous state. ` + `If you want this reducer to hold no value, you can return null instead of undefined.`);\n      }\n      nextState[key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;\n    return hasChanged ? nextState : state;\n  };\n}", "import { formatProdErrorMessage as _formatProdErrorMessage } from \"src/utils/formatProdErrorMessage\";\nimport { Dispatch } from './types/store';\nimport { ActionCreator, ActionCreatorsMapObject, Action } from './types/actions';\nimport { kindOf } from './utils/kindOf';\nfunction bindActionCreator<A extends Action>(actionCreator: ActionCreator<A>, dispatch: Dispatch<A>) {\n  return function (this: any, ...args: any[]) {\n    return dispatch(actionCreator.apply(this, args));\n  };\n}\n\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use `import * as`\n * syntax. You may also pass a single function.\n *\n * @param dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\nexport default function bindActionCreators<A, C extends ActionCreator<A>>(actionCreator: C, dispatch: Dispatch): C;\nexport default function bindActionCreators<A extends ActionCreator<any>, B extends ActionCreator<any>>(actionCreator: A, dispatch: Dispatch): B;\nexport default function bindActionCreators<A, M extends ActionCreatorsMapObject<A>>(actionCreators: M, dispatch: Dispatch): M;\nexport default function bindActionCreators<M extends ActionCreatorsMapObject, N extends ActionCreatorsMapObject>(actionCreators: M, dispatch: Dispatch): N;\nexport default function bindActionCreators(actionCreators: ActionCreator<any> | ActionCreatorsMapObject, dispatch: Dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(16) : `bindActionCreators expected an object or a function, but instead received: '${kindOf(actionCreators)}'. ` + `Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`);\n  }\n  const boundActionCreators: ActionCreatorsMapObject = {};\n  for (const key in actionCreators) {\n    const actionCreator = actionCreators[key];\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n  return boundActionCreators;\n}", "type Func<T extends any[], R> = (...a: T) => R;\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for the\n * resulting composite function.\n *\n * @param funcs The functions to compose.\n * @returns A function obtained by composing the argument functions from right\n *   to left. For example, `compose(f, g, h)` is identical to doing\n *   `(...args) => f(g(h(...args)))`.\n */\nexport default function compose(): <R>(a: R) => R;\nexport default function compose<F extends Function>(f: F): F;\n\n/* two functions */\nexport default function compose<A, T extends any[], R>(f1: (a: A) => R, f2: Func<T, A>): Func<T, R>;\n\n/* three functions */\nexport default function compose<A, B, T extends any[], R>(f1: (b: B) => R, f2: (a: A) => B, f3: Func<T, A>): Func<T, R>;\n\n/* four functions */\nexport default function compose<A, B, C, T extends any[], R>(f1: (c: C) => R, f2: (b: B) => C, f3: (a: A) => B, f4: Func<T, A>): Func<T, R>;\n\n/* rest */\nexport default function compose<R>(f1: (a: any) => R, ...funcs: Function[]): (...args: any[]) => R;\nexport default function compose<R>(...funcs: Function[]): (...args: any[]) => R;\nexport default function compose(...funcs: Function[]) {\n  if (funcs.length === 0) {\n    // infer the argument type so it is usable in inference down the line\n    return <T,>(arg: T) => arg;\n  }\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n  return funcs.reduce((a, b) => (...args: any) => a(b(...args)));\n}", "import { formatProdErrorMessage as _formatProdErrorMessage } from \"src/utils/formatProdErrorMessage\";\nimport compose from './compose';\nimport { Middleware, MiddlewareAPI } from './types/middleware';\nimport { StoreEnhancer, Dispatch } from './types/store';\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param middlewares The middleware chain to be applied.\n * @returns A store enhancer applying the middleware.\n *\n * @template Ext Dispatch signature added by a middleware.\n * @template S The type of the state supported by a middleware.\n */\nexport default function applyMiddleware(): StoreEnhancer;\nexport default function applyMiddleware<Ext1, S>(middleware1: Middleware<Ext1, S, any>): StoreEnhancer<{\n  dispatch: Ext1;\n}>;\nexport default function applyMiddleware<Ext1, Ext2, S>(middleware1: Middleware<Ext1, S, any>, middleware2: Middleware<Ext2, S, any>): StoreEnhancer<{\n  dispatch: Ext1 & Ext2;\n}>;\nexport default function applyMiddleware<Ext1, Ext2, Ext3, S>(middleware1: Middleware<Ext1, S, any>, middleware2: Middleware<Ext2, S, any>, middleware3: Middleware<Ext3, S, any>): StoreEnhancer<{\n  dispatch: Ext1 & Ext2 & Ext3;\n}>;\nexport default function applyMiddleware<Ext1, Ext2, Ext3, Ext4, S>(middleware1: Middleware<Ext1, S, any>, middleware2: Middleware<Ext2, S, any>, middleware3: Middleware<Ext3, S, any>, middleware4: Middleware<Ext4, S, any>): StoreEnhancer<{\n  dispatch: Ext1 & Ext2 & Ext3 & Ext4;\n}>;\nexport default function applyMiddleware<Ext1, Ext2, Ext3, Ext4, Ext5, S>(middleware1: Middleware<Ext1, S, any>, middleware2: Middleware<Ext2, S, any>, middleware3: Middleware<Ext3, S, any>, middleware4: Middleware<Ext4, S, any>, middleware5: Middleware<Ext5, S, any>): StoreEnhancer<{\n  dispatch: Ext1 & Ext2 & Ext3 & Ext4 & Ext5;\n}>;\nexport default function applyMiddleware<Ext, S = any>(...middlewares: Middleware<any, S, any>[]): StoreEnhancer<{\n  dispatch: Ext;\n}>;\nexport default function applyMiddleware(...middlewares: Middleware[]): StoreEnhancer<any> {\n  return createStore => (reducer, preloadedState) => {\n    const store = createStore(reducer, preloadedState);\n    let dispatch: Dispatch = () => {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(15) : 'Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n    };\n    const middlewareAPI: MiddlewareAPI = {\n      getState: store.getState,\n      dispatch: (action, ...args) => dispatch(action, ...args)\n    };\n    const chain = middlewares.map(middleware => middleware(middlewareAPI));\n    dispatch = compose<typeof dispatch>(...chain)(store.dispatch);\n    return {\n      ...store,\n      dispatch\n    };\n  };\n}", "import { Action } from '../types/actions';\nimport isPlainObject from './isPlainObject';\nexport default function isAction(action: unknown): action is Action<string> {\n  return isPlainObject(action) && 'type' in action && typeof (action as Record<'type', unknown>).type === 'string';\n}", "// Should be no imports here!\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: unique symbol = Symbol.for(\"immer-nothing\")\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = Symbol.for(\"immer-draftable\")\n\nexport const DRAFT_STATE: unique symbol = Symbol.for(\"immer-state\")\n", "export const errors =\n\tprocess.env.NODE_ENV !== \"production\"\n\t\t? [\n\t\t\t\t// All error codes, starting by 0:\n\t\t\t\tfunction(plugin: string) {\n\t\t\t\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t\t\t\t},\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t\t\t\t},\n\t\t\t\t\"This object has been frozen and should not be mutated\",\n\t\t\t\tfunction(data: any) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\t\t\t\tdata\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\t\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t\t\t\t\"Immer forbids circular references\",\n\t\t\t\t\"The first or second argument to `produce` must be a function\",\n\t\t\t\t\"The third argument to `produce` must be a function or undefined\",\n\t\t\t\t\"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t\t\t\t\"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `'current' expects a draft, got: ${thing}`\n\t\t\t\t},\n\t\t\t\t\"Object.defineProperty() cannot be used on an Immer draft\",\n\t\t\t\t\"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t\t\t\t\"Immer only supports deleting array indices\",\n\t\t\t\t\"Immer only supports setting array indices and the 'length' property\",\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `'original' expects a draft, got: ${thing}`\n\t\t\t\t}\n\t\t\t\t// Note: if more errors are added, the errorOffset in Patches.ts should be increased\n\t\t\t\t// See Patches.ts for additional errors\n\t\t  ]\n\t\t: []\n\nexport function die(error: number, ...args: any[]): never {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tconst e = errors[error]\n\t\tconst msg = typeof e === \"function\" ? e.apply(null, args as any) : e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}. Full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n", "import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\tArchType,\n\tdie,\n\tStrictMode\n} from \"../internal\"\n\nexport const getPrototypeOf = Object.getPrototypeOf\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor?.[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nconst objectCtorString = Object.prototype.constructor.toString()\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = getPrototypeOf(value)\n\tif (proto === null) {\n\t\treturn true\n\t}\n\tconst Ctor =\n\t\tObject.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n\n\tif (Ctor === Object) return true\n\n\treturn (\n\t\ttypeof Ctor == \"function\" &&\n\t\tFunction.toString.call(Ctor) === objectCtorString\n\t)\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(15, value)\n\treturn value[DRAFT_STATE].base_\n}\n\n/**\n * Each iterates a map, set or array.\n * Or, if any other kind of object, all of its own properties.\n * Regardless whether they are enumerable or symbols\n */\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void\n): void\nexport function each(obj: any, iter: any) {\n\tif (getArchtype(obj) === ArchType.Object) {\n\t\tReflect.ownKeys(obj).forEach(key => {\n\t\t\titer(key, obj[key], obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): ArchType {\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_\n\t\t: Array.isArray(thing)\n\t\t? ArchType.Array\n\t\t: isMap(thing)\n\t\t? ArchType.Map\n\t\t: isSet(thing)\n\t\t? ArchType.Set\n\t\t: ArchType.Object\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === ArchType.Map\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === ArchType.Map ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === ArchType.Map) thing.set(propOrOldValue, value)\n\telse if (t === ArchType.Set) {\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any, strict: StrictMode) {\n\tif (isMap(base)) {\n\t\treturn new Map(base)\n\t}\n\tif (isSet(base)) {\n\t\treturn new Set(base)\n\t}\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\n\tconst isPlain = isPlainObject(base)\n\n\tif (strict === true || (strict === \"class_only\" && !isPlain)) {\n\t\t// Perform a strict copy\n\t\tconst descriptors = Object.getOwnPropertyDescriptors(base)\n\t\tdelete descriptors[DRAFT_STATE as any]\n\t\tlet keys = Reflect.ownKeys(descriptors)\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst key: any = keys[i]\n\t\t\tconst desc = descriptors[key]\n\t\t\tif (desc.writable === false) {\n\t\t\t\tdesc.writable = true\n\t\t\t\tdesc.configurable = true\n\t\t\t}\n\t\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t\t// with libraries that trap values, like mobx or vue\n\t\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\t\tif (desc.get || desc.set)\n\t\t\t\tdescriptors[key] = {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\t\tvalue: base[key]\n\t\t\t\t}\n\t\t}\n\t\treturn Object.create(getPrototypeOf(base), descriptors)\n\t} else {\n\t\t// perform a sloppy copy\n\t\tconst proto = getPrototypeOf(base)\n\t\tif (proto !== null && isPlain) {\n\t\t\treturn {...base} // assumption: better inner class optimization than the assign below\n\t\t}\n\t\tconst obj = Object.create(proto)\n\t\treturn Object.assign(obj, base)\n\t}\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep)\n\t\t// See #590, don't recurse into non-enumerable / Symbol properties when freezing\n\t\t// So use Object.entries (only string-like, enumerables) instead of each()\n\t\tObject.entries(obj).forEach(([key, value]) => freeze(value, true))\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\treturn Object.isFrozen(obj)\n}\n", "import {\n\tImmerState,\n\tPatch,\n\tDrafted,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tArchType,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\tbase: any,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: readonly Patch[]): T\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(0, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: ArchType.Map\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: ArchType.Set\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n", "import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tArchType,\n\tgetPlugin\n} from \"../internal\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (state.type_ === ArchType.Object || state.type_ === ArchType.Array)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n", "import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tArchType,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE].base_,\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(value, (key, childValue) =>\n\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path)\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result = state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// To preserve insertion order in all cases we then clear the set\n\t\t// And we let finalizeProperty know it needs to re-add non-draft children back to the target\n\t\tlet resultEach = result\n\t\tlet isSet = false\n\t\tif (state.type_ === ArchType.Set) {\n\t\t\tresultEach = new Set(result)\n\t\t\tresult.clear()\n\t\t\tisSet = true\n\t\t}\n\t\teach(resultEach, (key, childValue) =>\n\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path, isSet)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath,\n\ttargetIsSet?: boolean\n) {\n\tif (process.env.NODE_ENV !== \"production\" && childValue === targetObject)\n\t\tdie(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ArchType.Set && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t} else if (targetIsSet) {\n\t\ttargetObject.add(childValue)\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// Immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\t// Per #590, we never freeze symbolic properties. Just to make sure don't accidentally interfere\n\t\t// with other frameworks.\n\t\tif (\n\t\t\t(!parentState || !parentState.scope_.parent_) &&\n\t\t\ttypeof prop !== \"symbol\" &&\n\t\t\tObject.prototype.propertyIsEnumerable.call(targetObject, prop)\n\t\t)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\t// we never freeze for a non-root scope; as it would prevent pruning for drafts inside wrapping objects\n\tif (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n", "import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tgetPrototypeOf,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tArchType,\n\tImmerScope\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: ArchType.Object\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: ArchType.Array\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ArchType.Array : (ArchType.Object as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(value, state))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\n\t\tif (\n\t\t\t(state.copy_![prop] === value &&\n\t\t\t\t// special case: handle new props with value 'undefined'\n\t\t\t\t(value !== undefined || prop in state.copy_)) ||\n\t\t\t// special case: NaN\n\t\t\t(Number.isNaN(value) && Number.isNaN(state.copy_![prop]))\n\t\t)\n\t\t\treturn true\n\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\tif (state.copy_) {\n\t\t\tdelete state.copy_[prop]\n\t\t}\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ArchType.Array || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (process.env.NODE_ENV !== \"production\" && isNaN(parseInt(prop as any)))\n\t\tdie(13)\n\t// @ts-ignore\n\treturn arrayTraps.set!.call(this, state, prop, undefined)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (\n\t\tprocess.env.NODE_ENV !== \"production\" &&\n\t\tprop !== \"length\" &&\n\t\tisNaN(parseInt(prop as any))\n\t)\n\t\tdie(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {\n\tbase_: any\n\tcopy_: any\n\tscope_: ImmerScope\n}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(\n\t\t\tstate.base_,\n\t\t\tstate.scope_.immer_.useStrictShallowCopy_\n\t\t)\n\t}\n}\n", "import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport type StrictMode = boolean | \"class_only\";\n\nexport class Immer implements ProducersFns {\n\tautoFreeze_: boolean = true\n\tuseStrictShallowCopy_: StrictMode = false\n\n\tconstructor(config?: {\n\t\tautoFreeze?: boolean\n\t\tuseStrictShallowCopy?: StrictMode\n\t}) {\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t\tif (typeof config?.useStrictShallowCopy === \"boolean\")\n\t\t\tthis.setUseStrictShallowCopy(config!.useStrictShallowCopy)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce: IProduce = (base: any, recipe?: any, patchListener?: any) => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === undefined) result = base\n\t\t\tif (result === NOTHING) result = undefined\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\tif (patchListener) {\n\t\t\t\tconst p: Patch[] = []\n\t\t\t\tconst ip: Patch[] = []\n\t\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip)\n\t\t\t\tpatchListener(p, ip)\n\t\t\t}\n\t\t\treturn result\n\t\t} else die(1, base)\n\t}\n\n\tproduceWithPatches: IProduceWithPatches = (base: any, recipe?: any): any => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => base(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst result = this.produce(base, recipe, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\t\treturn [result, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (!state || !state.isManual_) die(9)\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to enable strict shallow copy.\n\t *\n\t * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n\t */\n\tsetUseStrictShallowCopy(value: StrictMode) {\n\t\tthis.useStrictShallowCopy_ = value\n\t}\n\n\tapplyPatches<T extends Objectish>(base: T, patches: readonly Patch[]): T {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// If there was a patch that replaced the entire state, start from the\n\t\t// patch after that.\n\t\tif (i > -1) {\n\t\t\tpatches = patches.slice(i + 1)\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches)\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: createProxyProxy(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n", "import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tisFrozen\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(10, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value) || isFrozen(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tif (state) {\n\t\tif (!state.modified_) return state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_)\n\t} else {\n\t\tcopy = shallowCopy(value, true)\n\t}\n\t// recurse\n\teach(copy, (key, childValue) => {\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\tif (state) {\n\t\tstate.finalized_ = false\n\t}\n\treturn copy\n}\n", "import {immerable} from \"../immer\"\nimport {\n\tImmerState,\n\tPatch,\n\tSetState,\n\tProxyArrayState,\n\tMapState,\n\tProxyObjectState,\n\tPatchPath,\n\tget,\n\teach,\n\thas,\n\tgetArchtype,\n\tgetPrototypeOf,\n\tisSet,\n\tisMap,\n\tloadPlugin,\n\tArchType,\n\tdie,\n\tisDraft,\n\tisDraftable,\n\tNOTHING,\n\terrors\n} from \"../internal\"\n\nexport function enablePatches() {\n\tconst errorOffset = 16\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\terrors.push(\n\t\t\t'Sets cannot have \"replace\" patches.',\n\t\t\tfunction(op: string) {\n\t\t\t\treturn \"Unsupported patch operation: \" + op\n\t\t\t},\n\t\t\tfunction(path: string) {\n\t\t\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t\t\t},\n\t\t\t\"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n\t\t)\n\t}\n\n\tconst REPLACE = \"replace\"\n\tconst ADD = \"add\"\n\tconst REMOVE = \"remove\"\n\n\tfunction generatePatches_(\n\t\tstate: ImmerState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tswitch (state.type_) {\n\t\t\tcase ArchType.Object:\n\t\t\tcase ArchType.Map:\n\t\t\t\treturn generatePatchesFromAssigned(\n\t\t\t\t\tstate,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t\tcase ArchType.Array:\n\t\t\t\treturn generateArrayPatches(state, basePath, patches, inversePatches)\n\t\t\tcase ArchType.Set:\n\t\t\t\treturn generateSetPatches(\n\t\t\t\t\t(state as any) as SetState,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t}\n\t}\n\n\tfunction generateArrayPatches(\n\t\tstate: ProxyArrayState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, assigned_} = state\n\t\tlet copy_ = state.copy_!\n\n\t\t// Reduce complexity by ensuring `base` is never longer.\n\t\tif (copy_.length < base_.length) {\n\t\t\t// @ts-ignore\n\t\t\t;[base_, copy_] = [copy_, base_]\n\t\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t\t}\n\n\t\t// Process replaced indices.\n\t\tfor (let i = 0; i < base_.length; i++) {\n\t\t\tif (assigned_[i] && copy_[i] !== base_[i]) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t\t})\n\t\t\t\tinversePatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(base_[i])\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\t// Process added indices.\n\t\tfor (let i = base_.length; i < copy_.length; i++) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: ADD,\n\t\t\t\tpath,\n\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t})\n\t\t}\n\t\tfor (let i = copy_.length - 1; base_.length <= i; --i) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tinversePatches.push({\n\t\t\t\top: REMOVE,\n\t\t\t\tpath\n\t\t\t})\n\t\t}\n\t}\n\n\t// This is used for both Map objects and normal objects.\n\tfunction generatePatchesFromAssigned(\n\t\tstate: MapState | ProxyObjectState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tconst {base_, copy_} = state\n\t\teach(state.assigned_!, (key, assignedValue) => {\n\t\t\tconst origValue = get(base_, key)\n\t\t\tconst value = get(copy_!, key)\n\t\t\tconst op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD\n\t\t\tif (origValue === value && op === REPLACE) return\n\t\t\tconst path = basePath.concat(key as any)\n\t\t\tpatches.push(op === REMOVE ? {op, path} : {op, path, value})\n\t\t\tinversePatches.push(\n\t\t\t\top === ADD\n\t\t\t\t\t? {op: REMOVE, path}\n\t\t\t\t\t: op === REMOVE\n\t\t\t\t\t? {op: ADD, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t\t\t: {op: REPLACE, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t)\n\t\t})\n\t}\n\n\tfunction generateSetPatches(\n\t\tstate: SetState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, copy_} = state\n\n\t\tlet i = 0\n\t\tbase_.forEach((value: any) => {\n\t\t\tif (!copy_!.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t\ti = 0\n\t\tcopy_!.forEach((value: any) => {\n\t\t\tif (!base_.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t}\n\n\tfunction generateReplacementPatches_(\n\t\tbaseValue: any,\n\t\treplacement: any,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tpatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: replacement === NOTHING ? undefined : replacement\n\t\t})\n\t\tinversePatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: baseValue\n\t\t})\n\t}\n\n\tfunction applyPatches_<T>(draft: T, patches: readonly Patch[]): T {\n\t\tpatches.forEach(patch => {\n\t\t\tconst {path, op} = patch\n\n\t\t\tlet base: any = draft\n\t\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\t\tconst parentType = getArchtype(base)\n\t\t\t\tlet p = path[i]\n\t\t\t\tif (typeof p !== \"string\" && typeof p !== \"number\") {\n\t\t\t\t\tp = \"\" + p\n\t\t\t\t}\n\n\t\t\t\t// See #738, avoid prototype pollution\n\t\t\t\tif (\n\t\t\t\t\t(parentType === ArchType.Object || parentType === ArchType.Array) &&\n\t\t\t\t\t(p === \"__proto__\" || p === \"constructor\")\n\t\t\t\t)\n\t\t\t\t\tdie(errorOffset + 3)\n\t\t\t\tif (typeof base === \"function\" && p === \"prototype\")\n\t\t\t\t\tdie(errorOffset + 3)\n\t\t\t\tbase = get(base, p)\n\t\t\t\tif (typeof base !== \"object\") die(errorOffset + 2, path.join(\"/\"))\n\t\t\t}\n\n\t\t\tconst type = getArchtype(base)\n\t\t\tconst value = deepClonePatchValue(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\t\t\tconst key = path[path.length - 1]\n\t\t\tswitch (op) {\n\t\t\t\tcase REPLACE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\tdie(errorOffset)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t\t\t\t// so we use value from the cloned patch\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase ADD:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Array:\n\t\t\t\t\t\t\treturn key === \"-\"\n\t\t\t\t\t\t\t\t? base.push(value)\n\t\t\t\t\t\t\t\t: base.splice(key as any, 0, value)\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\treturn base.add(value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase REMOVE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Array:\n\t\t\t\t\t\t\treturn base.splice(key as any, 1)\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.delete(key)\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\treturn base.delete(patch.value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn delete base[key]\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tdie(errorOffset + 1, op)\n\t\t\t}\n\t\t})\n\n\t\treturn draft\n\t}\n\n\t// optimize: this is quite a performance hit, can we detect intelligently when it is needed?\n\t// E.g. auto-draft when new objects from outside are assigned and modified?\n\t// (See failing test when deepClone just returns obj)\n\tfunction deepClonePatchValue<T>(obj: T): T\n\tfunction deepClonePatchValue(obj: any) {\n\t\tif (!isDraftable(obj)) return obj\n\t\tif (Array.isArray(obj)) return obj.map(deepClonePatchValue)\n\t\tif (isMap(obj))\n\t\t\treturn new Map(\n\t\t\t\tArray.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n\t\t\t)\n\t\tif (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue))\n\t\tconst cloned = Object.create(getPrototypeOf(obj))\n\t\tfor (const key in obj) cloned[key] = deepClonePatchValue(obj[key])\n\t\tif (has(obj, immerable)) cloned[immerable] = obj[immerable]\n\t\treturn cloned\n\t}\n\n\tfunction clonePatchValueIfNeeded<T>(obj: T): T {\n\t\tif (isDraft(obj)) {\n\t\t\treturn deepClonePatchValue(obj)\n\t\t} else return obj\n\t}\n\n\tloadPlugin(\"Patches\", {\n\t\tapplyPatches_,\n\t\tgeneratePatches_,\n\t\tgenerateReplacementPatches_\n\t})\n}\n", "// types only!\nimport {\n\tImmerState,\n\tAnyMap,\n\tAnySet,\n\tMapState,\n\tSetState,\n\tDRAFT_STATE,\n\tgetCurrentScope,\n\tlatest,\n\tisDraftable,\n\tcreateProxy,\n\tloadPlugin,\n\tmarkChanged,\n\tdie,\n\tArchType,\n\teach\n} from \"../internal\"\n\nexport function enableMapSet() {\n\tclass DraftMap extends Map {\n\t\t[DRAFT_STATE]: MapState\n\n\t\tconstructor(target: AnyMap, parent?: ImmerState) {\n\t\t\tsuper()\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ArchType.Map,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tassigned_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this as any,\n\t\t\t\tisManual_: false,\n\t\t\t\trevoked_: false\n\t\t\t}\n\t\t}\n\n\t\tget size(): number {\n\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t}\n\n\t\thas(key: any): boolean {\n\t\t\treturn latest(this[DRAFT_STATE]).has(key)\n\t\t}\n\n\t\tset(key: any, value: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!latest(state).has(key) || latest(state).get(key) !== value) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t\tstate.copy_!.set(key, value)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tdelete(key: any): boolean {\n\t\t\tif (!this.has(key)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareMapCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\tif (state.base_.has(key)) {\n\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t} else {\n\t\t\t\tstate.assigned_!.delete(key)\n\t\t\t}\n\t\t\tstate.copy_!.delete(key)\n\t\t\treturn true\n\t\t}\n\n\t\tclear() {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_ = new Map()\n\t\t\t\teach(state.base_, key => {\n\t\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t\t})\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tforEach(cb: (value: any, key: any, self: any) => void, thisArg?: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tlatest(state).forEach((_value: any, key: any, _map: any) => {\n\t\t\t\tcb.call(thisArg, this.get(key), key, this)\n\t\t\t})\n\t\t}\n\n\t\tget(key: any): any {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tconst value = latest(state).get(key)\n\t\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\t\treturn value\n\t\t\t}\n\t\t\tif (value !== state.base_.get(key)) {\n\t\t\t\treturn value // either already drafted or reassigned\n\t\t\t}\n\t\t\t// despite what it looks, this creates a draft only once, see above condition\n\t\t\tconst draft = createProxy(value, state)\n\t\t\tprepareMapCopy(state)\n\t\t\tstate.copy_!.set(key, draft)\n\t\t\treturn draft\n\t\t}\n\n\t\tkeys(): IterableIterator<any> {\n\t\t\treturn latest(this[DRAFT_STATE]).keys()\n\t\t}\n\n\t\tvalues(): IterableIterator<any> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[Symbol.iterator]: () => this.values(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tentries(): IterableIterator<[any, any]> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[Symbol.iterator]: () => this.entries(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: [r.value, value]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\t[Symbol.iterator]() {\n\t\t\treturn this.entries()\n\t\t}\n\t}\n\n\tfunction proxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftMap(target, parent)\n\t}\n\n\tfunction prepareMapCopy(state: MapState) {\n\t\tif (!state.copy_) {\n\t\t\tstate.assigned_ = new Map()\n\t\t\tstate.copy_ = new Map(state.base_)\n\t\t}\n\t}\n\n\tclass DraftSet extends Set {\n\t\t[DRAFT_STATE]: SetState\n\t\tconstructor(target: AnySet, parent?: ImmerState) {\n\t\t\tsuper()\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ArchType.Set,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this,\n\t\t\t\tdrafts_: new Map(),\n\t\t\t\trevoked_: false,\n\t\t\t\tisManual_: false\n\t\t\t}\n\t\t}\n\n\t\tget size(): number {\n\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t}\n\n\t\thas(value: any): boolean {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\t// bit of trickery here, to be able to recognize both the value, and the draft of its value\n\t\t\tif (!state.copy_) {\n\t\t\t\treturn state.base_.has(value)\n\t\t\t}\n\t\t\tif (state.copy_.has(value)) return true\n\t\t\tif (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value)))\n\t\t\t\treturn true\n\t\t\treturn false\n\t\t}\n\n\t\tadd(value: any): any {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!this.has(value)) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.add(value)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tdelete(value: any): any {\n\t\t\tif (!this.has(value)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\treturn (\n\t\t\t\tstate.copy_!.delete(value) ||\n\t\t\t\t(state.drafts_.has(value)\n\t\t\t\t\t? state.copy_!.delete(state.drafts_.get(value))\n\t\t\t\t\t: /* istanbul ignore next */ false)\n\t\t\t)\n\t\t}\n\n\t\tclear() {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tvalues(): IterableIterator<any> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.values()\n\t\t}\n\n\t\tentries(): IterableIterator<[any, any]> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.entries()\n\t\t}\n\n\t\tkeys(): IterableIterator<any> {\n\t\t\treturn this.values()\n\t\t}\n\n\t\t[Symbol.iterator]() {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tforEach(cb: any, thisArg?: any) {\n\t\t\tconst iterator = this.values()\n\t\t\tlet result = iterator.next()\n\t\t\twhile (!result.done) {\n\t\t\t\tcb.call(thisArg, result.value, result.value, this)\n\t\t\t\tresult = iterator.next()\n\t\t\t}\n\t\t}\n\t}\n\tfunction proxySet_<T extends AnySet>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftSet(target, parent)\n\t}\n\n\tfunction prepareSetCopy(state: SetState) {\n\t\tif (!state.copy_) {\n\t\t\t// create drafts for all entries to preserve insertion order\n\t\t\tstate.copy_ = new Set()\n\t\t\tstate.base_.forEach(value => {\n\t\t\t\tif (isDraftable(value)) {\n\t\t\t\t\tconst draft = createProxy(value, state)\n\t\t\t\t\tstate.drafts_.set(value, draft)\n\t\t\t\t\tstate.copy_!.add(draft)\n\t\t\t\t} else {\n\t\t\t\t\tstate.copy_!.add(value)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"MapSet\", {proxyMap_, proxySet_})\n}\n", "import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tWritableDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\tProducer,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze,\n\tObjectish,\n\tStrictMode\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to enable strict shallow copy.\n *\n * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n */\nexport const setUseStrictShallowCopy = immer.setUseStrictShallowCopy.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\n", "// src/index.ts\nfunction createThunkMiddleware(extraArgument) {\n  const middleware = ({ dispatch, getState }) => (next) => (action) => {\n    if (typeof action === \"function\") {\n      return action(dispatch, getState, extraArgument);\n    }\n    return next(action);\n  };\n  return middleware;\n}\nvar thunk = createThunkMiddleware();\nvar withExtraArgument = createThunkMiddleware;\nexport {\n  thunk,\n  withExtraArgument\n};\n", "// This must remain here so that the `mangleErrors.cjs` build script\n// does not have to import this into each source file it rewrites.\nimport { formatProdErrorMessage } from './formatProdErrorMessage';\nexport * from 'redux';\nexport { produce as createNextState, current, freeze, original, isDraft } from 'immer';\nexport type { Draft } from 'immer';\nexport { createSelector, createSelectorCreator, lruMemoize, weakMapMemoize } from 'reselect';\nexport type { Selector, OutputSelector } from 'reselect';\nexport { createDraftSafeSelector, createDraftSafeSelectorCreator } from './createDraftSafeSelector';\nexport type { ThunkAction, ThunkDispatch, ThunkMiddleware } from 'redux-thunk';\nexport {\n// js\nconfigureStore } from './configureStore';\nexport type {\n// types\nConfigureStoreOptions, EnhancedStore } from './configureStore';\nexport type { DevToolsEnhancerOptions } from './devtoolsExtension';\nexport {\n// js\ncreateAction, isActionCreator, isFSA as isFluxStandardAction } from './createAction';\nexport type {\n// types\nPayloadAction, PayloadActionCreator, ActionCreatorWithNonInferrablePayload, ActionCreatorWithOptionalPayload, ActionCreatorWithPayload, ActionCreatorWithoutPayload, ActionCreatorWithPreparedPayload, PrepareAction } from './createAction';\nexport {\n// js\ncreateReducer } from './createReducer';\nexport type {\n// types\nActions, CaseReducer, CaseReducers } from './createReducer';\nexport {\n// js\ncreateSlice, buildCreateSlice, asyncThunkCreator, ReducerType } from './createSlice';\nexport type {\n// types\nCreateSliceOptions, Slice, CaseReducerActions, SliceCaseReducers, ValidateSliceCaseReducers, CaseReducerWithPrepare, ReducerCreators, SliceSelectors } from './createSlice';\nexport type { ActionCreatorInvariantMiddlewareOptions } from './actionCreatorInvariantMiddleware';\nexport { createActionCreatorInvariantMiddleware } from './actionCreatorInvariantMiddleware';\nexport {\n// js\ncreateImmutableStateInvariantMiddleware, isImmutableDefault } from './immutableStateInvariantMiddleware';\nexport type {\n// types\nImmutableStateInvariantMiddlewareOptions } from './immutableStateInvariantMiddleware';\nexport {\n// js\ncreateSerializableStateInvariantMiddleware, findNonSerializableValue, isPlain } from './serializableStateInvariantMiddleware';\nexport type {\n// types\nSerializableStateInvariantMiddlewareOptions } from './serializableStateInvariantMiddleware';\nexport type {\n// types\nActionReducerMapBuilder } from './mapBuilders';\nexport { Tuple } from './utils';\nexport { createEntityAdapter } from './entities/create_adapter';\nexport type { EntityState, EntityAdapter, EntitySelectors, EntityStateAdapter, EntityId, Update, IdSelector, Comparer } from './entities/models';\nexport { createAsyncThunk, unwrapResult, miniSerializeError } from './createAsyncThunk';\nexport type { AsyncThunk, AsyncThunkOptions, AsyncThunkAction, AsyncThunkPayloadCreatorReturnValue, AsyncThunkPayloadCreator, GetState, GetThunkAPI, SerializedError } from './createAsyncThunk';\nexport {\n// js\nisAllOf, isAnyOf, isPending, isRejected, isFulfilled, isAsyncThunkAction, isRejectedWithValue } from './matchers';\nexport type {\n// types\nActionMatchingAllOf, ActionMatchingAnyOf } from './matchers';\nexport { nanoid } from './nanoid';\nexport type { ListenerEffect, ListenerMiddleware, ListenerEffectAPI, ListenerMiddlewareInstance, CreateListenerMiddlewareOptions, ListenerErrorHandler, TypedStartListening, TypedAddListener, TypedStopListening, TypedRemoveListener, UnsubscribeListener, UnsubscribeListenerOptions, ForkedTaskExecutor, ForkedTask, ForkedTaskAPI, AsyncTaskExecutor, SyncTaskExecutor, TaskCancelled, TaskRejected, TaskResolved, TaskResult } from './listenerMiddleware/index';\nexport type { AnyListenerPredicate } from './listenerMiddleware/types';\nexport { createListenerMiddleware, addListener, removeListener, clearAllListeners, TaskAbortError } from './listenerMiddleware/index';\nexport type { AddMiddleware, DynamicDispatch, DynamicMiddlewareInstance, GetDispatchType as GetDispatch, MiddlewareApiConfig } from './dynamicMiddleware/types';\nexport { createDynamicMiddleware } from './dynamicMiddleware/index';\nexport { SHOULD_AUTOBATCH, prepareAutoBatched, autoBatchEnhancer } from './autoBatchEnhancer';\nexport type { AutoBatchOptions } from './autoBatchEnhancer';\nexport { combineSlices } from './combineSlices';\nexport type { CombinedSliceReducer, WithSlice } from './combineSlices';\nexport type { ExtractDispatchExtensions as TSHelpersExtractDispatchExtensions, SafePromise } from './tsHelpers';\nexport { formatProdErrorMessage } from './formatProdErrorMessage';", "import { current, isDraft } from 'immer';\nimport { createSelectorCreator, weakMapMemoize } from 'reselect';\nexport const createDraftSafeSelectorCreator: typeof createSelectorCreator = (...args: unknown[]) => {\n  const createSelector = (createSelectorCreator as any)(...args);\n  const createDraftSafeSelector = Object.assign((...args: unknown[]) => {\n    const selector = createSelector(...args);\n    const wrappedSelector = (value: unknown, ...rest: unknown[]) => selector(isDraft(value) ? current(value) : value, ...rest);\n    Object.assign(wrappedSelector, selector);\n    return (wrappedSelector as any);\n  }, {\n    withTypes: () => createDraftSafeSelector\n  });\n  return createDraftSafeSelector;\n};\n\n/**\n * \"Draft-Safe\" version of `reselect`'s `createSelector`:\n * If an `immer`-drafted object is passed into the resulting selector's first argument,\n * the selector will act on the current draft value, instead of returning a cached value\n * that might be possibly outdated if the draft has been modified since.\n * @public\n */\nexport const createDraftSafeSelector = /* @__PURE__ */\ncreateDraftSafeSelectorCreator(weakMapMemoize);", "import { formatProdErrorMessage as _formatProdErrorMessage, formatProdErrorMessage as _formatProdErrorMessage2, formatProdErrorMessage as _formatProdErrorMessage3, formatProdErrorMessage as _formatProdErrorMessage4, formatProdErrorMessage as _formatProdErrorMessage5, formatProdErrorMessage as _formatProdErrorMessage6, formatProdErrorMessage as _formatProdErrorMessage7 } from \"@reduxjs/toolkit\";\nimport type { Reducer, ReducersMapObject, Middleware, Action, StoreEnhancer, Store, UnknownAction } from 'redux';\nimport { applyMiddleware, createStore, compose, combineReducers, isPlainObject } from 'redux';\nimport type { DevToolsEnhancerOptions as DevToolsOptions } from './devtoolsExtension';\nimport { composeWithDevTools } from './devtoolsExtension';\nimport type { ThunkMiddlewareFor, GetDefaultMiddleware } from './getDefaultMiddleware';\nimport { buildGetDefaultMiddleware } from './getDefaultMiddleware';\nimport type { ExtractDispatchExtensions, ExtractStoreExtensions, ExtractStateExtensions, UnknownIfNonSpecific } from './tsHelpers';\nimport type { Tuple } from './utils';\nimport type { GetDefaultEnhancers } from './getDefaultEnhancers';\nimport { buildGetDefaultEnhancers } from './getDefaultEnhancers';\n\n/**\n * Options for `configureStore()`.\n *\n * @public\n */\nexport interface ConfigureStoreOptions<S = any, A extends Action = UnknownAction, M extends Tuple<Middlewares<S>> = Tuple<Middlewares<S>>, E extends Tuple<Enhancers> = Tuple<Enhancers>, P = S> {\n  /**\n   * A single reducer function that will be used as the root reducer, or an\n   * object of slice reducers that will be passed to `combineReducers()`.\n   */\n  reducer: Reducer<S, A, P> | ReducersMapObject<S, A, P>;\n\n  /**\n   * An array of Redux middleware to install, or a callback receiving `getDefaultMiddleware` and returning a Tuple of middleware.\n   * If not supplied, defaults to the set of middleware returned by `getDefaultMiddleware()`.\n   *\n   * @example `middleware: (gDM) => gDM().concat(logger, apiMiddleware, yourCustomMiddleware)`\n   * @see https://redux-toolkit.js.org/api/getDefaultMiddleware#intended-usage\n   */\n  middleware?: (getDefaultMiddleware: GetDefaultMiddleware<S>) => M;\n\n  /**\n   * Whether to enable Redux DevTools integration. Defaults to `true`.\n   *\n   * Additional configuration can be done by passing Redux DevTools options\n   */\n  devTools?: boolean | DevToolsOptions;\n\n  /**\n   * The initial state, same as Redux's createStore.\n   * You may optionally specify it to hydrate the state\n   * from the server in universal apps, or to restore a previously serialized\n   * user session. If you use `combineReducers()` to produce the root reducer\n   * function (either directly or indirectly by passing an object as `reducer`),\n   * this must be an object with the same shape as the reducer map keys.\n   */\n  // we infer here, and instead complain if the reducer doesn't match\n  preloadedState?: P;\n\n  /**\n   * The store enhancers to apply. See Redux's `createStore()`.\n   * All enhancers will be included before the DevTools Extension enhancer.\n   * If you need to customize the order of enhancers, supply a callback\n   * function that will receive a `getDefaultEnhancers` function that returns a Tuple,\n   * and should return a Tuple of enhancers (such as `getDefaultEnhancers().concat(offline)`).\n   * If you only need to add middleware, you can use the `middleware` parameter instead.\n   */\n  enhancers?: (getDefaultEnhancers: GetDefaultEnhancers<M>) => E;\n}\nexport type Middlewares<S> = ReadonlyArray<Middleware<{}, S>>;\ntype Enhancers = ReadonlyArray<StoreEnhancer>;\n\n/**\n * A Redux store returned by `configureStore()`. Supports dispatching\n * side-effectful _thunks_ in addition to plain actions.\n *\n * @public\n */\nexport type EnhancedStore<S = any, A extends Action = UnknownAction, E extends Enhancers = Enhancers> = ExtractStoreExtensions<E> & Store<S, A, UnknownIfNonSpecific<ExtractStateExtensions<E>>>;\n\n/**\n * A friendly abstraction over the standard Redux `createStore()` function.\n *\n * @param options The store configuration.\n * @returns A configured Redux store.\n *\n * @public\n */\nexport function configureStore<S = any, A extends Action = UnknownAction, M extends Tuple<Middlewares<S>> = Tuple<[ThunkMiddlewareFor<S>]>, E extends Tuple<Enhancers> = Tuple<[StoreEnhancer<{\n  dispatch: ExtractDispatchExtensions<M>;\n}>, StoreEnhancer]>, P = S>(options: ConfigureStoreOptions<S, A, M, E, P>): EnhancedStore<S, A, E> {\n  const getDefaultMiddleware = buildGetDefaultMiddleware<S>();\n  const {\n    reducer = undefined,\n    middleware,\n    devTools = true,\n    preloadedState = undefined,\n    enhancers = undefined\n  } = options || {};\n  let rootReducer: Reducer<S, A, P>;\n  if (typeof reducer === 'function') {\n    rootReducer = reducer;\n  } else if (isPlainObject(reducer)) {\n    rootReducer = ((combineReducers(reducer) as unknown) as Reducer<S, A, P>);\n  } else {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(1) : '`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers');\n  }\n  if (process.env.NODE_ENV !== 'production' && middleware && typeof middleware !== 'function') {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(2) : '`middleware` field must be a callback');\n  }\n  let finalMiddleware: Tuple<Middlewares<S>>;\n  if (typeof middleware === 'function') {\n    finalMiddleware = middleware(getDefaultMiddleware);\n    if (process.env.NODE_ENV !== 'production' && !Array.isArray(finalMiddleware)) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage3(3) : 'when using a middleware builder function, an array of middleware must be returned');\n    }\n  } else {\n    finalMiddleware = getDefaultMiddleware();\n  }\n  if (process.env.NODE_ENV !== 'production' && finalMiddleware.some((item: any) => typeof item !== 'function')) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage4(4) : 'each middleware provided to configureStore must be a function');\n  }\n  let finalCompose = compose;\n  if (devTools) {\n    finalCompose = composeWithDevTools({\n      // Enable capture of stack traces for dispatched Redux actions\n      trace: process.env.NODE_ENV !== 'production',\n      ...(typeof devTools === 'object' && devTools)\n    });\n  }\n  const middlewareEnhancer = applyMiddleware(...finalMiddleware);\n  const getDefaultEnhancers = buildGetDefaultEnhancers<M>(middlewareEnhancer);\n  if (process.env.NODE_ENV !== 'production' && enhancers && typeof enhancers !== 'function') {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage5(5) : '`enhancers` field must be a callback');\n  }\n  let storeEnhancers = typeof enhancers === 'function' ? enhancers(getDefaultEnhancers) : getDefaultEnhancers();\n  if (process.env.NODE_ENV !== 'production' && !Array.isArray(storeEnhancers)) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage6(6) : '`enhancers` callback must return an array');\n  }\n  if (process.env.NODE_ENV !== 'production' && storeEnhancers.some((item: any) => typeof item !== 'function')) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage7(7) : 'each enhancer provided to configureStore must be a function');\n  }\n  if (process.env.NODE_ENV !== 'production' && finalMiddleware.length && !storeEnhancers.includes(middlewareEnhancer)) {\n    console.error('middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`');\n  }\n  const composedEnhancer: StoreEnhancer<any> = finalCompose(...storeEnhancers);\n  return createStore(rootReducer, (preloadedState as P), composedEnhancer);\n}", "import type { Action, ActionCreator, StoreEnhancer } from 'redux';\nimport { compose } from 'redux';\n\n/**\r\n * @public\r\n */\nexport interface DevToolsEnhancerOptions {\n  /**\r\n   * the instance name to be showed on the monitor page. Default value is `document.title`.\r\n   * If not specified and there's no document title, it will consist of `tabId` and `instanceId`.\r\n   */\n  name?: string;\n  /**\r\n   * action creators functions to be available in the Dispatcher.\r\n   */\n  actionCreators?: ActionCreator<any>[] | {\n    [key: string]: ActionCreator<any>;\n  };\n  /**\r\n   * if more than one action is dispatched in the indicated interval, all new actions will be collected and sent at once.\r\n   * It is the joint between performance and speed. When set to `0`, all actions will be sent instantly.\r\n   * Set it to a higher value when experiencing perf issues (also `maxAge` to a lower value).\r\n   *\r\n   * @default 500 ms.\r\n   */\n  latency?: number;\n  /**\r\n   * (> 1) - maximum allowed actions to be stored in the history tree. The oldest actions are removed once maxAge is reached. It's critical for performance.\r\n   *\r\n   * @default 50\r\n   */\n  maxAge?: number;\n  /**\r\n   * Customizes how actions and state are serialized and deserialized. Can be a boolean or object. If given a boolean, the behavior is the same as if you\r\n   * were to pass an object and specify `options` as a boolean. Giving an object allows fine-grained customization using the `replacer` and `reviver`\r\n   * functions.\r\n   */\n  serialize?: boolean | {\n    /**\r\n     * - `undefined` - will use regular `JSON.stringify` to send data (it's the fast mode).\r\n     * - `false` - will handle also circular references.\r\n     * - `true` - will handle also date, regex, undefined, error objects, symbols, maps, sets and functions.\r\n     * - object, which contains `date`, `regex`, `undefined`, `error`, `symbol`, `map`, `set` and `function` keys.\r\n     *   For each of them you can indicate if to include (by setting as `true`).\r\n     *   For `function` key you can also specify a custom function which handles serialization.\r\n     *   See [`jsan`](https://github.com/kolodny/jsan) for more details.\r\n     */\n    options?: undefined | boolean | {\n      date?: true;\n      regex?: true;\n      undefined?: true;\n      error?: true;\n      symbol?: true;\n      map?: true;\n      set?: true;\n      function?: true | ((fn: (...args: any[]) => any) => string);\n    };\n    /**\r\n     * [JSON replacer function](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_replacer_parameter) used for both actions and states stringify.\r\n     * In addition, you can specify a data type by adding a [`__serializedType__`](https://github.com/zalmoxisus/remotedev-serialize/blob/master/helpers/index.js#L4)\r\n     * key. So you can deserialize it back while importing or persisting data.\r\n     * Moreover, it will also [show a nice preview showing the provided custom type](https://cloud.githubusercontent.com/assets/7957859/21814330/a17d556a-d761-11e6-85ef-159dd12f36c5.png):\r\n     */\n    replacer?: (key: string, value: unknown) => any;\n    /**\r\n     * [JSON `reviver` function](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Using_the_reviver_parameter)\r\n     * used for parsing the imported actions and states. See [`remotedev-serialize`](https://github.com/zalmoxisus/remotedev-serialize/blob/master/immutable/serialize.js#L8-L41)\r\n     * as an example on how to serialize special data types and get them back.\r\n     */\n    reviver?: (key: string, value: unknown) => any;\n    /**\r\n     * Automatically serialize/deserialize immutablejs via [remotedev-serialize](https://github.com/zalmoxisus/remotedev-serialize).\r\n     * Just pass the Immutable library. It will support all ImmutableJS structures. You can even export them into a file and get them back.\r\n     * The only exception is `Record` class, for which you should pass this in addition the references to your classes in `refs`.\r\n     */\n    immutable?: any;\n    /**\r\n     * ImmutableJS `Record` classes used to make possible restore its instances back when importing, persisting...\r\n     */\n    refs?: any;\n  };\n  /**\r\n   * function which takes `action` object and id number as arguments, and should return `action` object back.\r\n   */\n  actionSanitizer?: <A extends Action>(action: A, id: number) => A;\n  /**\r\n   * function which takes `state` object and index as arguments, and should return `state` object back.\r\n   */\n  stateSanitizer?: <S>(state: S, index: number) => S;\n  /**\r\n   * *string or array of strings as regex* - actions types to be hidden / shown in the monitors (while passed to the reducers).\r\n   * If `actionsAllowlist` specified, `actionsDenylist` is ignored.\r\n   */\n  actionsDenylist?: string | string[];\n  /**\r\n   * *string or array of strings as regex* - actions types to be hidden / shown in the monitors (while passed to the reducers).\r\n   * If `actionsAllowlist` specified, `actionsDenylist` is ignored.\r\n   */\n  actionsAllowlist?: string | string[];\n  /**\r\n   * called for every action before sending, takes `state` and `action` object, and returns `true` in case it allows sending the current data to the monitor.\r\n   * Use it as a more advanced version of `actionsDenylist`/`actionsAllowlist` parameters.\r\n   */\n  predicate?: <S, A extends Action>(state: S, action: A) => boolean;\n  /**\r\n   * if specified as `false`, it will not record the changes till clicking on `Start recording` button.\r\n   * Available only for Redux enhancer, for others use `autoPause`.\r\n   *\r\n   * @default true\r\n   */\n  shouldRecordChanges?: boolean;\n  /**\r\n   * if specified, whenever clicking on `Pause recording` button and there are actions in the history log, will add this action type.\r\n   * If not specified, will commit when paused. Available only for Redux enhancer.\r\n   *\r\n   * @default \"@@PAUSED\"\"\r\n   */\n  pauseActionType?: string;\n  /**\r\n   * auto pauses when the extension’s window is not opened, and so has zero impact on your app when not in use.\r\n   * Not available for Redux enhancer (as it already does it but storing the data to be sent).\r\n   *\r\n   * @default false\r\n   */\n  autoPause?: boolean;\n  /**\r\n   * if specified as `true`, it will not allow any non-monitor actions to be dispatched till clicking on `Unlock changes` button.\r\n   * Available only for Redux enhancer.\r\n   *\r\n   * @default false\r\n   */\n  shouldStartLocked?: boolean;\n  /**\r\n   * if set to `false`, will not recompute the states on hot reloading (or on replacing the reducers). Available only for Redux enhancer.\r\n   *\r\n   * @default true\r\n   */\n  shouldHotReload?: boolean;\n  /**\r\n   * if specified as `true`, whenever there's an exception in reducers, the monitors will show the error message, and next actions will not be dispatched.\r\n   *\r\n   * @default false\r\n   */\n  shouldCatchErrors?: boolean;\n  /**\r\n   * If you want to restrict the extension, specify the features you allow.\r\n   * If not specified, all of the features are enabled. When set as an object, only those included as `true` will be allowed.\r\n   * Note that except `true`/`false`, `import` and `export` can be set as `custom` (which is by default for Redux enhancer), meaning that the importing/exporting occurs on the client side.\r\n   * Otherwise, you'll get/set the data right from the monitor part.\r\n   */\n  features?: {\n    /**\r\n     * start/pause recording of dispatched actions\r\n     */\n    pause?: boolean;\n    /**\r\n     * lock/unlock dispatching actions and side effects\r\n     */\n    lock?: boolean;\n    /**\r\n     * persist states on page reloading\r\n     */\n    persist?: boolean;\n    /**\r\n     * export history of actions in a file\r\n     */\n    export?: boolean | 'custom';\n    /**\r\n     * import history of actions from a file\r\n     */\n    import?: boolean | 'custom';\n    /**\r\n     * jump back and forth (time travelling)\r\n     */\n    jump?: boolean;\n    /**\r\n     * skip (cancel) actions\r\n     */\n    skip?: boolean;\n    /**\r\n     * drag and drop actions in the history list\r\n     */\n    reorder?: boolean;\n    /**\r\n     * dispatch custom actions or action creators\r\n     */\n    dispatch?: boolean;\n    /**\r\n     * generate tests for the selected actions\r\n     */\n    test?: boolean;\n  };\n  /**\r\n   * Set to true or a stacktrace-returning function to record call stack traces for dispatched actions.\r\n   * Defaults to false.\r\n   */\n  trace?: boolean | (<A extends Action>(action: A) => string);\n  /**\r\n   * The maximum number of stack trace entries to record per action. Defaults to 10.\r\n   */\n  traceLimit?: number;\n}\ntype Compose = typeof compose;\ninterface ComposeWithDevTools {\n  (options: DevToolsEnhancerOptions): Compose;\n  <StoreExt extends {}>(...funcs: StoreEnhancer<StoreExt>[]): StoreEnhancer<StoreExt>;\n}\n\n/**\r\n * @public\r\n */\nexport const composeWithDevTools: ComposeWithDevTools = typeof window !== 'undefined' && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function () {\n  if (arguments.length === 0) return undefined;\n  if (typeof arguments[0] === 'object') return compose;\n  return compose.apply(null, ((arguments as any) as Function[]));\n};\n\n/**\r\n * @public\r\n */\nexport const devToolsEnhancer: {\n  (options: DevToolsEnhancerOptions): StoreEnhancer<any>;\n} = typeof window !== 'undefined' && (window as any).__REDUX_DEVTOOLS_EXTENSION__ ? (window as any).__REDUX_DEVTOOLS_EXTENSION__ : function () {\n  return function (noop) {\n    return noop;\n  };\n};", "import type { Middleware, UnknownAction } from 'redux';\nimport type { ThunkMiddleware } from 'redux-thunk';\nimport { thunk as thunkMiddleware, withExtraArgument } from 'redux-thunk';\nimport type { ActionCreatorInvariantMiddlewareOptions } from './actionCreatorInvariantMiddleware';\nimport { createActionCreatorInvariantMiddleware } from './actionCreatorInvariantMiddleware';\nimport type { ImmutableStateInvariantMiddlewareOptions } from './immutableStateInvariantMiddleware';\n/* PROD_START_REMOVE_UMD */\nimport { createImmutableStateInvariantMiddleware } from './immutableStateInvariantMiddleware';\n/* PROD_STOP_REMOVE_UMD */\n\nimport type { SerializableStateInvariantMiddlewareOptions } from './serializableStateInvariantMiddleware';\nimport { createSerializableStateInvariantMiddleware } from './serializableStateInvariantMiddleware';\nimport type { ExcludeFromTuple } from './tsHelpers';\nimport { Tuple } from './utils';\nfunction isBoolean(x: any): x is boolean {\n  return typeof x === 'boolean';\n}\ninterface ThunkOptions<E = any> {\n  extraArgument: E;\n}\ninterface GetDefaultMiddlewareOptions {\n  thunk?: boolean | ThunkOptions;\n  immutableCheck?: boolean | ImmutableStateInvariantMiddlewareOptions;\n  serializableCheck?: boolean | SerializableStateInvariantMiddlewareOptions;\n  actionCreatorCheck?: boolean | ActionCreatorInvariantMiddlewareOptions;\n}\nexport type ThunkMiddlewareFor<S, O extends GetDefaultMiddlewareOptions = {}> = O extends {\n  thunk: false;\n} ? never : O extends {\n  thunk: {\n    extraArgument: infer E;\n  };\n} ? ThunkMiddleware<S, UnknownAction, E> : ThunkMiddleware<S, UnknownAction>;\nexport type GetDefaultMiddleware<S = any> = <O extends GetDefaultMiddlewareOptions = {\n  thunk: true;\n  immutableCheck: true;\n  serializableCheck: true;\n  actionCreatorCheck: true;\n}>(options?: O) => Tuple<ExcludeFromTuple<[ThunkMiddlewareFor<S, O>], never>>;\nexport const buildGetDefaultMiddleware = <S = any,>(): GetDefaultMiddleware<S> => function getDefaultMiddleware(options) {\n  const {\n    thunk = true,\n    immutableCheck = true,\n    serializableCheck = true,\n    actionCreatorCheck = true\n  } = options ?? {};\n  let middlewareArray = new Tuple<Middleware[]>();\n  if (thunk) {\n    if (isBoolean(thunk)) {\n      middlewareArray.push(thunkMiddleware);\n    } else {\n      middlewareArray.push(withExtraArgument(thunk.extraArgument));\n    }\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    if (immutableCheck) {\n      /* PROD_START_REMOVE_UMD */\n      let immutableOptions: ImmutableStateInvariantMiddlewareOptions = {};\n      if (!isBoolean(immutableCheck)) {\n        immutableOptions = immutableCheck;\n      }\n      middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));\n      /* PROD_STOP_REMOVE_UMD */\n    }\n    if (serializableCheck) {\n      let serializableOptions: SerializableStateInvariantMiddlewareOptions = {};\n      if (!isBoolean(serializableCheck)) {\n        serializableOptions = serializableCheck;\n      }\n      middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));\n    }\n    if (actionCreatorCheck) {\n      let actionCreatorOptions: ActionCreatorInvariantMiddlewareOptions = {};\n      if (!isBoolean(actionCreatorCheck)) {\n        actionCreatorOptions = actionCreatorCheck;\n      }\n      middlewareArray.unshift(createActionCreatorInvariantMiddleware(actionCreatorOptions));\n    }\n  }\n  return (middlewareArray as any);\n};", "import { formatProdErrorMessage as _formatProdErrorMessage } from \"@reduxjs/toolkit\";\nimport { isAction } from 'redux';\nimport type { IsUnknownOrNonInferrable, IfMaybeUndefined, IfVoid, IsAny } from './tsHelpers';\nimport { hasMatchFunction } from './tsHelpers';\n\n/**\n * An action with a string type and an associated payload. This is the\n * type of action returned by `createAction()` action creators.\n *\n * @template P The type of the action's payload.\n * @template T the type used for the action type.\n * @template M The type of the action's meta (optional)\n * @template E The type of the action's error (optional)\n *\n * @public\n */\nexport type PayloadAction<P = void, T extends string = string, M = never, E = never> = {\n  payload: P;\n  type: T;\n} & ([M] extends [never] ? {} : {\n  meta: M;\n}) & ([E] extends [never] ? {} : {\n  error: E;\n});\n\n/**\n * A \"prepare\" method to be used as the second parameter of `createAction`.\n * Takes any number of arguments and returns a Flux Standard Action without\n * type (will be added later) that *must* contain a payload (might be undefined).\n *\n * @public\n */\nexport type PrepareAction<P> = ((...args: any[]) => {\n  payload: P;\n}) | ((...args: any[]) => {\n  payload: P;\n  meta: any;\n}) | ((...args: any[]) => {\n  payload: P;\n  error: any;\n}) | ((...args: any[]) => {\n  payload: P;\n  meta: any;\n  error: any;\n});\n\n/**\n * Internal version of `ActionCreatorWithPreparedPayload`. Not to be used externally.\n *\n * @internal\n */\nexport type _ActionCreatorWithPreparedPayload<PA extends PrepareAction<any> | void, T extends string = string> = PA extends PrepareAction<infer P> ? ActionCreatorWithPreparedPayload<Parameters<PA>, P, T, ReturnType<PA> extends {\n  error: infer E;\n} ? E : never, ReturnType<PA> extends {\n  meta: infer M;\n} ? M : never> : void;\n\n/**\n * Basic type for all action creators.\n *\n * @inheritdoc {redux#ActionCreator}\n */\nexport type BaseActionCreator<P, T extends string, M = never, E = never> = {\n  type: T;\n  match: (action: unknown) => action is PayloadAction<P, T, M, E>;\n};\n\n/**\n * An action creator that takes multiple arguments that are passed\n * to a `PrepareAction` method to create the final Action.\n * @typeParam Args arguments for the action creator function\n * @typeParam P `payload` type\n * @typeParam T `type` name\n * @typeParam E optional `error` type\n * @typeParam M optional `meta` type\n *\n * @inheritdoc {redux#ActionCreator}\n *\n * @public\n */\nexport interface ActionCreatorWithPreparedPayload<Args extends unknown[], P, T extends string = string, E = never, M = never> extends BaseActionCreator<P, T, M, E> {\n  /**\n   * Calling this {@link redux#ActionCreator} with `Args` will return\n   * an Action with a payload of type `P` and (depending on the `PrepareAction`\n   * method used) a `meta`- and `error` property of types `M` and `E` respectively.\n   */\n  (...args: Args): PayloadAction<P, T, M, E>;\n}\n\n/**\n * An action creator of type `T` that takes an optional payload of type `P`.\n *\n * @inheritdoc {redux#ActionCreator}\n *\n * @public\n */\nexport interface ActionCreatorWithOptionalPayload<P, T extends string = string> extends BaseActionCreator<P, T> {\n  /**\n   * Calling this {@link redux#ActionCreator} with an argument will\n   * return a {@link PayloadAction} of type `T` with a payload of `P`.\n   * Calling it without an argument will return a PayloadAction with a payload of `undefined`.\n   */\n  (payload?: P): PayloadAction<P, T>;\n}\n\n/**\n * An action creator of type `T` that takes no payload.\n *\n * @inheritdoc {redux#ActionCreator}\n *\n * @public\n */\nexport interface ActionCreatorWithoutPayload<T extends string = string> extends BaseActionCreator<undefined, T> {\n  /**\n   * Calling this {@link redux#ActionCreator} will\n   * return a {@link PayloadAction} of type `T` with a payload of `undefined`\n   */\n  (noArgument: void): PayloadAction<undefined, T>;\n}\n\n/**\n * An action creator of type `T` that requires a payload of type P.\n *\n * @inheritdoc {redux#ActionCreator}\n *\n * @public\n */\nexport interface ActionCreatorWithPayload<P, T extends string = string> extends BaseActionCreator<P, T> {\n  /**\n   * Calling this {@link redux#ActionCreator} with an argument will\n   * return a {@link PayloadAction} of type `T` with a payload of `P`\n   */\n  (payload: P): PayloadAction<P, T>;\n}\n\n/**\n * An action creator of type `T` whose `payload` type could not be inferred. Accepts everything as `payload`.\n *\n * @inheritdoc {redux#ActionCreator}\n *\n * @public\n */\nexport interface ActionCreatorWithNonInferrablePayload<T extends string = string> extends BaseActionCreator<unknown, T> {\n  /**\n   * Calling this {@link redux#ActionCreator} with an argument will\n   * return a {@link PayloadAction} of type `T` with a payload\n   * of exactly the type of the argument.\n   */\n  <PT extends unknown>(payload: PT): PayloadAction<PT, T>;\n}\n\n/**\n * An action creator that produces actions with a `payload` attribute.\n *\n * @typeParam P the `payload` type\n * @typeParam T the `type` of the resulting action\n * @typeParam PA if the resulting action is preprocessed by a `prepare` method, the signature of said method.\n *\n * @public\n */\nexport type PayloadActionCreator<P = void, T extends string = string, PA extends PrepareAction<P> | void = void> = IfPrepareActionMethodProvided<PA, _ActionCreatorWithPreparedPayload<PA, T>,\n// else\nIsAny<P, ActionCreatorWithPayload<any, T>, IsUnknownOrNonInferrable<P, ActionCreatorWithNonInferrablePayload<T>,\n// else\nIfVoid<P, ActionCreatorWithoutPayload<T>,\n// else\nIfMaybeUndefined<P, ActionCreatorWithOptionalPayload<P, T>,\n// else\nActionCreatorWithPayload<P, T>>>>>>;\n\n/**\n * A utility function to create an action creator for the given action type\n * string. The action creator accepts a single argument, which will be included\n * in the action object as a field called payload. The action creator function\n * will also have its toString() overridden so that it returns the action type.\n *\n * @param type The action type to use for created actions.\n * @param prepare (optional) a method that takes any number of arguments and returns { payload } or { payload, meta }.\n *                If this is given, the resulting action creator will pass its arguments to this method to calculate payload & meta.\n *\n * @public\n */\nexport function createAction<P = void, T extends string = string>(type: T): PayloadActionCreator<P, T>;\n\n/**\n * A utility function to create an action creator for the given action type\n * string. The action creator accepts a single argument, which will be included\n * in the action object as a field called payload. The action creator function\n * will also have its toString() overridden so that it returns the action type.\n *\n * @param type The action type to use for created actions.\n * @param prepare (optional) a method that takes any number of arguments and returns { payload } or { payload, meta }.\n *                If this is given, the resulting action creator will pass its arguments to this method to calculate payload & meta.\n *\n * @public\n */\nexport function createAction<PA extends PrepareAction<any>, T extends string = string>(type: T, prepareAction: PA): PayloadActionCreator<ReturnType<PA>['payload'], T, PA>;\nexport function createAction(type: string, prepareAction?: Function): any {\n  function actionCreator(...args: any[]) {\n    if (prepareAction) {\n      let prepared = prepareAction(...args);\n      if (!prepared) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(0) : 'prepareAction did not return an object');\n      }\n      return {\n        type,\n        payload: prepared.payload,\n        ...('meta' in prepared && {\n          meta: prepared.meta\n        }),\n        ...('error' in prepared && {\n          error: prepared.error\n        })\n      };\n    }\n    return {\n      type,\n      payload: args[0]\n    };\n  }\n  actionCreator.toString = () => `${type}`;\n  actionCreator.type = type;\n  actionCreator.match = (action: unknown): action is PayloadAction => isAction(action) && action.type === type;\n  return actionCreator;\n}\n\n/**\n * Returns true if value is an RTK-like action creator, with a static type property and match method.\n */\nexport function isActionCreator(action: unknown): action is BaseActionCreator<unknown, string> & Function {\n  return typeof action === 'function' && 'type' in action &&\n  // hasMatchFunction only wants Matchers but I don't see the point in rewriting it\n  hasMatchFunction((action as any));\n}\n\n/**\n * Returns true if value is an action with a string type and valid Flux Standard Action keys.\n */\nexport function isFSA(action: unknown): action is {\n  type: string;\n  payload?: unknown;\n  error?: unknown;\n  meta?: unknown;\n} {\n  return isAction(action) && Object.keys(action).every(isValidKey);\n}\nfunction isValidKey(key: string) {\n  return ['type', 'payload', 'error', 'meta'].indexOf(key) > -1;\n}\n\n// helper types for more readable typings\n\ntype IfPrepareActionMethodProvided<PA extends PrepareAction<any> | void, True, False> = PA extends (...args: any[]) => any ? True : False;", "import type { Middleware, StoreEnhancer } from 'redux';\nimport type { Tuple } from './utils';\nexport function safeAssign<T extends object>(target: T, ...args: Array<Partial<NoInfer<T>>>) {\n  Object.assign(target, ...args);\n}\n\n/**\n * return True if T is `any`, otherwise return False\n * taken from https://github.com/joonhocho/tsdef\n *\n * @internal\n */\nexport type IsAny<T, True, False = never> =\n// test if we are going the left AND right path in the condition\ntrue | false extends (T extends never ? true : false) ? True : False;\nexport type CastAny<T, CastTo> = IsAny<T, CastTo, T>;\n\n/**\n * return True if T is `unknown`, otherwise return False\n * taken from https://github.com/joonhocho/tsdef\n *\n * @internal\n */\nexport type IsUnknown<T, True, False = never> = unknown extends T ? IsAny<T, False, True> : False;\nexport type FallbackIfUnknown<T, Fallback> = IsUnknown<T, Fallback, T>;\n\n/**\n * @internal\n */\nexport type IfMaybeUndefined<P, True, False> = [undefined] extends [P] ? True : False;\n\n/**\n * @internal\n */\nexport type IfVoid<P, True, False> = [void] extends [P] ? True : False;\n\n/**\n * @internal\n */\nexport type IsEmptyObj<T, True, False = never> = T extends any ? keyof T extends never ? IsUnknown<T, False, IfMaybeUndefined<T, False, IfVoid<T, False, True>>> : False : never;\n\n/**\n * returns True if TS version is above 3.5, False if below.\n * uses feature detection to detect TS version >= 3.5\n * * versions below 3.5 will return `{}` for unresolvable interference\n * * versions above will return `unknown`\n *\n * @internal\n */\nexport type AtLeastTS35<True, False> = [True, False][IsUnknown<ReturnType<<T>() => T>, 0, 1>];\n\n/**\n * @internal\n */\nexport type IsUnknownOrNonInferrable<T, True, False> = AtLeastTS35<IsUnknown<T, True, False>, IsEmptyObj<T, True, IsUnknown<T, True, False>>>;\n\n/**\n * Convert a Union type `(A|B)` to an intersection type `(A&B)`\n */\nexport type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;\n\n// Appears to have a convenient side effect of ignoring `never` even if that's not what you specified\nexport type ExcludeFromTuple<T, E, Acc extends unknown[] = []> = T extends [infer Head, ...infer Tail] ? ExcludeFromTuple<Tail, E, [...Acc, ...([Head] extends [E] ? [] : [Head])]> : Acc;\ntype ExtractDispatchFromMiddlewareTuple<MiddlewareTuple extends readonly any[], Acc extends {}> = MiddlewareTuple extends [infer Head, ...infer Tail] ? ExtractDispatchFromMiddlewareTuple<Tail, Acc & (Head extends Middleware<infer D> ? IsAny<D, {}, D> : {})> : Acc;\nexport type ExtractDispatchExtensions<M> = M extends Tuple<infer MiddlewareTuple> ? ExtractDispatchFromMiddlewareTuple<MiddlewareTuple, {}> : M extends ReadonlyArray<Middleware> ? ExtractDispatchFromMiddlewareTuple<[...M], {}> : never;\ntype ExtractStoreExtensionsFromEnhancerTuple<EnhancerTuple extends readonly any[], Acc extends {}> = EnhancerTuple extends [infer Head, ...infer Tail] ? ExtractStoreExtensionsFromEnhancerTuple<Tail, Acc & (Head extends StoreEnhancer<infer Ext> ? IsAny<Ext, {}, Ext> : {})> : Acc;\nexport type ExtractStoreExtensions<E> = E extends Tuple<infer EnhancerTuple> ? ExtractStoreExtensionsFromEnhancerTuple<EnhancerTuple, {}> : E extends ReadonlyArray<StoreEnhancer> ? UnionToIntersection<E[number] extends StoreEnhancer<infer Ext> ? Ext extends {} ? IsAny<Ext, {}, Ext> : {} : {}> : never;\ntype ExtractStateExtensionsFromEnhancerTuple<EnhancerTuple extends readonly any[], Acc extends {}> = EnhancerTuple extends [infer Head, ...infer Tail] ? ExtractStateExtensionsFromEnhancerTuple<Tail, Acc & (Head extends StoreEnhancer<any, infer StateExt> ? IsAny<StateExt, {}, StateExt> : {})> : Acc;\nexport type ExtractStateExtensions<E> = E extends Tuple<infer EnhancerTuple> ? ExtractStateExtensionsFromEnhancerTuple<EnhancerTuple, {}> : E extends ReadonlyArray<StoreEnhancer> ? UnionToIntersection<E[number] extends StoreEnhancer<any, infer StateExt> ? StateExt extends {} ? IsAny<StateExt, {}, StateExt> : {} : {}> : never;\n\n/**\n * Helper type. Passes T out again, but boxes it in a way that it cannot\n * \"widen\" the type by accident if it is a generic that should be inferred\n * from elsewhere.\n *\n * @internal\n */\nexport type NoInfer<T> = [T][T extends any ? 0 : never];\nexport type NonUndefined<T> = T extends undefined ? never : T;\nexport type WithRequiredProp<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;\nexport type WithOptionalProp<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\nexport interface TypeGuard<T> {\n  (value: any): value is T;\n}\nexport interface HasMatchFunction<T> {\n  match: TypeGuard<T>;\n}\nexport const hasMatchFunction = <T,>(v: Matcher<T>): v is HasMatchFunction<T> => {\n  return v && typeof (v as HasMatchFunction<T>).match === 'function';\n};\n\n/** @public */\nexport type Matcher<T> = HasMatchFunction<T> | TypeGuard<T>;\n\n/** @public */\nexport type ActionFromMatcher<M extends Matcher<any>> = M extends Matcher<infer T> ? T : never;\nexport type Id<T> = { [K in keyof T]: T[K] } & {};\nexport type Tail<T extends any[]> = T extends [any, ...infer Tail] ? Tail : never;\nexport type UnknownIfNonSpecific<T> = {} extends T ? unknown : T;\n\n/**\n * A Promise that will never reject.\n * @see https://github.com/reduxjs/redux-toolkit/issues/4101\n */\nexport type SafePromise<T> = Promise<T> & {\n  __linterBrands: 'SafePromise';\n};\n\n/**\n * Properly wraps a Promise as a {@link SafePromise} with .catch(fallback).\n */\nexport function asSafePromise<Resolved, Rejected>(promise: Promise<Resolved>, fallback: (error: unknown) => Rejected) {\n  return (promise.catch(fallback) as SafePromise<Resolved | Rejected>);\n}", "import type { Middleware } from 'redux';\nimport { isActionCreator as isRTKAction } from './createAction';\nexport interface ActionCreatorInvariantMiddlewareOptions {\n  /**\r\n   * The function to identify whether a value is an action creator.\r\n   * The default checks for a function with a static type property and match method.\r\n   */\n  isActionCreator?: (action: unknown) => action is Function & {\n    type?: unknown;\n  };\n}\nexport function getMessage(type?: unknown) {\n  const splitType = type ? `${type}`.split('/') : [];\n  const actionName = splitType[splitType.length - 1] || 'actionCreator';\n  return `Detected an action creator with type \"${type || 'unknown'}\" being dispatched. \nMake sure you're calling the action creator before dispatching, i.e. \\`dispatch(${actionName}())\\` instead of \\`dispatch(${actionName})\\`. This is necessary even if the action has no payload.`;\n}\nexport function createActionCreatorInvariantMiddleware(options: ActionCreatorInvariantMiddlewareOptions = {}): Middleware {\n  if (process.env.NODE_ENV === 'production') {\n    return () => next => action => next(action);\n  }\n  const {\n    isActionCreator = isRTKAction\n  } = options;\n  return () => next => action => {\n    if (isActionCreator(action)) {\n      console.warn(getMessage(action.type));\n    }\n    return next(action);\n  };\n}", "import { formatProdErrorMessage as _formatProdErrorMessage } from \"@reduxjs/toolkit\";\nimport { produce as createNextState, isDraftable } from 'immer';\nexport function getTimeMeasureUtils(maxDelay: number, fnName: string) {\n  let elapsed = 0;\n  return {\n    measureTime<T>(fn: () => T): T {\n      const started = Date.now();\n      try {\n        return fn();\n      } finally {\n        const finished = Date.now();\n        elapsed += finished - started;\n      }\n    },\n    warnIfExceeded() {\n      if (elapsed > maxDelay) {\n        console.warn(`${fnName} took ${elapsed}ms, which is more than the warning threshold of ${maxDelay}ms. \nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\nIt is disabled in production builds, so you don't need to worry about that.`);\n      }\n    }\n  };\n}\nexport function delay(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nexport function find<T>(iterable: Iterable<T>, comparator: (item: T) => boolean): T | undefined {\n  for (const entry of iterable) {\n    if (comparator(entry)) {\n      return entry;\n    }\n  }\n  return undefined;\n}\nexport class Tuple<Items extends ReadonlyArray<unknown> = []> extends Array<Items[number]> {\n  constructor(length: number);\n  constructor(...items: Items);\n  constructor(...items: any[]) {\n    super(...items);\n    Object.setPrototypeOf(this, Tuple.prototype);\n  }\n  static get [Symbol.species]() {\n    return (Tuple as any);\n  }\n  concat<AdditionalItems extends ReadonlyArray<unknown>>(items: Tuple<AdditionalItems>): Tuple<[...Items, ...AdditionalItems]>;\n  concat<AdditionalItems extends ReadonlyArray<unknown>>(items: AdditionalItems): Tuple<[...Items, ...AdditionalItems]>;\n  concat<AdditionalItems extends ReadonlyArray<unknown>>(...items: AdditionalItems): Tuple<[...Items, ...AdditionalItems]>;\n  concat(...arr: any[]) {\n    return super.concat.apply(this, arr);\n  }\n  prepend<AdditionalItems extends ReadonlyArray<unknown>>(items: Tuple<AdditionalItems>): Tuple<[...AdditionalItems, ...Items]>;\n  prepend<AdditionalItems extends ReadonlyArray<unknown>>(items: AdditionalItems): Tuple<[...AdditionalItems, ...Items]>;\n  prepend<AdditionalItems extends ReadonlyArray<unknown>>(...items: AdditionalItems): Tuple<[...AdditionalItems, ...Items]>;\n  prepend(...arr: any[]) {\n    if (arr.length === 1 && Array.isArray(arr[0])) {\n      return new Tuple(...arr[0].concat(this));\n    }\n    return new Tuple(...arr.concat(this));\n  }\n}\nexport function freezeDraftable<T>(val: T) {\n  return isDraftable(val) ? createNextState(val, () => {}) : val;\n}\ninterface WeakMapEmplaceHandler<K extends object, V> {\n  /**\n   * Will be called to get value, if no value is currently in map.\n   */\n  insert?(key: K, map: WeakMap<K, V>): V;\n  /**\n   * Will be called to update a value, if one exists already.\n   */\n  update?(previous: V, key: K, map: WeakMap<K, V>): V;\n}\ninterface MapEmplaceHandler<K, V> {\n  /**\n   * Will be called to get value, if no value is currently in map.\n   */\n  insert?(key: K, map: Map<K, V>): V;\n  /**\n   * Will be called to update a value, if one exists already.\n   */\n  update?(previous: V, key: K, map: Map<K, V>): V;\n}\nexport function emplace<K, V>(map: Map<K, V>, key: K, handler: MapEmplaceHandler<K, V>): V;\nexport function emplace<K extends object, V>(map: WeakMap<K, V>, key: K, handler: WeakMapEmplaceHandler<K, V>): V;\n/**\n * Allow inserting a new value, or updating an existing one\n * @throws if called for a key with no current value and no `insert` handler is provided\n * @returns current value in map (after insertion/updating)\n * ```ts\n * // return current value if already in map, otherwise initialise to 0 and return that\n * const num = emplace(map, key, {\n *   insert: () => 0\n * })\n *\n * // increase current value by one if already in map, otherwise initialise to 0\n * const num = emplace(map, key, {\n *   update: (n) => n + 1,\n *   insert: () => 0,\n * })\n *\n * // only update if value's already in the map - and increase it by one\n * if (map.has(key)) {\n *   const num = emplace(map, key, {\n *     update: (n) => n + 1,\n *   })\n * }\n * ```\n *\n * @remarks\n * Based on https://github.com/tc39/proposal-upsert currently in Stage 2 - maybe in a few years we'll be able to replace this with direct method calls\n */\nexport function emplace<K extends object, V>(map: WeakMap<K, V>, key: K, handler: WeakMapEmplaceHandler<K, V>): V {\n  if (map.has(key)) {\n    let value = (map.get(key) as V);\n    if (handler.update) {\n      value = handler.update(value, key, map);\n      map.set(key, value);\n    }\n    return value;\n  }\n  if (!handler.insert) throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(10) : 'No insert provided for key not already in map');\n  const inserted = handler.insert(key, map);\n  map.set(key, inserted);\n  return inserted;\n}", "import { formatProdErrorMessage as _formatProdErrorMessage, formatProdErrorMessage as _formatProdErrorMessage2 } from \"@reduxjs/toolkit\";\nimport type { Middleware } from 'redux';\nimport type { IgnorePaths } from './serializableStateInvariantMiddleware';\nimport { getTimeMeasureUtils } from './utils';\ntype EntryProcessor = (key: string, value: any) => any;\n\n/**\n * The default `isImmutable` function.\n *\n * @public\n */\nexport function isImmutableDefault(value: unknown): boolean {\n  return typeof value !== 'object' || value == null || Object.isFrozen(value);\n}\nexport function trackForMutations(isImmutable: IsImmutableFunc, ignorePaths: IgnorePaths | undefined, obj: any) {\n  const trackedProperties = trackProperties(isImmutable, ignorePaths, obj);\n  return {\n    detectMutations() {\n      return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);\n    }\n  };\n}\ninterface TrackedProperty {\n  value: any;\n  children: Record<string, any>;\n}\nfunction trackProperties(isImmutable: IsImmutableFunc, ignorePaths: IgnorePaths = [], obj: Record<string, any>, path: string = '', checkedObjects: Set<Record<string, any>> = new Set()) {\n  const tracked: Partial<TrackedProperty> = {\n    value: obj\n  };\n  if (!isImmutable(obj) && !checkedObjects.has(obj)) {\n    checkedObjects.add(obj);\n    tracked.children = {};\n    for (const key in obj) {\n      const childPath = path ? path + '.' + key : key;\n      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\n        continue;\n      }\n      tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);\n    }\n  }\n  return (tracked as TrackedProperty);\n}\nfunction detectMutations(isImmutable: IsImmutableFunc, ignoredPaths: IgnorePaths = [], trackedProperty: TrackedProperty, obj: any, sameParentRef: boolean = false, path: string = ''): {\n  wasMutated: boolean;\n  path?: string;\n} {\n  const prevObj = trackedProperty ? trackedProperty.value : undefined;\n  const sameRef = prevObj === obj;\n  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\n    return {\n      wasMutated: true,\n      path\n    };\n  }\n  if (isImmutable(prevObj) || isImmutable(obj)) {\n    return {\n      wasMutated: false\n    };\n  }\n\n  // Gather all keys from prev (tracked) and after objs\n  const keysToDetect: Record<string, boolean> = {};\n  for (let key in trackedProperty.children) {\n    keysToDetect[key] = true;\n  }\n  for (let key in obj) {\n    keysToDetect[key] = true;\n  }\n  const hasIgnoredPaths = ignoredPaths.length > 0;\n  for (let key in keysToDetect) {\n    const nestedPath = path ? path + '.' + key : key;\n    if (hasIgnoredPaths) {\n      const hasMatches = ignoredPaths.some(ignored => {\n        if (ignored instanceof RegExp) {\n          return ignored.test(nestedPath);\n        }\n        return nestedPath === ignored;\n      });\n      if (hasMatches) {\n        continue;\n      }\n    }\n    const result = detectMutations(isImmutable, ignoredPaths, trackedProperty.children[key], obj[key], sameRef, nestedPath);\n    if (result.wasMutated) {\n      return result;\n    }\n  }\n  return {\n    wasMutated: false\n  };\n}\ntype IsImmutableFunc = (value: any) => boolean;\n\n/**\n * Options for `createImmutableStateInvariantMiddleware()`.\n *\n * @public\n */\nexport interface ImmutableStateInvariantMiddlewareOptions {\n  /**\n    Callback function to check if a value is considered to be immutable.\n    This function is applied recursively to every value contained in the state.\n    The default implementation will return true for primitive types\n    (like numbers, strings, booleans, null and undefined).\n   */\n  isImmutable?: IsImmutableFunc;\n  /**\n    An array of dot-separated path strings that match named nodes from\n    the root state to ignore when checking for immutability.\n    Defaults to undefined\n   */\n  ignoredPaths?: IgnorePaths;\n  /** Print a warning if checks take longer than N ms. Default: 32ms */\n  warnAfter?: number;\n}\n\n/**\n * Creates a middleware that checks whether any state was mutated in between\n * dispatches or during a dispatch. If any mutations are detected, an error is\n * thrown.\n *\n * @param options Middleware options.\n *\n * @public\n */\nexport function createImmutableStateInvariantMiddleware(options: ImmutableStateInvariantMiddlewareOptions = {}): Middleware {\n  if (process.env.NODE_ENV === 'production') {\n    return () => next => action => next(action);\n  } else {\n    function stringify(obj: any, serializer?: EntryProcessor, indent?: string | number, decycler?: EntryProcessor): string {\n      return JSON.stringify(obj, getSerialize(serializer, decycler), indent);\n    }\n    function getSerialize(serializer?: EntryProcessor, decycler?: EntryProcessor): EntryProcessor {\n      let stack: any[] = [],\n        keys: any[] = [];\n      if (!decycler) decycler = function (_: string, value: any) {\n        if (stack[0] === value) return '[Circular ~]';\n        return '[Circular ~.' + keys.slice(0, stack.indexOf(value)).join('.') + ']';\n      };\n      return function (this: any, key: string, value: any) {\n        if (stack.length > 0) {\n          var thisPos = stack.indexOf(this);\n          ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n          ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n          if (~stack.indexOf(value)) value = decycler!.call(this, key, value);\n        } else stack.push(value);\n        return serializer == null ? value : serializer.call(this, key, value);\n      };\n    }\n    let {\n      isImmutable = isImmutableDefault,\n      ignoredPaths,\n      warnAfter = 32\n    } = options;\n    const track = trackForMutations.bind(null, isImmutable, ignoredPaths);\n    return ({\n      getState\n    }) => {\n      let state = getState();\n      let tracker = track(state);\n      let result;\n      return next => action => {\n        const measureUtils = getTimeMeasureUtils(warnAfter, 'ImmutableStateInvariantMiddleware');\n        measureUtils.measureTime(() => {\n          state = getState();\n          result = tracker.detectMutations();\n          // Track before potentially not meeting the invariant\n          tracker = track(state);\n          if (result.wasMutated) {\n            throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(19) : `A state mutation was detected between dispatches, in the path '${result.path || ''}'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);\n          }\n        });\n        const dispatchedAction = next(action);\n        measureUtils.measureTime(() => {\n          state = getState();\n          result = tracker.detectMutations();\n          // Track before potentially not meeting the invariant\n          tracker = track(state);\n          if (result.wasMutated) {\n            throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(20) : `A state mutation was detected inside a dispatch, in the path: ${result.path || ''}. Take a look at the reducer(s) handling the action ${stringify(action)}. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);\n          }\n        });\n        measureUtils.warnIfExceeded();\n        return dispatchedAction;\n      };\n    };\n  }\n}", "import type { Middleware } from 'redux';\nimport { isAction, isPlainObject } from 'redux';\nimport { getTimeMeasureUtils } from './utils';\n\n/**\n * Returns true if the passed value is \"plain\", i.e. a value that is either\n * directly JSON-serializable (boolean, number, string, array, plain object)\n * or `undefined`.\n *\n * @param val The value to check.\n *\n * @public\n */\nexport function isPlain(val: any) {\n  const type = typeof val;\n  return val == null || type === 'string' || type === 'boolean' || type === 'number' || Array.isArray(val) || isPlainObject(val);\n}\ninterface NonSerializableValue {\n  keyPath: string;\n  value: unknown;\n}\nexport type IgnorePaths = readonly (string | RegExp)[];\n\n/**\n * @public\n */\nexport function findNonSerializableValue(value: unknown, path: string = '', isSerializable: (value: unknown) => boolean = isPlain, getEntries?: (value: unknown) => [string, any][], ignoredPaths: IgnorePaths = [], cache?: WeakSet<object>): NonSerializableValue | false {\n  let foundNestedSerializable: NonSerializableValue | false;\n  if (!isSerializable(value)) {\n    return {\n      keyPath: path || '<root>',\n      value: value\n    };\n  }\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n  if (cache?.has(value)) return false;\n  const entries = getEntries != null ? getEntries(value) : Object.entries(value);\n  const hasIgnoredPaths = ignoredPaths.length > 0;\n  for (const [key, nestedValue] of entries) {\n    const nestedPath = path ? path + '.' + key : key;\n    if (hasIgnoredPaths) {\n      const hasMatches = ignoredPaths.some(ignored => {\n        if (ignored instanceof RegExp) {\n          return ignored.test(nestedPath);\n        }\n        return nestedPath === ignored;\n      });\n      if (hasMatches) {\n        continue;\n      }\n    }\n    if (!isSerializable(nestedValue)) {\n      return {\n        keyPath: nestedPath,\n        value: nestedValue\n      };\n    }\n    if (typeof nestedValue === 'object') {\n      foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths, cache);\n      if (foundNestedSerializable) {\n        return foundNestedSerializable;\n      }\n    }\n  }\n  if (cache && isNestedFrozen(value)) cache.add(value);\n  return false;\n}\nexport function isNestedFrozen(value: object) {\n  if (!Object.isFrozen(value)) return false;\n  for (const nestedValue of Object.values(value)) {\n    if (typeof nestedValue !== 'object' || nestedValue === null) continue;\n    if (!isNestedFrozen(nestedValue)) return false;\n  }\n  return true;\n}\n\n/**\n * Options for `createSerializableStateInvariantMiddleware()`.\n *\n * @public\n */\nexport interface SerializableStateInvariantMiddlewareOptions {\n  /**\n   * The function to check if a value is considered serializable. This\n   * function is applied recursively to every value contained in the\n   * state. Defaults to `isPlain()`.\n   */\n  isSerializable?: (value: any) => boolean;\n  /**\n   * The function that will be used to retrieve entries from each\n   * value.  If unspecified, `Object.entries` will be used. Defaults\n   * to `undefined`.\n   */\n  getEntries?: (value: any) => [string, any][];\n\n  /**\n   * An array of action types to ignore when checking for serializability.\n   * Defaults to []\n   */\n  ignoredActions?: string[];\n\n  /**\n   * An array of dot-separated path strings or regular expressions to ignore\n   * when checking for serializability, Defaults to\n   * ['meta.arg', 'meta.baseQueryMeta']\n   */\n  ignoredActionPaths?: (string | RegExp)[];\n\n  /**\n   * An array of dot-separated path strings or regular expressions to ignore\n   * when checking for serializability, Defaults to []\n   */\n  ignoredPaths?: (string | RegExp)[];\n  /**\n   * Execution time warning threshold. If the middleware takes longer\n   * than `warnAfter` ms, a warning will be displayed in the console.\n   * Defaults to 32ms.\n   */\n  warnAfter?: number;\n\n  /**\n   * Opt out of checking state. When set to `true`, other state-related params will be ignored.\n   */\n  ignoreState?: boolean;\n\n  /**\n   * Opt out of checking actions. When set to `true`, other action-related params will be ignored.\n   */\n  ignoreActions?: boolean;\n\n  /**\n   * Opt out of caching the results. The cache uses a WeakSet and speeds up repeated checking processes.\n   * The cache is automatically disabled if no browser support for WeakSet is present.\n   */\n  disableCache?: boolean;\n}\n\n/**\n * Creates a middleware that, after every state change, checks if the new\n * state is serializable. If a non-serializable value is found within the\n * state, an error is printed to the console.\n *\n * @param options Middleware options.\n *\n * @public\n */\nexport function createSerializableStateInvariantMiddleware(options: SerializableStateInvariantMiddlewareOptions = {}): Middleware {\n  if (process.env.NODE_ENV === 'production') {\n    return () => next => action => next(action);\n  } else {\n    const {\n      isSerializable = isPlain,\n      getEntries,\n      ignoredActions = [],\n      ignoredActionPaths = ['meta.arg', 'meta.baseQueryMeta'],\n      ignoredPaths = [],\n      warnAfter = 32,\n      ignoreState = false,\n      ignoreActions = false,\n      disableCache = false\n    } = options;\n    const cache: WeakSet<object> | undefined = !disableCache && WeakSet ? new WeakSet() : undefined;\n    return storeAPI => next => action => {\n      if (!isAction(action)) {\n        return next(action);\n      }\n      const result = next(action);\n      const measureUtils = getTimeMeasureUtils(warnAfter, 'SerializableStateInvariantMiddleware');\n      if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf((action.type as any)) !== -1)) {\n        measureUtils.measureTime(() => {\n          const foundActionNonSerializableValue = findNonSerializableValue(action, '', isSerializable, getEntries, ignoredActionPaths, cache);\n          if (foundActionNonSerializableValue) {\n            const {\n              keyPath,\n              value\n            } = foundActionNonSerializableValue;\n            console.error(`A non-serializable value was detected in an action, in the path: \\`${keyPath}\\`. Value:`, value, '\\nTake a look at the logic that dispatched this action: ', action, '\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)', '\\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)');\n          }\n        });\n      }\n      if (!ignoreState) {\n        measureUtils.measureTime(() => {\n          const state = storeAPI.getState();\n          const foundStateNonSerializableValue = findNonSerializableValue(state, '', isSerializable, getEntries, ignoredPaths, cache);\n          if (foundStateNonSerializableValue) {\n            const {\n              keyPath,\n              value\n            } = foundStateNonSerializableValue;\n            console.error(`A non-serializable value was detected in the state, in the path: \\`${keyPath}\\`. Value:`, value, `\nTake a look at the reducer(s) handling this action type: ${action.type}.\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`);\n          }\n        });\n        measureUtils.warnIfExceeded();\n      }\n      return result;\n    };\n  }\n}", "import type { StoreEnhancer } from 'redux';\nexport const SHOULD_AUTOBATCH = 'RTK_autoBatch';\nexport const prepareAutoBatched = <T,>() => (payload: T): {\n  payload: T;\n  meta: unknown;\n} => ({\n  payload,\n  meta: {\n    [SHOULD_AUTOBATCH]: true\n  }\n});\nconst createQueueWithTimer = (timeout: number) => {\n  return (notify: () => void) => {\n    setTimeout(notify, timeout);\n  };\n};\n\n// requestAnimationFrame won't exist in SSR environments.\n// Fall back to a vague approximation just to keep from erroring.\nconst rAF = typeof window !== 'undefined' && window.requestAnimationFrame ? window.requestAnimationFrame : createQueueWithTimer(10);\nexport type AutoBatchOptions = {\n  type: 'tick';\n} | {\n  type: 'timer';\n  timeout: number;\n} | {\n  type: 'raf';\n} | {\n  type: 'callback';\n  queueNotification: (notify: () => void) => void;\n};\n\n/**\n * A Redux store enhancer that watches for \"low-priority\" actions, and delays\n * notifying subscribers until either the queued callback executes or the\n * next \"standard-priority\" action is dispatched.\n *\n * This allows dispatching multiple \"low-priority\" actions in a row with only\n * a single subscriber notification to the UI after the sequence of actions\n * is finished, thus improving UI re-render performance.\n *\n * Watches for actions with the `action.meta[SHOULD_AUTOBATCH]` attribute.\n * This can be added to `action.meta` manually, or by using the\n * `prepareAutoBatched` helper.\n *\n * By default, it will queue a notification for the end of the event loop tick.\n * However, you can pass several other options to configure the behavior:\n * - `{type: 'tick'}`: queues using `queueMicrotask`\n * - `{type: 'timer', timeout: number}`: queues using `setTimeout`\n * - `{type: 'raf'}`: queues using `requestAnimationFrame` (default)\n * - `{type: 'callback', queueNotification: (notify: () => void) => void}`: lets you provide your own callback\n *\n *\n */\nexport const autoBatchEnhancer = (options: AutoBatchOptions = {\n  type: 'raf'\n}): StoreEnhancer => next => (...args) => {\n  const store = next(...args);\n  let notifying = true;\n  let shouldNotifyAtEndOfTick = false;\n  let notificationQueued = false;\n  const listeners = new Set<() => void>();\n  const queueCallback = options.type === 'tick' ? queueMicrotask : options.type === 'raf' ? rAF : options.type === 'callback' ? options.queueNotification : createQueueWithTimer(options.timeout);\n  const notifyListeners = () => {\n    // We're running at the end of the event loop tick.\n    // Run the real listener callbacks to actually update the UI.\n    notificationQueued = false;\n    if (shouldNotifyAtEndOfTick) {\n      shouldNotifyAtEndOfTick = false;\n      listeners.forEach(l => l());\n    }\n  };\n  return Object.assign({}, store, {\n    // Override the base `store.subscribe` method to keep original listeners\n    // from running if we're delaying notifications\n    subscribe(listener: () => void) {\n      // Each wrapped listener will only call the real listener if\n      // the `notifying` flag is currently active when it's called.\n      // This lets the base store work as normal, while the actual UI\n      // update becomes controlled by this enhancer.\n      const wrappedListener: typeof listener = () => notifying && listener();\n      const unsubscribe = store.subscribe(wrappedListener);\n      listeners.add(listener);\n      return () => {\n        unsubscribe();\n        listeners.delete(listener);\n      };\n    },\n    // Override the base `store.dispatch` method so that we can check actions\n    // for the `shouldAutoBatch` flag and determine if batching is active\n    dispatch(action: any) {\n      try {\n        // If the action does _not_ have the `shouldAutoBatch` flag,\n        // we resume/continue normal notify-after-each-dispatch behavior\n        notifying = !action?.meta?.[SHOULD_AUTOBATCH];\n        // If a `notifyListeners` microtask was queued, you can't cancel it.\n        // Instead, we set a flag so that it's a no-op when it does run\n        shouldNotifyAtEndOfTick = !notifying;\n        if (shouldNotifyAtEndOfTick) {\n          // We've seen at least 1 action with `SHOULD_AUTOBATCH`. Try to queue\n          // a microtask to notify listeners at the end of the event loop tick.\n          // Make sure we only enqueue this _once_ per tick.\n          if (!notificationQueued) {\n            notificationQueued = true;\n            queueCallback(notifyListeners);\n          }\n        }\n        // Go ahead and process the action as usual, including reducers.\n        // If normal notification behavior is enabled, the store will notify\n        // all of its own listeners, and the wrapper callbacks above will\n        // see `notifying` is true and pass on to the real listener callbacks.\n        // If we're \"batching\" behavior, then the wrapped callbacks will\n        // bail out, causing the base store notification behavior to be no-ops.\n        return store.dispatch(action);\n      } finally {\n        // Assume we're back to normal behavior after each action\n        notifying = true;\n      }\n    }\n  });\n};", "import type { StoreEnhancer } from 'redux';\nimport type { AutoBatchOptions } from './autoBatchEnhancer';\nimport { autoBatchEnhancer } from './autoBatchEnhancer';\nimport { Tuple } from './utils';\nimport type { Middlewares } from './configureStore';\nimport type { ExtractDispatchExtensions } from './tsHelpers';\ntype GetDefaultEnhancersOptions = {\n  autoBatch?: boolean | AutoBatchOptions;\n};\nexport type GetDefaultEnhancers<M extends Middlewares<any>> = (options?: GetDefaultEnhancersOptions) => Tuple<[StoreEnhancer<{\n  dispatch: ExtractDispatchExtensions<M>;\n}>]>;\nexport const buildGetDefaultEnhancers = <M extends Middlewares<any>,>(middlewareEnhancer: StoreEnhancer<{\n  dispatch: ExtractDispatchExtensions<M>;\n}>): GetDefaultEnhancers<M> => function getDefaultEnhancers(options) {\n  const {\n    autoBatch = true\n  } = options ?? {};\n  let enhancerArray = new Tuple<StoreEnhancer[]>(middlewareEnhancer);\n  if (autoBatch) {\n    enhancerArray.push(autoBatchEnhancer(typeof autoBatch === 'object' ? autoBatch : undefined));\n  }\n  return (enhancerArray as any);\n};", "import { formatProdErrorMessage as _formatProdErrorMessage, formatProdErrorMessage as _formatProdErrorMessage2 } from \"@reduxjs/toolkit\";\nimport type { Draft } from 'immer';\nimport { produce as createNextState, isDraft, isDraftable } from 'immer';\nimport type { Action, Reducer, UnknownAction } from 'redux';\nimport type { ActionReducerMapBuilder } from './mapBuilders';\nimport { executeReducerBuilderCallback } from './mapBuilders';\nimport type { NoInfer, TypeGuard } from './tsHelpers';\nimport { freezeDraftable } from './utils';\n\n/**\r\n * Defines a mapping from action types to corresponding action object shapes.\r\n *\r\n * @deprecated This should not be used manually - it is only used for internal\r\n *             inference purposes and should not have any further value.\r\n *             It might be removed in the future.\r\n * @public\r\n */\nexport type Actions<T extends keyof any = string> = Record<T, Action>;\nexport type ActionMatcherDescription<S, A extends Action> = {\n  matcher: TypeGuard<A>;\n  reducer: CaseReducer<S, NoInfer<A>>;\n};\nexport type ReadonlyActionMatcherDescriptionCollection<S> = ReadonlyArray<ActionMatcherDescription<S, any>>;\nexport type ActionMatcherDescriptionCollection<S> = Array<ActionMatcherDescription<S, any>>;\n\n/**\r\n * A *case reducer* is a reducer function for a specific action type. Case\r\n * reducers can be composed to full reducers using `createReducer()`.\r\n *\r\n * Unlike a normal Redux reducer, a case reducer is never called with an\r\n * `undefined` state to determine the initial state. Instead, the initial\r\n * state is explicitly specified as an argument to `createReducer()`.\r\n *\r\n * In addition, a case reducer can choose to mutate the passed-in `state`\r\n * value directly instead of returning a new state. This does not actually\r\n * cause the store state to be mutated directly; instead, thanks to\r\n * [immer](https://github.com/mweststrate/immer), the mutations are\r\n * translated to copy operations that result in a new state.\r\n *\r\n * @public\r\n */\nexport type CaseReducer<S = any, A extends Action = UnknownAction> = (state: Draft<S>, action: A) => NoInfer<S> | void | Draft<NoInfer<S>>;\n\n/**\r\n * A mapping from action types to case reducers for `createReducer()`.\r\n *\r\n * @deprecated This should not be used manually - it is only used\r\n *             for internal inference purposes and using it manually\r\n *             would lead to type erasure.\r\n *             It might be removed in the future.\r\n * @public\r\n */\nexport type CaseReducers<S, AS extends Actions> = { [T in keyof AS]: AS[T] extends Action ? CaseReducer<S, AS[T]> : void };\nexport type NotFunction<T> = T extends Function ? never : T;\nfunction isStateFunction<S>(x: unknown): x is () => S {\n  return typeof x === 'function';\n}\nexport type ReducerWithInitialState<S extends NotFunction<any>> = Reducer<S> & {\n  getInitialState: () => S;\n};\n\n/**\r\n * A utility function that allows defining a reducer as a mapping from action\r\n * type to *case reducer* functions that handle these action types. The\r\n * reducer's initial state is passed as the first argument.\r\n *\r\n * @remarks\r\n * The body of every case reducer is implicitly wrapped with a call to\r\n * `produce()` from the [immer](https://github.com/mweststrate/immer) library.\r\n * This means that rather than returning a new state object, you can also\r\n * mutate the passed-in state object directly; these mutations will then be\r\n * automatically and efficiently translated into copies, giving you both\r\n * convenience and immutability.\r\n *\r\n * @overloadSummary\r\n * This function accepts a callback that receives a `builder` object as its argument.\r\n * That builder provides `addCase`, `addMatcher` and `addDefaultCase` functions that may be\r\n * called to define what actions this reducer will handle.\r\n *\r\n * @param initialState - `State | (() => State)`: The initial state that should be used when the reducer is called the first time. This may also be a \"lazy initializer\" function, which should return an initial state value when called. This will be used whenever the reducer is called with `undefined` as its state value, and is primarily useful for cases like reading initial state from `localStorage`.\r\n * @param builderCallback - `(builder: Builder) => void` A callback that receives a *builder* object to define\r\n *   case reducers via calls to `builder.addCase(actionCreatorOrType, reducer)`.\r\n * @example\r\n```ts\r\nimport {\r\n  createAction,\r\n  createReducer,\r\n  UnknownAction,\r\n  PayloadAction,\r\n} from \"@reduxjs/toolkit\";\r\n\r\nconst increment = createAction<number>(\"increment\");\r\nconst decrement = createAction<number>(\"decrement\");\r\n\r\nfunction isActionWithNumberPayload(\r\n  action: UnknownAction\r\n): action is PayloadAction<number> {\r\n  return typeof action.payload === \"number\";\r\n}\r\n\r\nconst reducer = createReducer(\r\n  {\r\n    counter: 0,\r\n    sumOfNumberPayloads: 0,\r\n    unhandledActions: 0,\r\n  },\r\n  (builder) => {\r\n    builder\r\n      .addCase(increment, (state, action) => {\r\n        // action is inferred correctly here\r\n        state.counter += action.payload;\r\n      })\r\n      // You can chain calls, or have separate `builder.addCase()` lines each time\r\n      .addCase(decrement, (state, action) => {\r\n        state.counter -= action.payload;\r\n      })\r\n      // You can apply a \"matcher function\" to incoming actions\r\n      .addMatcher(isActionWithNumberPayload, (state, action) => {})\r\n      // and provide a default case if no other handlers matched\r\n      .addDefaultCase((state, action) => {});\r\n  }\r\n);\r\n```\r\n * @public\r\n */\nexport function createReducer<S extends NotFunction<any>>(initialState: S | (() => S), mapOrBuilderCallback: (builder: ActionReducerMapBuilder<S>) => void): ReducerWithInitialState<S> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof mapOrBuilderCallback === 'object') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(8) : \"The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer\");\n    }\n  }\n  let [actionsMap, finalActionMatchers, finalDefaultCaseReducer] = executeReducerBuilderCallback(mapOrBuilderCallback);\n\n  // Ensure the initial state gets frozen either way (if draftable)\n  let getInitialState: () => S;\n  if (isStateFunction(initialState)) {\n    getInitialState = () => freezeDraftable(initialState());\n  } else {\n    const frozenInitialState = freezeDraftable(initialState);\n    getInitialState = () => frozenInitialState;\n  }\n  function reducer(state = getInitialState(), action: any): S {\n    let caseReducers = [actionsMap[action.type], ...finalActionMatchers.filter(({\n      matcher\n    }) => matcher(action)).map(({\n      reducer\n    }) => reducer)];\n    if (caseReducers.filter(cr => !!cr).length === 0) {\n      caseReducers = [finalDefaultCaseReducer];\n    }\n    return caseReducers.reduce((previousState, caseReducer): S => {\n      if (caseReducer) {\n        if (isDraft(previousState)) {\n          // If it's already a draft, we must already be inside a `createNextState` call,\n          // likely because this is being wrapped in `createReducer`, `createSlice`, or nested\n          // inside an existing draft. It's safe to just pass the draft to the mutator.\n          const draft = (previousState as Draft<S>); // We can assume this is already a draft\n          const result = caseReducer(draft, action);\n          if (result === undefined) {\n            return previousState;\n          }\n          return (result as S);\n        } else if (!isDraftable(previousState)) {\n          // If state is not draftable (ex: a primitive, such as 0), we want to directly\n          // return the caseReducer func and not wrap it with produce.\n          const result = caseReducer((previousState as any), action);\n          if (result === undefined) {\n            if (previousState === null) {\n              return previousState;\n            }\n            throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(9) : 'A case reducer on a non-draftable value must not return undefined');\n          }\n          return (result as S);\n        } else {\n          // @ts-ignore createNextState() produces an Immutable<Draft<S>> rather\n          // than an Immutable<S>, and TypeScript cannot find out how to reconcile\n          // these two types.\n          return createNextState(previousState, (draft: Draft<S>) => {\n            return caseReducer(draft, action);\n          });\n        }\n      }\n      return previousState;\n    }, state);\n  }\n  reducer.getInitialState = getInitialState;\n  return (reducer as ReducerWithInitialState<S>);\n}", "import { formatProdErrorMessage as _formatProdErrorMessage, formatProdErrorMessage as _formatProdErrorMessage2, formatProdErrorMessage as _formatProdErrorMessage3, formatProdErrorMessage as _formatProdErrorMessage4, formatProdErrorMessage as _formatProdErrorMessage5, formatProdErrorMessage as _formatProdErrorMessage6 } from \"@reduxjs/toolkit\";\nimport type { Action } from 'redux';\nimport type { CaseReducer, CaseReducers, ActionMatcherDescriptionCollection } from './createReducer';\nimport type { TypeGuard } from './tsHelpers';\nexport type TypedActionCreator<Type extends string> = {\n  (...args: any[]): Action<Type>;\n  type: Type;\n};\n\n/**\n * A builder for an action <-> reducer map.\n *\n * @public\n */\nexport interface ActionReducerMapBuilder<State> {\n  /**\n   * Adds a case reducer to handle a single exact action type.\n   * @remarks\n   * All calls to `builder.addCase` must come before any calls to `builder.addMatcher` or `builder.addDefaultCase`.\n   * @param actionCreator - Either a plain action type string, or an action creator generated by [`createAction`](./createAction) that can be used to determine the action type.\n   * @param reducer - The actual case reducer function.\n   */\n  addCase<ActionCreator extends TypedActionCreator<string>>(actionCreator: ActionCreator, reducer: CaseReducer<State, ReturnType<ActionCreator>>): ActionReducerMapBuilder<State>;\n  /**\n   * Adds a case reducer to handle a single exact action type.\n   * @remarks\n   * All calls to `builder.addCase` must come before any calls to `builder.addMatcher` or `builder.addDefaultCase`.\n   * @param actionCreator - Either a plain action type string, or an action creator generated by [`createAction`](./createAction) that can be used to determine the action type.\n   * @param reducer - The actual case reducer function.\n   */\n  addCase<Type extends string, A extends Action<Type>>(type: Type, reducer: CaseReducer<State, A>): ActionReducerMapBuilder<State>;\n\n  /**\n   * Allows you to match your incoming actions against your own filter function instead of only the `action.type` property.\n   * @remarks\n   * If multiple matcher reducers match, all of them will be executed in the order\n   * they were defined in - even if a case reducer already matched.\n   * All calls to `builder.addMatcher` must come after any calls to `builder.addCase` and before any calls to `builder.addDefaultCase`.\n   * @param matcher - A matcher function. In TypeScript, this should be a [type predicate](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates)\n   *   function\n   * @param reducer - The actual case reducer function.\n   *\n   * @example\n  ```ts\n  import {\n  createAction,\n  createReducer,\n  AsyncThunk,\n  UnknownAction,\n  } from \"@reduxjs/toolkit\";\n  type GenericAsyncThunk = AsyncThunk<unknown, unknown, any>;\n  type PendingAction = ReturnType<GenericAsyncThunk[\"pending\"]>;\n  type RejectedAction = ReturnType<GenericAsyncThunk[\"rejected\"]>;\n  type FulfilledAction = ReturnType<GenericAsyncThunk[\"fulfilled\"]>;\n  const initialState: Record<string, string> = {};\n  const resetAction = createAction(\"reset-tracked-loading-state\");\n  function isPendingAction(action: UnknownAction): action is PendingAction {\n  return typeof action.type === \"string\" && action.type.endsWith(\"/pending\");\n  }\n  const reducer = createReducer(initialState, (builder) => {\n  builder\n    .addCase(resetAction, () => initialState)\n    // matcher can be defined outside as a type predicate function\n    .addMatcher(isPendingAction, (state, action) => {\n      state[action.meta.requestId] = \"pending\";\n    })\n    .addMatcher(\n      // matcher can be defined inline as a type predicate function\n      (action): action is RejectedAction => action.type.endsWith(\"/rejected\"),\n      (state, action) => {\n        state[action.meta.requestId] = \"rejected\";\n      }\n    )\n    // matcher can just return boolean and the matcher can receive a generic argument\n    .addMatcher<FulfilledAction>(\n      (action) => action.type.endsWith(\"/fulfilled\"),\n      (state, action) => {\n        state[action.meta.requestId] = \"fulfilled\";\n      }\n    );\n  });\n  ```\n   */\n  addMatcher<A>(matcher: TypeGuard<A> | ((action: any) => boolean), reducer: CaseReducer<State, A extends Action ? A : A & Action>): Omit<ActionReducerMapBuilder<State>, 'addCase'>;\n\n  /**\n   * Adds a \"default case\" reducer that is executed if no case reducer and no matcher\n   * reducer was executed for this action.\n   * @param reducer - The fallback \"default case\" reducer function.\n   *\n   * @example\n  ```ts\n  import { createReducer } from '@reduxjs/toolkit'\n  const initialState = { otherActions: 0 }\n  const reducer = createReducer(initialState, builder => {\n  builder\n    // .addCase(...)\n    // .addMatcher(...)\n    .addDefaultCase((state, action) => {\n      state.otherActions++\n    })\n  })\n  ```\n   */\n  addDefaultCase(reducer: CaseReducer<State, Action>): {};\n}\nexport function executeReducerBuilderCallback<S>(builderCallback: (builder: ActionReducerMapBuilder<S>) => void): [CaseReducers<S, any>, ActionMatcherDescriptionCollection<S>, CaseReducer<S, Action> | undefined] {\n  const actionsMap: CaseReducers<S, any> = {};\n  const actionMatchers: ActionMatcherDescriptionCollection<S> = [];\n  let defaultCaseReducer: CaseReducer<S, Action> | undefined;\n  const builder = {\n    addCase(typeOrActionCreator: string | TypedActionCreator<any>, reducer: CaseReducer<S>) {\n      if (process.env.NODE_ENV !== 'production') {\n        /*\n         to keep the definition by the user in line with actual behavior,\n         we enforce `addCase` to always be called before calling `addMatcher`\n         as matching cases take precedence over matchers\n         */\n        if (actionMatchers.length > 0) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(26) : '`builder.addCase` should only be called before calling `builder.addMatcher`');\n        }\n        if (defaultCaseReducer) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(27) : '`builder.addCase` should only be called before calling `builder.addDefaultCase`');\n        }\n      }\n      const type = typeof typeOrActionCreator === 'string' ? typeOrActionCreator : typeOrActionCreator.type;\n      if (!type) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage3(28) : '`builder.addCase` cannot be called with an empty action type');\n      }\n      if (type in actionsMap) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage4(29) : '`builder.addCase` cannot be called with two reducers for the same action type ' + `'${type}'`);\n      }\n      actionsMap[type] = reducer;\n      return builder;\n    },\n    addMatcher<A>(matcher: TypeGuard<A>, reducer: CaseReducer<S, A extends Action ? A : A & Action>) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (defaultCaseReducer) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage5(30) : '`builder.addMatcher` should only be called before calling `builder.addDefaultCase`');\n        }\n      }\n      actionMatchers.push({\n        matcher,\n        reducer\n      });\n      return builder;\n    },\n    addDefaultCase(reducer: CaseReducer<S, Action>) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (defaultCaseReducer) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage6(31) : '`builder.addDefaultCase` can only be called once');\n        }\n      }\n      defaultCaseReducer = reducer;\n      return builder;\n    }\n  };\n  builderCallback(builder);\n  return [actionsMap, actionMatchers, defaultCaseReducer];\n}", "import type { ActionFromMatcher, Matcher, UnionToIntersection } from './tsHelpers';\nimport { hasMatchFunction } from './tsHelpers';\nimport type { AsyncThunk, AsyncThunkFulfilledActionCreator, AsyncThunkPendingActionCreator, AsyncThunkRejectedActionCreator } from './createAsyncThunk';\n\n/** @public */\nexport type ActionMatchingAnyOf<Matchers extends Matcher<any>[]> = ActionFromMatcher<Matchers[number]>;\n\n/** @public */\nexport type ActionMatchingAllOf<Matchers extends Matcher<any>[]> = UnionToIntersection<ActionMatchingAnyOf<Matchers>>;\nconst matches = (matcher: Matcher<any>, action: any) => {\n  if (hasMatchFunction(matcher)) {\n    return matcher.match(action);\n  } else {\n    return matcher(action);\n  }\n};\n\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action matches any one of the supplied type guards or action\n * creators.\n *\n * @param matchers The type guards or action creators to match against.\n *\n * @public\n */\nexport function isAnyOf<Matchers extends Matcher<any>[]>(...matchers: Matchers) {\n  return (action: any): action is ActionMatchingAnyOf<Matchers> => {\n    return matchers.some(matcher => matches(matcher, action));\n  };\n}\n\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action matches all of the supplied type guards or action\n * creators.\n *\n * @param matchers The type guards or action creators to match against.\n *\n * @public\n */\nexport function isAllOf<Matchers extends Matcher<any>[]>(...matchers: Matchers) {\n  return (action: any): action is ActionMatchingAllOf<Matchers> => {\n    return matchers.every(matcher => matches(matcher, action));\n  };\n}\n\n/**\n * @param action A redux action\n * @param validStatus An array of valid meta.requestStatus values\n *\n * @internal\n */\nexport function hasExpectedRequestMetadata(action: any, validStatus: readonly string[]) {\n  if (!action || !action.meta) return false;\n  const hasValidRequestId = typeof action.meta.requestId === 'string';\n  const hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;\n  return hasValidRequestId && hasValidRequestStatus;\n}\nfunction isAsyncThunkArray(a: [any] | AnyAsyncThunk[]): a is AnyAsyncThunk[] {\n  return typeof a[0] === 'function' && 'pending' in a[0] && 'fulfilled' in a[0] && 'rejected' in a[0];\n}\nexport type UnknownAsyncThunkPendingAction = ReturnType<AsyncThunkPendingActionCreator<unknown>>;\nexport type PendingActionFromAsyncThunk<T extends AnyAsyncThunk> = ActionFromMatcher<T['pending']>;\n\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action was created by an async thunk action creator, and that\n * the action is pending.\n *\n * @public\n */\nexport function isPending(): (action: any) => action is UnknownAsyncThunkPendingAction;\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action belongs to one of the provided async thunk action creators,\n * and that the action is pending.\n *\n * @param asyncThunks (optional) The async thunk action creators to match against.\n *\n * @public\n */\nexport function isPending<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks): (action: any) => action is PendingActionFromAsyncThunk<AsyncThunks[number]>;\n/**\n * Tests if `action` is a pending thunk action\n * @public\n */\nexport function isPending(action: any): action is UnknownAsyncThunkPendingAction;\nexport function isPending<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks | [any]) {\n  if (asyncThunks.length === 0) {\n    return (action: any) => hasExpectedRequestMetadata(action, ['pending']);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isPending()(asyncThunks[0]);\n  }\n  return isAnyOf(...asyncThunks.map(asyncThunk => asyncThunk.pending));\n}\nexport type UnknownAsyncThunkRejectedAction = ReturnType<AsyncThunkRejectedActionCreator<unknown, unknown>>;\nexport type RejectedActionFromAsyncThunk<T extends AnyAsyncThunk> = ActionFromMatcher<T['rejected']>;\n\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action was created by an async thunk action creator, and that\n * the action is rejected.\n *\n * @public\n */\nexport function isRejected(): (action: any) => action is UnknownAsyncThunkRejectedAction;\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action belongs to one of the provided async thunk action creators,\n * and that the action is rejected.\n *\n * @param asyncThunks (optional) The async thunk action creators to match against.\n *\n * @public\n */\nexport function isRejected<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks): (action: any) => action is RejectedActionFromAsyncThunk<AsyncThunks[number]>;\n/**\n * Tests if `action` is a rejected thunk action\n * @public\n */\nexport function isRejected(action: any): action is UnknownAsyncThunkRejectedAction;\nexport function isRejected<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks | [any]) {\n  if (asyncThunks.length === 0) {\n    return (action: any) => hasExpectedRequestMetadata(action, ['rejected']);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejected()(asyncThunks[0]);\n  }\n  return isAnyOf(...asyncThunks.map(asyncThunk => asyncThunk.rejected));\n}\nexport type UnknownAsyncThunkRejectedWithValueAction = ReturnType<AsyncThunkRejectedActionCreator<unknown, unknown>>;\nexport type RejectedWithValueActionFromAsyncThunk<T extends AnyAsyncThunk> = ActionFromMatcher<T['rejected']> & (T extends AsyncThunk<any, any, {\n  rejectValue: infer RejectedValue;\n}> ? {\n  payload: RejectedValue;\n} : unknown);\n\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action was created by an async thunk action creator, and that\n * the action is rejected with value.\n *\n * @public\n */\nexport function isRejectedWithValue(): (action: any) => action is UnknownAsyncThunkRejectedAction;\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action belongs to one of the provided async thunk action creators,\n * and that the action is rejected with value.\n *\n * @param asyncThunks (optional) The async thunk action creators to match against.\n *\n * @public\n */\nexport function isRejectedWithValue<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks): (action: any) => action is RejectedWithValueActionFromAsyncThunk<AsyncThunks[number]>;\n/**\n * Tests if `action` is a rejected thunk action with value\n * @public\n */\nexport function isRejectedWithValue(action: any): action is UnknownAsyncThunkRejectedAction;\nexport function isRejectedWithValue<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks | [any]) {\n  const hasFlag = (action: any): action is any => {\n    return action && action.meta && action.meta.rejectedWithValue;\n  };\n  if (asyncThunks.length === 0) {\n    return isAllOf(isRejected(...asyncThunks), hasFlag);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejectedWithValue()(asyncThunks[0]);\n  }\n  return isAllOf(isRejected(...asyncThunks), hasFlag);\n}\nexport type UnknownAsyncThunkFulfilledAction = ReturnType<AsyncThunkFulfilledActionCreator<unknown, unknown>>;\nexport type FulfilledActionFromAsyncThunk<T extends AnyAsyncThunk> = ActionFromMatcher<T['fulfilled']>;\n\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action was created by an async thunk action creator, and that\n * the action is fulfilled.\n *\n * @public\n */\nexport function isFulfilled(): (action: any) => action is UnknownAsyncThunkFulfilledAction;\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action belongs to one of the provided async thunk action creators,\n * and that the action is fulfilled.\n *\n * @param asyncThunks (optional) The async thunk action creators to match against.\n *\n * @public\n */\nexport function isFulfilled<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks): (action: any) => action is FulfilledActionFromAsyncThunk<AsyncThunks[number]>;\n/**\n * Tests if `action` is a fulfilled thunk action\n * @public\n */\nexport function isFulfilled(action: any): action is UnknownAsyncThunkFulfilledAction;\nexport function isFulfilled<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks | [any]) {\n  if (asyncThunks.length === 0) {\n    return (action: any) => hasExpectedRequestMetadata(action, ['fulfilled']);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isFulfilled()(asyncThunks[0]);\n  }\n  return isAnyOf(...asyncThunks.map(asyncThunk => asyncThunk.fulfilled));\n}\nexport type UnknownAsyncThunkAction = UnknownAsyncThunkPendingAction | UnknownAsyncThunkRejectedAction | UnknownAsyncThunkFulfilledAction;\nexport type AnyAsyncThunk = {\n  pending: {\n    match: (action: any) => action is any;\n  };\n  fulfilled: {\n    match: (action: any) => action is any;\n  };\n  rejected: {\n    match: (action: any) => action is any;\n  };\n};\nexport type ActionsFromAsyncThunk<T extends AnyAsyncThunk> = ActionFromMatcher<T['pending']> | ActionFromMatcher<T['fulfilled']> | ActionFromMatcher<T['rejected']>;\n\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action was created by an async thunk action creator.\n *\n * @public\n */\nexport function isAsyncThunkAction(): (action: any) => action is UnknownAsyncThunkAction;\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action belongs to one of the provided async thunk action creators.\n *\n * @param asyncThunks (optional) The async thunk action creators to match against.\n *\n * @public\n */\nexport function isAsyncThunkAction<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks): (action: any) => action is ActionsFromAsyncThunk<AsyncThunks[number]>;\n/**\n * Tests if `action` is a thunk action\n * @public\n */\nexport function isAsyncThunkAction(action: any): action is UnknownAsyncThunkAction;\nexport function isAsyncThunkAction<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks | [any]) {\n  if (asyncThunks.length === 0) {\n    return (action: any) => hasExpectedRequestMetadata(action, ['pending', 'fulfilled', 'rejected']);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isAsyncThunkAction()(asyncThunks[0]);\n  }\n  return isAnyOf(...asyncThunks.flatMap(asyncThunk => [asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled]));\n}", "// Borrowed from https://github.com/ai/nanoid/blob/3.0.2/non-secure/index.js\n// This alphabet uses `A-Za-z0-9_-` symbols. A genetic algorithm helped\n// optimize the gzip compression for this alphabet.\nlet urlAlphabet = 'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';\n\n/**\r\n *\r\n * @public\r\n */\nexport let nanoid = (size = 21) => {\n  let id = '';\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  let i = size;\n  while (i--) {\n    // `| 0` is more compact and faster than `Math.floor()`.\n    id += urlAlphabet[Math.random() * 64 | 0];\n  }\n  return id;\n};", "import type { Dispatch, UnknownAction } from 'redux';\nimport type { ThunkDispatch } from 'redux-thunk';\nimport type { ActionCreatorWithPreparedPayload } from './createAction';\nimport { createAction } from './createAction';\nimport { isAnyOf } from './matchers';\nimport { nanoid } from './nanoid';\nimport type { FallbackIfUnknown, Id, IsAny, IsUnknown, SafePromise } from './tsHelpers';\nexport type BaseThunkAPI<S, E, D extends Dispatch = Dispatch, RejectedValue = unknown, RejectedMeta = unknown, FulfilledMeta = unknown> = {\n  dispatch: D;\n  getState: () => S;\n  extra: E;\n  requestId: string;\n  signal: AbortSignal;\n  abort: (reason?: string) => void;\n  rejectWithValue: IsUnknown<RejectedMeta, (value: RejectedValue) => RejectWithValue<RejectedValue, RejectedMeta>, (value: RejectedValue, meta: RejectedMeta) => RejectWithValue<RejectedValue, RejectedMeta>>;\n  fulfillWithValue: IsUnknown<FulfilledMeta, <FulfilledValue>(value: FulfilledValue) => FulfilledValue, <FulfilledValue>(value: FulfilledValue, meta: FulfilledMeta) => FulfillWithMeta<FulfilledValue, FulfilledMeta>>;\n};\n\n/**\n * @public\n */\nexport interface SerializedError {\n  name?: string;\n  message?: string;\n  stack?: string;\n  code?: string;\n}\nconst commonProperties: Array<keyof SerializedError> = ['name', 'message', 'stack', 'code'];\nclass RejectWithValue<Payload, RejectedMeta> {\n  /*\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\n  does not exist at runtime\n  */\n  private readonly _type!: 'RejectWithValue';\n  constructor(public readonly payload: Payload, public readonly meta: RejectedMeta) {}\n}\nclass FulfillWithMeta<Payload, FulfilledMeta> {\n  /*\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\n  does not exist at runtime\n  */\n  private readonly _type!: 'FulfillWithMeta';\n  constructor(public readonly payload: Payload, public readonly meta: FulfilledMeta) {}\n}\n\n/**\n * Serializes an error into a plain object.\n * Reworked from https://github.com/sindresorhus/serialize-error\n *\n * @public\n */\nexport const miniSerializeError = (value: any): SerializedError => {\n  if (typeof value === 'object' && value !== null) {\n    const simpleError: SerializedError = {};\n    for (const property of commonProperties) {\n      if (typeof value[property] === 'string') {\n        simpleError[property] = value[property];\n      }\n    }\n    return simpleError;\n  }\n  return {\n    message: String(value)\n  };\n};\nexport type AsyncThunkConfig = {\n  state?: unknown;\n  dispatch?: ThunkDispatch<unknown, unknown, UnknownAction>;\n  extra?: unknown;\n  rejectValue?: unknown;\n  serializedErrorType?: unknown;\n  pendingMeta?: unknown;\n  fulfilledMeta?: unknown;\n  rejectedMeta?: unknown;\n};\nexport type GetState<ThunkApiConfig> = ThunkApiConfig extends {\n  state: infer State;\n} ? State : unknown;\ntype GetExtra<ThunkApiConfig> = ThunkApiConfig extends {\n  extra: infer Extra;\n} ? Extra : unknown;\ntype GetDispatch<ThunkApiConfig> = ThunkApiConfig extends {\n  dispatch: infer Dispatch;\n} ? FallbackIfUnknown<Dispatch, ThunkDispatch<GetState<ThunkApiConfig>, GetExtra<ThunkApiConfig>, UnknownAction>> : ThunkDispatch<GetState<ThunkApiConfig>, GetExtra<ThunkApiConfig>, UnknownAction>;\nexport type GetThunkAPI<ThunkApiConfig> = BaseThunkAPI<GetState<ThunkApiConfig>, GetExtra<ThunkApiConfig>, GetDispatch<ThunkApiConfig>, GetRejectValue<ThunkApiConfig>, GetRejectedMeta<ThunkApiConfig>, GetFulfilledMeta<ThunkApiConfig>>;\ntype GetRejectValue<ThunkApiConfig> = ThunkApiConfig extends {\n  rejectValue: infer RejectValue;\n} ? RejectValue : unknown;\ntype GetPendingMeta<ThunkApiConfig> = ThunkApiConfig extends {\n  pendingMeta: infer PendingMeta;\n} ? PendingMeta : unknown;\ntype GetFulfilledMeta<ThunkApiConfig> = ThunkApiConfig extends {\n  fulfilledMeta: infer FulfilledMeta;\n} ? FulfilledMeta : unknown;\ntype GetRejectedMeta<ThunkApiConfig> = ThunkApiConfig extends {\n  rejectedMeta: infer RejectedMeta;\n} ? RejectedMeta : unknown;\ntype GetSerializedErrorType<ThunkApiConfig> = ThunkApiConfig extends {\n  serializedErrorType: infer GetSerializedErrorType;\n} ? GetSerializedErrorType : SerializedError;\ntype MaybePromise<T> = T | Promise<T> | (T extends any ? Promise<T> : never);\n\n/**\n * A type describing the return value of the `payloadCreator` argument to `createAsyncThunk`.\n * Might be useful for wrapping `createAsyncThunk` in custom abstractions.\n *\n * @public\n */\nexport type AsyncThunkPayloadCreatorReturnValue<Returned, ThunkApiConfig extends AsyncThunkConfig> = MaybePromise<IsUnknown<GetFulfilledMeta<ThunkApiConfig>, Returned, FulfillWithMeta<Returned, GetFulfilledMeta<ThunkApiConfig>>> | RejectWithValue<GetRejectValue<ThunkApiConfig>, GetRejectedMeta<ThunkApiConfig>>>;\n/**\n * A type describing the `payloadCreator` argument to `createAsyncThunk`.\n * Might be useful for wrapping `createAsyncThunk` in custom abstractions.\n *\n * @public\n */\nexport type AsyncThunkPayloadCreator<Returned, ThunkArg = void, ThunkApiConfig extends AsyncThunkConfig = {}> = (arg: ThunkArg, thunkAPI: GetThunkAPI<ThunkApiConfig>) => AsyncThunkPayloadCreatorReturnValue<Returned, ThunkApiConfig>;\n\n/**\n * A ThunkAction created by `createAsyncThunk`.\n * Dispatching it returns a Promise for either a\n * fulfilled or rejected action.\n * Also, the returned value contains an `abort()` method\n * that allows the asyncAction to be cancelled from the outside.\n *\n * @public\n */\nexport type AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig extends AsyncThunkConfig> = (dispatch: NonNullable<GetDispatch<ThunkApiConfig>>, getState: () => GetState<ThunkApiConfig>, extra: GetExtra<ThunkApiConfig>) => SafePromise<ReturnType<AsyncThunkFulfilledActionCreator<Returned, ThunkArg>> | ReturnType<AsyncThunkRejectedActionCreator<ThunkArg, ThunkApiConfig>>> & {\n  abort: (reason?: string) => void;\n  requestId: string;\n  arg: ThunkArg;\n  unwrap: () => Promise<Returned>;\n};\ntype AsyncThunkActionCreator<Returned, ThunkArg, ThunkApiConfig extends AsyncThunkConfig> = IsAny<ThunkArg,\n// any handling\n(arg: ThunkArg) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig>,\n// unknown handling\nunknown extends ThunkArg ? (arg: ThunkArg) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig> /* argument not specified or specified as void or undefined*/ : [ThunkArg] extends [void] | [undefined] ? () => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig> /* argument contains void*/ : [void] extends [ThunkArg] // make optional\n? (arg?: ThunkArg) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig> /* argument contains undefined*/ : [undefined] extends [ThunkArg] ? WithStrictNullChecks<\n// with strict nullChecks: make optional\n(arg?: ThunkArg) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig>,\n// without strict null checks this will match everything, so don't make it optional\n(arg: ThunkArg) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig>> /* default case: normal argument*/ : (arg: ThunkArg) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig>>;\n\n/**\n * Options object for `createAsyncThunk`.\n *\n * @public\n */\nexport type AsyncThunkOptions<ThunkArg = void, ThunkApiConfig extends AsyncThunkConfig = {}> = {\n  /**\n   * A method to control whether the asyncThunk should be executed. Has access to the\n   * `arg`, `api.getState()` and `api.extra` arguments.\n   *\n   * @returns `false` if it should be skipped\n   */\n  condition?(arg: ThunkArg, api: Pick<GetThunkAPI<ThunkApiConfig>, 'getState' | 'extra'>): MaybePromise<boolean | undefined>;\n  /**\n   * If `condition` returns `false`, the asyncThunk will be skipped.\n   * This option allows you to control whether a `rejected` action with `meta.condition == false`\n   * will be dispatched or not.\n   *\n   * @default `false`\n   */\n  dispatchConditionRejection?: boolean;\n  serializeError?: (x: unknown) => GetSerializedErrorType<ThunkApiConfig>;\n\n  /**\n   * A function to use when generating the `requestId` for the request sequence.\n   *\n   * @default `nanoid`\n   */\n  idGenerator?: (arg: ThunkArg) => string;\n} & IsUnknown<GetPendingMeta<ThunkApiConfig>, {\n  /**\n   * A method to generate additional properties to be added to `meta` of the pending action.\n   *\n   * Using this optional overload will not modify the types correctly, this overload is only in place to support JavaScript users.\n   * Please use the `ThunkApiConfig` parameter `pendingMeta` to get access to a correctly typed overload\n   */\n  getPendingMeta?(base: {\n    arg: ThunkArg;\n    requestId: string;\n  }, api: Pick<GetThunkAPI<ThunkApiConfig>, 'getState' | 'extra'>): GetPendingMeta<ThunkApiConfig>;\n}, {\n  /**\n   * A method to generate additional properties to be added to `meta` of the pending action.\n   */\n  getPendingMeta(base: {\n    arg: ThunkArg;\n    requestId: string;\n  }, api: Pick<GetThunkAPI<ThunkApiConfig>, 'getState' | 'extra'>): GetPendingMeta<ThunkApiConfig>;\n}>;\nexport type AsyncThunkPendingActionCreator<ThunkArg, ThunkApiConfig = {}> = ActionCreatorWithPreparedPayload<[string, ThunkArg, GetPendingMeta<ThunkApiConfig>?], undefined, string, never, {\n  arg: ThunkArg;\n  requestId: string;\n  requestStatus: 'pending';\n} & GetPendingMeta<ThunkApiConfig>>;\nexport type AsyncThunkRejectedActionCreator<ThunkArg, ThunkApiConfig = {}> = ActionCreatorWithPreparedPayload<[Error | null, string, ThunkArg, GetRejectValue<ThunkApiConfig>?, GetRejectedMeta<ThunkApiConfig>?], GetRejectValue<ThunkApiConfig> | undefined, string, GetSerializedErrorType<ThunkApiConfig>, {\n  arg: ThunkArg;\n  requestId: string;\n  requestStatus: 'rejected';\n  aborted: boolean;\n  condition: boolean;\n} & (({\n  rejectedWithValue: false;\n} & { [K in keyof GetRejectedMeta<ThunkApiConfig>]?: undefined }) | ({\n  rejectedWithValue: true;\n} & GetRejectedMeta<ThunkApiConfig>))>;\nexport type AsyncThunkFulfilledActionCreator<Returned, ThunkArg, ThunkApiConfig = {}> = ActionCreatorWithPreparedPayload<[Returned, string, ThunkArg, GetFulfilledMeta<ThunkApiConfig>?], Returned, string, never, {\n  arg: ThunkArg;\n  requestId: string;\n  requestStatus: 'fulfilled';\n} & GetFulfilledMeta<ThunkApiConfig>>;\n\n/**\n * A type describing the return value of `createAsyncThunk`.\n * Might be useful for wrapping `createAsyncThunk` in custom abstractions.\n *\n * @public\n */\nexport type AsyncThunk<Returned, ThunkArg, ThunkApiConfig extends AsyncThunkConfig> = AsyncThunkActionCreator<Returned, ThunkArg, ThunkApiConfig> & {\n  pending: AsyncThunkPendingActionCreator<ThunkArg, ThunkApiConfig>;\n  rejected: AsyncThunkRejectedActionCreator<ThunkArg, ThunkApiConfig>;\n  fulfilled: AsyncThunkFulfilledActionCreator<Returned, ThunkArg, ThunkApiConfig>;\n  // matchSettled?\n  settled: (action: any) => action is ReturnType<AsyncThunkRejectedActionCreator<ThunkArg, ThunkApiConfig> | AsyncThunkFulfilledActionCreator<Returned, ThunkArg, ThunkApiConfig>>;\n  typePrefix: string;\n};\nexport type OverrideThunkApiConfigs<OldConfig, NewConfig> = Id<NewConfig & Omit<OldConfig, keyof NewConfig>>;\ntype CreateAsyncThunk<CurriedThunkApiConfig extends AsyncThunkConfig> = {\n  /**\n   *\n   * @param typePrefix\n   * @param payloadCreator\n   * @param options\n   *\n   * @public\n   */\n  // separate signature without `AsyncThunkConfig` for better inference\n  <Returned, ThunkArg = void>(typePrefix: string, payloadCreator: AsyncThunkPayloadCreator<Returned, ThunkArg, CurriedThunkApiConfig>, options?: AsyncThunkOptions<ThunkArg, CurriedThunkApiConfig>): AsyncThunk<Returned, ThunkArg, CurriedThunkApiConfig>;\n\n  /**\n   *\n   * @param typePrefix\n   * @param payloadCreator\n   * @param options\n   *\n   * @public\n   */\n  <Returned, ThunkArg, ThunkApiConfig extends AsyncThunkConfig>(typePrefix: string, payloadCreator: AsyncThunkPayloadCreator<Returned, ThunkArg, OverrideThunkApiConfigs<CurriedThunkApiConfig, ThunkApiConfig>>, options?: AsyncThunkOptions<ThunkArg, OverrideThunkApiConfigs<CurriedThunkApiConfig, ThunkApiConfig>>): AsyncThunk<Returned, ThunkArg, OverrideThunkApiConfigs<CurriedThunkApiConfig, ThunkApiConfig>>;\n  withTypes<ThunkApiConfig extends AsyncThunkConfig>(): CreateAsyncThunk<OverrideThunkApiConfigs<CurriedThunkApiConfig, ThunkApiConfig>>;\n};\nexport const createAsyncThunk = /* @__PURE__ */(() => {\n  function createAsyncThunk<Returned, ThunkArg, ThunkApiConfig extends AsyncThunkConfig>(typePrefix: string, payloadCreator: AsyncThunkPayloadCreator<Returned, ThunkArg, ThunkApiConfig>, options?: AsyncThunkOptions<ThunkArg, ThunkApiConfig>): AsyncThunk<Returned, ThunkArg, ThunkApiConfig> {\n    type RejectedValue = GetRejectValue<ThunkApiConfig>;\n    type PendingMeta = GetPendingMeta<ThunkApiConfig>;\n    type FulfilledMeta = GetFulfilledMeta<ThunkApiConfig>;\n    type RejectedMeta = GetRejectedMeta<ThunkApiConfig>;\n    const fulfilled: AsyncThunkFulfilledActionCreator<Returned, ThunkArg, ThunkApiConfig> = createAction(typePrefix + '/fulfilled', (payload: Returned, requestId: string, arg: ThunkArg, meta?: FulfilledMeta) => ({\n      payload,\n      meta: {\n        ...((meta as any) || {}),\n        arg,\n        requestId,\n        requestStatus: ('fulfilled' as const)\n      }\n    }));\n    const pending: AsyncThunkPendingActionCreator<ThunkArg, ThunkApiConfig> = createAction(typePrefix + '/pending', (requestId: string, arg: ThunkArg, meta?: PendingMeta) => ({\n      payload: undefined,\n      meta: {\n        ...((meta as any) || {}),\n        arg,\n        requestId,\n        requestStatus: ('pending' as const)\n      }\n    }));\n    const rejected: AsyncThunkRejectedActionCreator<ThunkArg, ThunkApiConfig> = createAction(typePrefix + '/rejected', (error: Error | null, requestId: string, arg: ThunkArg, payload?: RejectedValue, meta?: RejectedMeta) => ({\n      payload,\n      error: ((options && options.serializeError || miniSerializeError)(error || 'Rejected') as GetSerializedErrorType<ThunkApiConfig>),\n      meta: {\n        ...((meta as any) || {}),\n        arg,\n        requestId,\n        rejectedWithValue: !!payload,\n        requestStatus: ('rejected' as const),\n        aborted: error?.name === 'AbortError',\n        condition: error?.name === 'ConditionError'\n      }\n    }));\n    function actionCreator(arg: ThunkArg): AsyncThunkAction<Returned, ThunkArg, Required<ThunkApiConfig>> {\n      return (dispatch, getState, extra) => {\n        const requestId = options?.idGenerator ? options.idGenerator(arg) : nanoid();\n        const abortController = new AbortController();\n        let abortHandler: (() => void) | undefined;\n        let abortReason: string | undefined;\n        function abort(reason?: string) {\n          abortReason = reason;\n          abortController.abort();\n        }\n        const promise = async function () {\n          let finalAction: ReturnType<typeof fulfilled | typeof rejected>;\n          try {\n            let conditionResult = options?.condition?.(arg, {\n              getState,\n              extra\n            });\n            if (isThenable(conditionResult)) {\n              conditionResult = await conditionResult;\n            }\n            if (conditionResult === false || abortController.signal.aborted) {\n              // eslint-disable-next-line no-throw-literal\n              throw {\n                name: 'ConditionError',\n                message: 'Aborted due to condition callback returning false.'\n              };\n            }\n            const abortedPromise = new Promise<never>((_, reject) => {\n              abortHandler = () => {\n                reject({\n                  name: 'AbortError',\n                  message: abortReason || 'Aborted'\n                });\n              };\n              abortController.signal.addEventListener('abort', abortHandler);\n            });\n            dispatch((pending(requestId, arg, options?.getPendingMeta?.({\n              requestId,\n              arg\n            }, {\n              getState,\n              extra\n            })) as any));\n            finalAction = await Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {\n              dispatch,\n              getState,\n              extra,\n              requestId,\n              signal: abortController.signal,\n              abort,\n              rejectWithValue: (((value: RejectedValue, meta?: RejectedMeta) => {\n                return new RejectWithValue(value, meta);\n              }) as any),\n              fulfillWithValue: (((value: unknown, meta?: FulfilledMeta) => {\n                return new FulfillWithMeta(value, meta);\n              }) as any)\n            })).then(result => {\n              if (result instanceof RejectWithValue) {\n                throw result;\n              }\n              if (result instanceof FulfillWithMeta) {\n                return fulfilled(result.payload, requestId, arg, result.meta);\n              }\n              return fulfilled((result as any), requestId, arg);\n            })]);\n          } catch (err) {\n            finalAction = err instanceof RejectWithValue ? rejected(null, requestId, arg, err.payload, err.meta) : rejected((err as any), requestId, arg);\n          } finally {\n            if (abortHandler) {\n              abortController.signal.removeEventListener('abort', abortHandler);\n            }\n          }\n          // We dispatch the result action _after_ the catch, to avoid having any errors\n          // here get swallowed by the try/catch block,\n          // per https://twitter.com/dan_abramov/status/770914221638942720\n          // and https://github.com/reduxjs/redux-toolkit/blob/e85eb17b39a2118d859f7b7746e0f3fee523e089/docs/tutorials/advanced-tutorial.md#async-error-handling-logic-in-thunks\n\n          const skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && (finalAction as any).meta.condition;\n          if (!skipDispatch) {\n            dispatch((finalAction as any));\n          }\n          return finalAction;\n        }();\n        return Object.assign((promise as SafePromise<any>), {\n          abort,\n          requestId,\n          arg,\n          unwrap() {\n            return promise.then<any>(unwrapResult);\n          }\n        });\n      };\n    }\n    return Object.assign((actionCreator as AsyncThunkActionCreator<Returned, ThunkArg, ThunkApiConfig>), {\n      pending,\n      rejected,\n      fulfilled,\n      settled: isAnyOf(rejected, fulfilled),\n      typePrefix\n    });\n  }\n  createAsyncThunk.withTypes = () => createAsyncThunk;\n  return (createAsyncThunk as CreateAsyncThunk<AsyncThunkConfig>);\n})();\ninterface UnwrappableAction {\n  payload: any;\n  meta?: any;\n  error?: any;\n}\ntype UnwrappedActionPayload<T extends UnwrappableAction> = Exclude<T, {\n  error: any;\n}>['payload'];\n\n/**\n * @public\n */\nexport function unwrapResult<R extends UnwrappableAction>(action: R): UnwrappedActionPayload<R> {\n  if (action.meta && action.meta.rejectedWithValue) {\n    throw action.payload;\n  }\n  if (action.error) {\n    throw action.error;\n  }\n  return action.payload;\n}\ntype WithStrictNullChecks<True, False> = undefined extends boolean ? False : True;\nfunction isThenable(value: any): value is PromiseLike<any> {\n  return value !== null && typeof value === 'object' && typeof value.then === 'function';\n}", "import { formatProdErrorMessage as _formatProdErrorMessage, formatProdErrorMessage as _formatProdErrorMessage2, formatProdErrorMessage as _formatProdErrorMessage3, formatProdErrorMessage as _formatProdErrorMessage4, formatProdErrorMessage as _formatProdErrorMessage5, formatProdErrorMessage as _formatProdErrorMessage6, formatProdErrorMessage as _formatProdErrorMessage7, formatProdErrorMessage as _formatProdErrorMessage8 } from \"@reduxjs/toolkit\";\nimport type { Action, Reducer, UnknownAction } from 'redux';\nimport type { Selector } from 'reselect';\nimport type { InjectConfig } from './combineSlices';\nimport type { ActionCreatorWithoutPayload, PayloadAction, PayloadActionCreator, PrepareAction, _ActionCreatorWithPreparedPayload } from './createAction';\nimport { createAction } from './createAction';\nimport type { AsyncThunk, AsyncThunkConfig, AsyncThunkOptions, AsyncThunkPayloadCreator, OverrideThunkApiConfigs } from './createAsyncThunk';\nimport { createAsyncThunk as _createAsyncThunk } from './createAsyncThunk';\nimport type { ActionMatcherDescriptionCollection, CaseReducer, ReducerWithInitialState } from './createReducer';\nimport { createReducer } from './createReducer';\nimport type { ActionReducerMapBuilder, TypedActionCreator } from './mapBuilders';\nimport { executeReducerBuilderCallback } from './mapBuilders';\nimport type { Id, TypeGuard } from './tsHelpers';\nimport { emplace } from './utils';\nconst asyncThunkSymbol = /* @__PURE__ */Symbol.for('rtk-slice-createasyncthunk');\n// type is annotated because it's too long to infer\nexport const asyncThunkCreator: {\n  [asyncThunkSymbol]: typeof _createAsyncThunk;\n} = {\n  [asyncThunkSymbol]: _createAsyncThunk\n};\ntype InjectIntoConfig<NewReducerPath extends string> = InjectConfig & {\n  reducerPath?: NewReducerPath;\n};\n\n/**\n * The return value of `createSlice`\n *\n * @public\n */\nexport interface Slice<State = any, CaseReducers extends SliceCaseReducers<State> = SliceCaseReducers<State>, Name extends string = string, ReducerPath extends string = Name, Selectors extends SliceSelectors<State> = SliceSelectors<State>> {\n  /**\n   * The slice name.\n   */\n  name: Name;\n\n  /**\n   *  The slice reducer path.\n   */\n  reducerPath: ReducerPath;\n\n  /**\n   * The slice's reducer.\n   */\n  reducer: Reducer<State>;\n\n  /**\n   * Action creators for the types of actions that are handled by the slice\n   * reducer.\n   */\n  actions: CaseReducerActions<CaseReducers, Name>;\n\n  /**\n   * The individual case reducer functions that were passed in the `reducers` parameter.\n   * This enables reuse and testing if they were defined inline when calling `createSlice`.\n   */\n  caseReducers: SliceDefinedCaseReducers<CaseReducers>;\n\n  /**\n   * Provides access to the initial state value given to the slice.\n   * If a lazy state initializer was provided, it will be called and a fresh value returned.\n   */\n  getInitialState: () => State;\n\n  /**\n   * Get localised slice selectors (expects to be called with *just* the slice's state as the first parameter)\n   */\n  getSelectors(): Id<SliceDefinedSelectors<State, Selectors, State>>;\n\n  /**\n   * Get globalised slice selectors (`selectState` callback is expected to receive first parameter and return slice state)\n   */\n  getSelectors<RootState>(selectState: (rootState: RootState) => State): Id<SliceDefinedSelectors<State, Selectors, RootState>>;\n\n  /**\n   * Selectors that assume the slice's state is `rootState[slice.reducerPath]` (which is usually the case)\n   *\n   * Equivalent to `slice.getSelectors((state: RootState) => state[slice.reducerPath])`.\n   */\n  get selectors(): Id<SliceDefinedSelectors<State, Selectors, { [K in ReducerPath]: State }>>;\n\n  /**\n   * Inject slice into provided reducer (return value from `combineSlices`), and return injected slice.\n   */\n  injectInto<NewReducerPath extends string = ReducerPath>(this: this, injectable: {\n    inject: (slice: {\n      reducerPath: string;\n      reducer: Reducer;\n    }, config?: InjectConfig) => void;\n  }, config?: InjectIntoConfig<NewReducerPath>): InjectedSlice<State, CaseReducers, Name, NewReducerPath, Selectors>;\n\n  /**\n   * Select the slice state, using the slice's current reducerPath.\n   *\n   * Will throw an error if slice is not found.\n   */\n  selectSlice(state: { [K in ReducerPath]: State }): State;\n}\n\n/**\n * A slice after being called with `injectInto(reducer)`.\n *\n * Selectors can now be called with an `undefined` value, in which case they use the slice's initial state.\n */\ntype InjectedSlice<State = any, CaseReducers extends SliceCaseReducers<State> = SliceCaseReducers<State>, Name extends string = string, ReducerPath extends string = Name, Selectors extends SliceSelectors<State> = SliceSelectors<State>> = Omit<Slice<State, CaseReducers, Name, ReducerPath, Selectors>, 'getSelectors' | 'selectors'> & {\n  /**\n   * Get localised slice selectors (expects to be called with *just* the slice's state as the first parameter)\n   */\n  getSelectors(): Id<SliceDefinedSelectors<State, Selectors, State | undefined>>;\n\n  /**\n   * Get globalised slice selectors (`selectState` callback is expected to receive first parameter and return slice state)\n   */\n  getSelectors<RootState>(selectState: (rootState: RootState) => State | undefined): Id<SliceDefinedSelectors<State, Selectors, RootState>>;\n\n  /**\n   * Selectors that assume the slice's state is `rootState[slice.name]` (which is usually the case)\n   *\n   * Equivalent to `slice.getSelectors((state: RootState) => state[slice.name])`.\n   */\n  get selectors(): Id<SliceDefinedSelectors<State, Selectors, { [K in ReducerPath]?: State | undefined }>>;\n\n  /**\n   * Select the slice state, using the slice's current reducerPath.\n   *\n   * Returns initial state if slice is not found.\n   */\n  selectSlice(state: { [K in ReducerPath]?: State | undefined }): State;\n};\n\n/**\n * Options for `createSlice()`.\n *\n * @public\n */\nexport interface CreateSliceOptions<State = any, CR extends SliceCaseReducers<State> = SliceCaseReducers<State>, Name extends string = string, ReducerPath extends string = Name, Selectors extends SliceSelectors<State> = SliceSelectors<State>> {\n  /**\n   * The slice's name. Used to namespace the generated action types.\n   */\n  name: Name;\n\n  /**\n   * The slice's reducer path. Used when injecting into a combined slice reducer.\n   */\n  reducerPath?: ReducerPath;\n\n  /**\n   * The initial state that should be used when the reducer is called the first time. This may also be a \"lazy initializer\" function, which should return an initial state value when called. This will be used whenever the reducer is called with `undefined` as its state value, and is primarily useful for cases like reading initial state from `localStorage`.\n   */\n  initialState: State | (() => State);\n\n  /**\n   * A mapping from action types to action-type-specific *case reducer*\n   * functions. For every action type, a matching action creator will be\n   * generated using `createAction()`.\n   */\n  reducers: ValidateSliceCaseReducers<State, CR> | ((creators: ReducerCreators<State>) => CR);\n\n  /**\n   * A callback that receives a *builder* object to define\n   * case reducers via calls to `builder.addCase(actionCreatorOrType, reducer)`.\n   *\n   *\n   * @example\n  ```ts\n  import { createAction, createSlice, Action } from '@reduxjs/toolkit'\n  const incrementBy = createAction<number>('incrementBy')\n  const decrement = createAction('decrement')\n  interface RejectedAction extends Action {\n  error: Error\n  }\n  function isRejectedAction(action: Action): action is RejectedAction {\n  return action.type.endsWith('rejected')\n  }\n  createSlice({\n  name: 'counter',\n  initialState: 0,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(incrementBy, (state, action) => {\n        // action is inferred correctly here if using TS\n      })\n      // You can chain calls, or have separate `builder.addCase()` lines each time\n      .addCase(decrement, (state, action) => {})\n      // You can match a range of action types\n      .addMatcher(\n        isRejectedAction,\n        // `action` will be inferred as a RejectedAction due to isRejectedAction being defined as a type guard\n        (state, action) => {}\n      )\n      // and provide a default case if no other handlers matched\n      .addDefaultCase((state, action) => {})\n    }\n  })\n  ```\n   */\n  extraReducers?: (builder: ActionReducerMapBuilder<State>) => void;\n\n  /**\n   * A map of selectors that receive the slice's state and any additional arguments, and return a result.\n   */\n  selectors?: Selectors;\n}\nexport enum ReducerType {\n  reducer = 'reducer',\n  reducerWithPrepare = 'reducerWithPrepare',\n  asyncThunk = 'asyncThunk',\n}\ntype ReducerDefinition<T extends ReducerType = ReducerType> = {\n  _reducerDefinitionType: T;\n};\nexport type CaseReducerDefinition<S = any, A extends Action = UnknownAction> = CaseReducer<S, A> & ReducerDefinition<ReducerType.reducer>;\n\n/**\n * A CaseReducer with a `prepare` method.\n *\n * @public\n */\nexport type CaseReducerWithPrepare<State, Action extends PayloadAction> = {\n  reducer: CaseReducer<State, Action>;\n  prepare: PrepareAction<Action['payload']>;\n};\nexport interface CaseReducerWithPrepareDefinition<State, Action extends PayloadAction> extends CaseReducerWithPrepare<State, Action>, ReducerDefinition<ReducerType.reducerWithPrepare> {}\ntype AsyncThunkSliceReducerConfig<State, ThunkArg extends any, Returned = unknown, ThunkApiConfig extends AsyncThunkConfig = {}> = {\n  pending?: CaseReducer<State, ReturnType<AsyncThunk<Returned, ThunkArg, ThunkApiConfig>['pending']>>;\n  rejected?: CaseReducer<State, ReturnType<AsyncThunk<Returned, ThunkArg, ThunkApiConfig>['rejected']>>;\n  fulfilled?: CaseReducer<State, ReturnType<AsyncThunk<Returned, ThunkArg, ThunkApiConfig>['fulfilled']>>;\n  settled?: CaseReducer<State, ReturnType<AsyncThunk<Returned, ThunkArg, ThunkApiConfig>['rejected' | 'fulfilled']>>;\n  options?: AsyncThunkOptions<ThunkArg, ThunkApiConfig>;\n};\ntype AsyncThunkSliceReducerDefinition<State, ThunkArg extends any, Returned = unknown, ThunkApiConfig extends AsyncThunkConfig = {}> = AsyncThunkSliceReducerConfig<State, ThunkArg, Returned, ThunkApiConfig> & ReducerDefinition<ReducerType.asyncThunk> & {\n  payloadCreator: AsyncThunkPayloadCreator<Returned, ThunkArg, ThunkApiConfig>;\n};\n\n/**\n * Providing these as part of the config would cause circular types, so we disallow passing them\n */\ntype PreventCircular<ThunkApiConfig> = { [K in keyof ThunkApiConfig]: K extends 'state' | 'dispatch' ? never : ThunkApiConfig[K] };\ninterface AsyncThunkCreator<State, CurriedThunkApiConfig extends PreventCircular<AsyncThunkConfig> = PreventCircular<AsyncThunkConfig>> {\n  <Returned, ThunkArg = void>(payloadCreator: AsyncThunkPayloadCreator<Returned, ThunkArg, CurriedThunkApiConfig>, config?: AsyncThunkSliceReducerConfig<State, ThunkArg, Returned, CurriedThunkApiConfig>): AsyncThunkSliceReducerDefinition<State, ThunkArg, Returned, CurriedThunkApiConfig>;\n  <Returned, ThunkArg, ThunkApiConfig extends PreventCircular<AsyncThunkConfig> = {}>(payloadCreator: AsyncThunkPayloadCreator<Returned, ThunkArg, ThunkApiConfig>, config?: AsyncThunkSliceReducerConfig<State, ThunkArg, Returned, ThunkApiConfig>): AsyncThunkSliceReducerDefinition<State, ThunkArg, Returned, ThunkApiConfig>;\n  withTypes<ThunkApiConfig extends PreventCircular<AsyncThunkConfig>>(): AsyncThunkCreator<State, OverrideThunkApiConfigs<CurriedThunkApiConfig, ThunkApiConfig>>;\n}\nexport interface ReducerCreators<State> {\n  reducer(caseReducer: CaseReducer<State, PayloadAction>): CaseReducerDefinition<State, PayloadAction>;\n  reducer<Payload>(caseReducer: CaseReducer<State, PayloadAction<Payload>>): CaseReducerDefinition<State, PayloadAction<Payload>>;\n  asyncThunk: AsyncThunkCreator<State>;\n  preparedReducer<Prepare extends PrepareAction<any>>(prepare: Prepare, reducer: CaseReducer<State, ReturnType<_ActionCreatorWithPreparedPayload<Prepare>>>): {\n    _reducerDefinitionType: ReducerType.reducerWithPrepare;\n    prepare: Prepare;\n    reducer: CaseReducer<State, ReturnType<_ActionCreatorWithPreparedPayload<Prepare>>>;\n  };\n}\n\n/**\n * The type describing a slice's `reducers` option.\n *\n * @public\n */\nexport type SliceCaseReducers<State> = Record<string, ReducerDefinition> | Record<string, CaseReducer<State, PayloadAction<any>> | CaseReducerWithPrepare<State, PayloadAction<any, string, any, any>>>;\n\n/**\n * The type describing a slice's `selectors` option.\n */\nexport type SliceSelectors<State> = {\n  [K: string]: (sliceState: State, ...args: any[]) => any;\n};\ntype SliceActionType<SliceName extends string, ActionName extends keyof any> = ActionName extends string | number ? `${SliceName}/${ActionName}` : string;\n\n/**\n * Derives the slice's `actions` property from the `reducers` options\n *\n * @public\n */\nexport type CaseReducerActions<CaseReducers extends SliceCaseReducers<any>, SliceName extends string> = { [Type in keyof CaseReducers]: CaseReducers[Type] extends infer Definition ? Definition extends {\n  prepare: any;\n} ? ActionCreatorForCaseReducerWithPrepare<Definition, SliceActionType<SliceName, Type>> : Definition extends AsyncThunkSliceReducerDefinition<any, infer ThunkArg, infer Returned, infer ThunkApiConfig> ? AsyncThunk<Returned, ThunkArg, ThunkApiConfig> : Definition extends {\n  reducer: any;\n} ? ActionCreatorForCaseReducer<Definition['reducer'], SliceActionType<SliceName, Type>> : ActionCreatorForCaseReducer<Definition, SliceActionType<SliceName, Type>> : never };\n\n/**\n * Get a `PayloadActionCreator` type for a passed `CaseReducerWithPrepare`\n *\n * @internal\n */\ntype ActionCreatorForCaseReducerWithPrepare<CR extends {\n  prepare: any;\n}, Type extends string> = _ActionCreatorWithPreparedPayload<CR['prepare'], Type>;\n\n/**\n * Get a `PayloadActionCreator` type for a passed `CaseReducer`\n *\n * @internal\n */\ntype ActionCreatorForCaseReducer<CR, Type extends string> = CR extends (state: any, action: infer Action) => any ? Action extends {\n  payload: infer P;\n} ? PayloadActionCreator<P, Type> : ActionCreatorWithoutPayload<Type> : ActionCreatorWithoutPayload<Type>;\n\n/**\n * Extracts the CaseReducers out of a `reducers` object, even if they are\n * tested into a `CaseReducerWithPrepare`.\n *\n * @internal\n */\ntype SliceDefinedCaseReducers<CaseReducers extends SliceCaseReducers<any>> = { [Type in keyof CaseReducers]: CaseReducers[Type] extends infer Definition ? Definition extends AsyncThunkSliceReducerDefinition<any, any, any> ? Id<Pick<Required<Definition>, 'fulfilled' | 'rejected' | 'pending' | 'settled'>> : Definition extends {\n  reducer: infer Reducer;\n} ? Reducer : Definition : never };\ntype RemappedSelector<S extends Selector, NewState> = S extends Selector<any, infer R, infer P> ? Selector<NewState, R, P> & {\n  unwrapped: S;\n} : never;\n\n/**\n * Extracts the final selector type from the `selectors` object.\n *\n * Removes the `string` index signature from the default value.\n */\ntype SliceDefinedSelectors<State, Selectors extends SliceSelectors<State>, RootState> = { [K in keyof Selectors as string extends K ? never : K]: RemappedSelector<Selectors[K], RootState> };\n\n/**\n * Used on a SliceCaseReducers object.\n * Ensures that if a CaseReducer is a `CaseReducerWithPrepare`, that\n * the `reducer` and the `prepare` function use the same type of `payload`.\n *\n * Might do additional such checks in the future.\n *\n * This type is only ever useful if you want to write your own wrapper around\n * `createSlice`. Please don't use it otherwise!\n *\n * @public\n */\nexport type ValidateSliceCaseReducers<S, ACR extends SliceCaseReducers<S>> = ACR & { [T in keyof ACR]: ACR[T] extends {\n  reducer(s: S, action?: infer A): any;\n} ? {\n  prepare(...a: never[]): Omit<A, 'type'>;\n} : {} };\nfunction getType(slice: string, actionKey: string): string {\n  return `${slice}/${actionKey}`;\n}\ninterface BuildCreateSliceConfig {\n  creators?: {\n    asyncThunk?: typeof asyncThunkCreator;\n  };\n}\nexport function buildCreateSlice({\n  creators\n}: BuildCreateSliceConfig = {}) {\n  const cAT = creators?.asyncThunk?.[asyncThunkSymbol];\n  return function createSlice<State, CaseReducers extends SliceCaseReducers<State>, Name extends string, Selectors extends SliceSelectors<State>, ReducerPath extends string = Name>(options: CreateSliceOptions<State, CaseReducers, Name, ReducerPath, Selectors>): Slice<State, CaseReducers, Name, ReducerPath, Selectors> {\n    const {\n      name,\n      reducerPath = ((name as unknown) as ReducerPath)\n    } = options;\n    if (!name) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(11) : '`name` is a required option for createSlice');\n    }\n    if (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') {\n      if (options.initialState === undefined) {\n        console.error('You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`');\n      }\n    }\n    const reducers = (typeof options.reducers === 'function' ? options.reducers(buildReducerCreators<State>()) : options.reducers) || {};\n    const reducerNames = Object.keys(reducers);\n    const context: ReducerHandlingContext<State> = {\n      sliceCaseReducersByName: {},\n      sliceCaseReducersByType: {},\n      actionCreators: {},\n      sliceMatchers: []\n    };\n    const contextMethods: ReducerHandlingContextMethods<State> = {\n      addCase(typeOrActionCreator: string | TypedActionCreator<any>, reducer: CaseReducer<State>) {\n        const type = typeof typeOrActionCreator === 'string' ? typeOrActionCreator : typeOrActionCreator.type;\n        if (!type) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(12) : '`context.addCase` cannot be called with an empty action type');\n        }\n        if (type in context.sliceCaseReducersByType) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage3(13) : '`context.addCase` cannot be called with two reducers for the same action type: ' + type);\n        }\n        context.sliceCaseReducersByType[type] = reducer;\n        return contextMethods;\n      },\n      addMatcher(matcher, reducer) {\n        context.sliceMatchers.push({\n          matcher,\n          reducer\n        });\n        return contextMethods;\n      },\n      exposeAction(name, actionCreator) {\n        context.actionCreators[name] = actionCreator;\n        return contextMethods;\n      },\n      exposeCaseReducer(name, reducer) {\n        context.sliceCaseReducersByName[name] = reducer;\n        return contextMethods;\n      }\n    };\n    reducerNames.forEach(reducerName => {\n      const reducerDefinition = reducers[reducerName];\n      const reducerDetails: ReducerDetails = {\n        reducerName,\n        type: getType(name, reducerName),\n        createNotation: typeof options.reducers === 'function'\n      };\n      if (isAsyncThunkSliceReducerDefinition<State>(reducerDefinition)) {\n        handleThunkCaseReducerDefinition(reducerDetails, reducerDefinition, contextMethods, cAT);\n      } else {\n        handleNormalReducerDefinition<State>(reducerDetails, (reducerDefinition as any), contextMethods);\n      }\n    });\n    function buildReducer() {\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof options.extraReducers === 'object') {\n          throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage4(14) : \"The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice\");\n        }\n      }\n      const [extraReducers = {}, actionMatchers = [], defaultCaseReducer = undefined] = typeof options.extraReducers === 'function' ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers];\n      const finalCaseReducers = {\n        ...extraReducers,\n        ...context.sliceCaseReducersByType\n      };\n      return createReducer(options.initialState, builder => {\n        for (let key in finalCaseReducers) {\n          builder.addCase(key, (finalCaseReducers[key] as CaseReducer<any>));\n        }\n        for (let sM of context.sliceMatchers) {\n          builder.addMatcher(sM.matcher, sM.reducer);\n        }\n        for (let m of actionMatchers) {\n          builder.addMatcher(m.matcher, m.reducer);\n        }\n        if (defaultCaseReducer) {\n          builder.addDefaultCase(defaultCaseReducer);\n        }\n      });\n    }\n    const selectSelf = (state: State) => state;\n    const injectedSelectorCache = new Map<boolean, WeakMap<(rootState: any) => State | undefined, Record<string, (rootState: any) => any>>>();\n    let _reducer: ReducerWithInitialState<State>;\n    function reducer(state: State | undefined, action: UnknownAction) {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer(state, action);\n    }\n    function getInitialState() {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer.getInitialState();\n    }\n    function makeSelectorProps<CurrentReducerPath extends string = ReducerPath>(reducerPath: CurrentReducerPath, injected = false): Pick<Slice<State, CaseReducers, Name, CurrentReducerPath, Selectors>, 'getSelectors' | 'selectors' | 'selectSlice' | 'reducerPath'> {\n      function selectSlice(state: { [K in CurrentReducerPath]: State }) {\n        let sliceState = state[reducerPath];\n        if (typeof sliceState === 'undefined') {\n          if (injected) {\n            sliceState = getInitialState();\n          } else if (process.env.NODE_ENV !== 'production') {\n            throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage5(15) : 'selectSlice returned undefined for an uninjected slice reducer');\n          }\n        }\n        return sliceState;\n      }\n      function getSelectors(selectState: (rootState: any) => State = selectSelf) {\n        const selectorCache = emplace(injectedSelectorCache, injected, {\n          insert: () => new WeakMap()\n        });\n        return (emplace(selectorCache, selectState, {\n          insert: () => {\n            const map: Record<string, Selector<any, any>> = {};\n            for (const [name, selector] of Object.entries(options.selectors ?? {})) {\n              map[name] = wrapSelector(selector, selectState, getInitialState, injected);\n            }\n            return map;\n          }\n        }) as any);\n      }\n      return {\n        reducerPath,\n        getSelectors,\n        get selectors() {\n          return getSelectors(selectSlice);\n        },\n        selectSlice\n      };\n    }\n    const slice: Slice<State, CaseReducers, Name, ReducerPath, Selectors> = {\n      name,\n      reducer,\n      actions: (context.actionCreators as any),\n      caseReducers: (context.sliceCaseReducersByName as any),\n      getInitialState,\n      ...makeSelectorProps(reducerPath),\n      injectInto(injectable, {\n        reducerPath: pathOpt,\n        ...config\n      } = {}) {\n        const newReducerPath = pathOpt ?? reducerPath;\n        injectable.inject({\n          reducerPath: newReducerPath,\n          reducer\n        }, config);\n        return ({\n          ...slice,\n          ...makeSelectorProps(newReducerPath, true)\n        } as any);\n      }\n    };\n    return slice;\n  };\n}\nfunction wrapSelector<State, NewState, S extends Selector<State>>(selector: S, selectState: Selector<NewState, State>, getInitialState: () => State, injected?: boolean) {\n  function wrapper(rootState: NewState, ...args: any[]) {\n    let sliceState = selectState(rootState);\n    if (typeof sliceState === 'undefined') {\n      if (injected) {\n        sliceState = getInitialState();\n      } else if (process.env.NODE_ENV !== 'production') {\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage6(16) : 'selectState returned undefined for an uninjected slice reducer');\n      }\n    }\n    return selector(sliceState, ...args);\n  }\n  wrapper.unwrapped = selector;\n  return (wrapper as RemappedSelector<S, NewState>);\n}\n\n/**\n * A function that accepts an initial state, an object full of reducer\n * functions, and a \"slice name\", and automatically generates\n * action creators and action types that correspond to the\n * reducers and state.\n *\n * @public\n */\nexport const createSlice = /* @__PURE__ */buildCreateSlice();\ninterface ReducerHandlingContext<State> {\n  sliceCaseReducersByName: Record<string, CaseReducer<State, any> | Pick<AsyncThunkSliceReducerDefinition<State, any, any, any>, 'fulfilled' | 'rejected' | 'pending' | 'settled'>>;\n  sliceCaseReducersByType: Record<string, CaseReducer<State, any>>;\n  sliceMatchers: ActionMatcherDescriptionCollection<State>;\n  actionCreators: Record<string, Function>;\n}\ninterface ReducerHandlingContextMethods<State> {\n  /**\n   * Adds a case reducer to handle a single action type.\n   * @param actionCreator - Either a plain action type string, or an action creator generated by [`createAction`](./createAction) that can be used to determine the action type.\n   * @param reducer - The actual case reducer function.\n   */\n  addCase<ActionCreator extends TypedActionCreator<string>>(actionCreator: ActionCreator, reducer: CaseReducer<State, ReturnType<ActionCreator>>): ReducerHandlingContextMethods<State>;\n  /**\n   * Adds a case reducer to handle a single action type.\n   * @param actionCreator - Either a plain action type string, or an action creator generated by [`createAction`](./createAction) that can be used to determine the action type.\n   * @param reducer - The actual case reducer function.\n   */\n  addCase<Type extends string, A extends Action<Type>>(type: Type, reducer: CaseReducer<State, A>): ReducerHandlingContextMethods<State>;\n\n  /**\n   * Allows you to match incoming actions against your own filter function instead of only the `action.type` property.\n   * @remarks\n   * If multiple matcher reducers match, all of them will be executed in the order\n   * they were defined in - even if a case reducer already matched.\n   * All calls to `builder.addMatcher` must come after any calls to `builder.addCase` and before any calls to `builder.addDefaultCase`.\n   * @param matcher - A matcher function. In TypeScript, this should be a [type predicate](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates)\n   *   function\n   * @param reducer - The actual case reducer function.\n   *\n   */\n  addMatcher<A>(matcher: TypeGuard<A>, reducer: CaseReducer<State, A extends Action ? A : A & Action>): ReducerHandlingContextMethods<State>;\n  /**\n   * Add an action to be exposed under the final `slice.actions` key.\n   * @param name The key to be exposed as.\n   * @param actionCreator The action to expose.\n   * @example\n   * context.exposeAction(\"addPost\", createAction<Post>(\"addPost\"));\n   *\n   * export const { addPost } = slice.actions\n   *\n   * dispatch(addPost(post))\n   */\n  exposeAction(name: string, actionCreator: Function): ReducerHandlingContextMethods<State>;\n  /**\n   * Add a case reducer to be exposed under the final `slice.caseReducers` key.\n   * @param name The key to be exposed as.\n   * @param reducer The reducer to expose.\n   * @example\n   * context.exposeCaseReducer(\"addPost\", (state, action: PayloadAction<Post>) => {\n   *   state.push(action.payload)\n   * })\n   *\n   * slice.caseReducers.addPost([], addPost(post))\n   */\n  exposeCaseReducer(name: string, reducer: CaseReducer<State, any> | Pick<AsyncThunkSliceReducerDefinition<State, any, any, any>, 'fulfilled' | 'rejected' | 'pending' | 'settled'>): ReducerHandlingContextMethods<State>;\n}\ninterface ReducerDetails {\n  /** The key the reducer was defined under */\n  reducerName: string;\n  /** The predefined action type, i.e. `${slice.name}/${reducerName}` */\n  type: string;\n  /** Whether create. notation was used when defining reducers */\n  createNotation: boolean;\n}\nfunction buildReducerCreators<State>(): ReducerCreators<State> {\n  function asyncThunk(payloadCreator: AsyncThunkPayloadCreator<any, any>, config: AsyncThunkSliceReducerConfig<State, any>): AsyncThunkSliceReducerDefinition<State, any> {\n    return {\n      _reducerDefinitionType: ReducerType.asyncThunk,\n      payloadCreator,\n      ...config\n    };\n  }\n  asyncThunk.withTypes = () => asyncThunk;\n  return {\n    reducer(caseReducer: CaseReducer<State, any>) {\n      return Object.assign({\n        // hack so the wrapping function has the same name as the original\n        // we need to create a wrapper so the `reducerDefinitionType` is not assigned to the original\n        [caseReducer.name](...args: Parameters<typeof caseReducer>) {\n          return caseReducer(...args);\n        }\n      }[caseReducer.name], ({\n        _reducerDefinitionType: ReducerType.reducer\n      } as const));\n    },\n    preparedReducer(prepare, reducer) {\n      return {\n        _reducerDefinitionType: ReducerType.reducerWithPrepare,\n        prepare,\n        reducer\n      };\n    },\n    asyncThunk: (asyncThunk as any)\n  };\n}\nfunction handleNormalReducerDefinition<State>({\n  type,\n  reducerName,\n  createNotation\n}: ReducerDetails, maybeReducerWithPrepare: CaseReducer<State, {\n  payload: any;\n  type: string;\n}> | CaseReducerWithPrepare<State, PayloadAction<any, string, any, any>>, context: ReducerHandlingContextMethods<State>) {\n  let caseReducer: CaseReducer<State, any>;\n  let prepareCallback: PrepareAction<any> | undefined;\n  if ('reducer' in maybeReducerWithPrepare) {\n    if (createNotation && !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage7(17) : 'Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.');\n    }\n    caseReducer = maybeReducerWithPrepare.reducer;\n    prepareCallback = maybeReducerWithPrepare.prepare;\n  } else {\n    caseReducer = maybeReducerWithPrepare;\n  }\n  context.addCase(type, caseReducer).exposeCaseReducer(reducerName, caseReducer).exposeAction(reducerName, prepareCallback ? createAction(type, prepareCallback) : createAction(type));\n}\nfunction isAsyncThunkSliceReducerDefinition<State>(reducerDefinition: any): reducerDefinition is AsyncThunkSliceReducerDefinition<State, any, any, any> {\n  return reducerDefinition._reducerDefinitionType === ReducerType.asyncThunk;\n}\nfunction isCaseReducerWithPrepareDefinition<State>(reducerDefinition: any): reducerDefinition is CaseReducerWithPrepareDefinition<State, any> {\n  return reducerDefinition._reducerDefinitionType === ReducerType.reducerWithPrepare;\n}\nfunction handleThunkCaseReducerDefinition<State>({\n  type,\n  reducerName\n}: ReducerDetails, reducerDefinition: AsyncThunkSliceReducerDefinition<State, any, any, any>, context: ReducerHandlingContextMethods<State>, cAT: typeof _createAsyncThunk | undefined) {\n  if (!cAT) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage8(18) : 'Cannot use `create.asyncThunk` in the built-in `createSlice`. ' + 'Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.');\n  }\n  const {\n    payloadCreator,\n    fulfilled,\n    pending,\n    rejected,\n    settled,\n    options\n  } = reducerDefinition;\n  const thunk = cAT(type, payloadCreator, (options as any));\n  context.exposeAction(reducerName, thunk);\n  if (fulfilled) {\n    context.addCase(thunk.fulfilled, fulfilled);\n  }\n  if (pending) {\n    context.addCase(thunk.pending, pending);\n  }\n  if (rejected) {\n    context.addCase(thunk.rejected, rejected);\n  }\n  if (settled) {\n    context.addMatcher(thunk.settled, settled);\n  }\n  context.exposeCaseReducer(reducerName, {\n    fulfilled: fulfilled || noop,\n    pending: pending || noop,\n    rejected: rejected || noop,\n    settled: settled || noop\n  });\n}\nfunction noop() {}", "import type { EntityId, EntityState, EntityStateAdapter, EntityStateFactory } from './models';\nexport function getInitialEntityState<T, Id extends EntityId>(): EntityState<T, Id> {\n  return {\n    ids: [],\n    entities: ({} as Record<Id, T>)\n  };\n}\nexport function createInitialStateFactory<T, Id extends EntityId>(stateAdapter: EntityStateAdapter<T, Id>): EntityStateFactory<T, Id> {\n  function getInitialState(state?: undefined, entities?: readonly T[] | Record<Id, T>): EntityState<T, Id>;\n  function getInitialState<S extends object>(additionalState: S, entities?: readonly T[] | Record<Id, T>): EntityState<T, Id> & S;\n  function getInitialState(additionalState: any = {}, entities?: readonly T[] | Record<Id, T>): any {\n    const state = Object.assign(getInitialEntityState(), additionalState);\n    return entities ? stateAdapter.setAll(state, entities) : state;\n  }\n  return {\n    getInitialState\n  };\n}", "import type { CreateSelectorFunction, Selector } from 'reselect';\nimport { createDraftSafeSelector } from '../createDraftSafeSelector';\nimport type { EntityId, EntitySelectors, EntityState } from './models';\ntype AnyFunction = (...args: any) => any;\ntype AnyCreateSelectorFunction = CreateSelectorFunction<<F extends AnyFunction>(f: F) => F, <F extends AnyFunction>(f: F) => F>;\nexport type GetSelectorsOptions = {\n  createSelector?: AnyCreateSelectorFunction;\n};\nexport function createSelectorsFactory<T, Id extends EntityId>() {\n  function getSelectors(selectState?: undefined, options?: GetSelectorsOptions): EntitySelectors<T, EntityState<T, Id>, Id>;\n  function getSelectors<V>(selectState: (state: V) => EntityState<T, Id>, options?: GetSelectorsOptions): EntitySelectors<T, V, Id>;\n  function getSelectors<V>(selectState?: (state: V) => EntityState<T, Id>, options: GetSelectorsOptions = {}): EntitySelectors<T, any, Id> {\n    const {\n      createSelector = (createDraftSafeSelector as AnyCreateSelectorFunction)\n    } = options;\n    const selectIds = (state: EntityState<T, Id>) => state.ids;\n    const selectEntities = (state: EntityState<T, Id>) => state.entities;\n    const selectAll = createSelector(selectIds, selectEntities, (ids, entities): T[] => ids.map(id => entities[id]!));\n    const selectId = (_: unknown, id: Id) => id;\n    const selectById = (entities: Record<Id, T>, id: Id) => entities[id];\n    const selectTotal = createSelector(selectIds, ids => ids.length);\n    if (!selectState) {\n      return {\n        selectIds,\n        selectEntities,\n        selectAll,\n        selectTotal,\n        selectById: createSelector(selectEntities, selectId, selectById)\n      };\n    }\n    const selectGlobalizedEntities = createSelector((selectState as Selector<V, EntityState<T, Id>>), selectEntities);\n    return {\n      selectIds: createSelector(selectState, selectIds),\n      selectEntities: selectGlobalizedEntities,\n      selectAll: createSelector(selectState, selectAll),\n      selectTotal: createSelector(selectState, selectTotal),\n      selectById: createSelector(selectGlobalizedEntities, selectId, selectById)\n    };\n  }\n  return {\n    getSelectors\n  };\n}", "import { produce as createNextState, isDraft } from 'immer';\nimport type { Draft } from 'immer';\nimport type { EntityId, DraftableEntityState, PreventAny } from './models';\nimport type { PayloadAction } from '../createAction';\nimport { isFSA } from '../createAction';\nexport const isDraftTyped = (isDraft as <T>(value: T | Draft<T>) => value is Draft<T>);\nexport function createSingleArgumentStateOperator<T, Id extends EntityId>(mutator: (state: DraftableEntityState<T, Id>) => void) {\n  const operator = createStateOperator((_: undefined, state: DraftableEntityState<T, Id>) => mutator(state));\n  return function operation<S extends DraftableEntityState<T, Id>>(state: PreventAny<S, T, Id>): S {\n    return operator((state as S), undefined);\n  };\n}\nexport function createStateOperator<T, Id extends EntityId, R>(mutator: (arg: R, state: DraftableEntityState<T, Id>) => void) {\n  return function operation<S extends DraftableEntityState<T, Id>>(state: S, arg: R | PayloadAction<R>): S {\n    function isPayloadActionArgument(arg: R | PayloadAction<R>): arg is PayloadAction<R> {\n      return isFSA(arg);\n    }\n    const runMutator = (draft: DraftableEntityState<T, Id>) => {\n      if (isPayloadActionArgument(arg)) {\n        mutator(arg.payload, draft);\n      } else {\n        mutator(arg, draft);\n      }\n    };\n    if (isDraftTyped<DraftableEntityState<T, Id>>(state)) {\n      // we must already be inside a `createNextState` call, likely because\n      // this is being wrapped in `createReducer` or `createSlice`.\n      // It's safe to just pass the draft to the mutator.\n      runMutator(state);\n\n      // since it's a draft, we'll just return it\n      return state;\n    }\n    return createNextState(state, runMutator);\n  };\n}", "import type { Draft } from 'immer';\nimport { current, isDraft } from 'immer';\nimport type { DraftableEntityState, EntityId, IdSelector, Update } from './models';\nexport function selectIdValue<T, Id extends EntityId>(entity: T, selectId: IdSelector<T, Id>) {\n  const key = selectId(entity);\n  if (process.env.NODE_ENV !== 'production' && key === undefined) {\n    console.warn('The entity passed to the `selectId` implementation returned undefined.', 'You should probably provide your own `selectId` implementation.', 'The entity that was passed:', entity, 'The `selectId` implementation:', selectId.toString());\n  }\n  return key;\n}\nexport function ensureEntitiesArray<T, Id extends EntityId>(entities: readonly T[] | Record<Id, T>): readonly T[] {\n  if (!Array.isArray(entities)) {\n    entities = Object.values(entities);\n  }\n  return entities;\n}\nexport function getCurrent<T>(value: T | Draft<T>): T {\n  return ((isDraft(value) ? current(value) : value) as T);\n}\nexport function splitAddedUpdatedEntities<T, Id extends EntityId>(newEntities: readonly T[] | Record<Id, T>, selectId: IdSelector<T, Id>, state: DraftableEntityState<T, Id>): [T[], Update<T, Id>[], Id[]] {\n  newEntities = ensureEntitiesArray(newEntities);\n  const existingIdsArray = getCurrent(state.ids);\n  const existingIds = new Set<Id>(existingIdsArray);\n  const added: T[] = [];\n  const updated: Update<T, Id>[] = [];\n  for (const entity of newEntities) {\n    const id = selectIdValue(entity, selectId);\n    if (existingIds.has(id)) {\n      updated.push({\n        id,\n        changes: entity\n      });\n    } else {\n      added.push(entity);\n    }\n  }\n  return [added, updated, existingIdsArray];\n}", "import type { Draft } from 'immer';\nimport type { EntityStateAdapter, IdSelector, Update, EntityId, DraftableEntityState } from './models';\nimport { createStateOperator, createSingleArgumentStateOperator } from './state_adapter';\nimport { selectIdValue, ensureEntitiesArray, splitAddedUpdatedEntities } from './utils';\nexport function createUnsortedStateAdapter<T, Id extends EntityId>(selectId: IdSelector<T, Id>): EntityStateAdapter<T, Id> {\n  type R = DraftableEntityState<T, Id>;\n  function addOneMutably(entity: T, state: R): void {\n    const key = selectIdValue(entity, selectId);\n    if (key in state.entities) {\n      return;\n    }\n    state.ids.push((key as Id & Draft<Id>));\n    (state.entities as Record<Id, T>)[key] = entity;\n  }\n  function addManyMutably(newEntities: readonly T[] | Record<Id, T>, state: R): void {\n    newEntities = ensureEntitiesArray(newEntities);\n    for (const entity of newEntities) {\n      addOneMutably(entity, state);\n    }\n  }\n  function setOneMutably(entity: T, state: R): void {\n    const key = selectIdValue(entity, selectId);\n    if (!(key in state.entities)) {\n      state.ids.push((key as Id & Draft<Id>));\n    }\n    ;\n    (state.entities as Record<Id, T>)[key] = entity;\n  }\n  function setManyMutably(newEntities: readonly T[] | Record<Id, T>, state: R): void {\n    newEntities = ensureEntitiesArray(newEntities);\n    for (const entity of newEntities) {\n      setOneMutably(entity, state);\n    }\n  }\n  function setAllMutably(newEntities: readonly T[] | Record<Id, T>, state: R): void {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.ids = [];\n    state.entities = ({} as Record<Id, T>);\n    addManyMutably(newEntities, state);\n  }\n  function removeOneMutably(key: Id, state: R): void {\n    return removeManyMutably([key], state);\n  }\n  function removeManyMutably(keys: readonly Id[], state: R): void {\n    let didMutate = false;\n    keys.forEach(key => {\n      if (key in state.entities) {\n        delete (state.entities as Record<Id, T>)[key];\n        didMutate = true;\n      }\n    });\n    if (didMutate) {\n      state.ids = ((state.ids as Id[]).filter(id => id in state.entities) as Id[] | Draft<Id[]>);\n    }\n  }\n  function removeAllMutably(state: R): void {\n    Object.assign(state, {\n      ids: [],\n      entities: {}\n    });\n  }\n  function takeNewKey(keys: {\n    [id: string]: Id;\n  }, update: Update<T, Id>, state: R): boolean {\n    const original: T | undefined = (state.entities as Record<Id, T>)[update.id];\n    if (original === undefined) {\n      return false;\n    }\n    const updated: T = Object.assign({}, original, update.changes);\n    const newKey = selectIdValue(updated, selectId);\n    const hasNewKey = newKey !== update.id;\n    if (hasNewKey) {\n      keys[update.id] = newKey;\n      delete (state.entities as Record<Id, T>)[update.id];\n    }\n    ;\n    (state.entities as Record<Id, T>)[newKey] = updated;\n    return hasNewKey;\n  }\n  function updateOneMutably(update: Update<T, Id>, state: R): void {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates: ReadonlyArray<Update<T, Id>>, state: R): void {\n    const newKeys: {\n      [id: string]: Id;\n    } = {};\n    const updatesPerEntity: {\n      [id: string]: Update<T, Id>;\n    } = {};\n    updates.forEach(update => {\n      // Only apply updates to entities that currently exist\n      if (update.id in state.entities) {\n        // If there are multiple updates to one entity, merge them together\n        updatesPerEntity[update.id] = {\n          id: update.id,\n          // Spreads ignore falsy values, so this works even if there isn't\n          // an existing update already at this key\n          changes: {\n            ...updatesPerEntity[update.id]?.changes,\n            ...update.changes\n          }\n        };\n      }\n    });\n    updates = Object.values(updatesPerEntity);\n    const didMutateEntities = updates.length > 0;\n    if (didMutateEntities) {\n      const didMutateIds = updates.filter(update => takeNewKey(newKeys, update, state)).length > 0;\n      if (didMutateIds) {\n        state.ids = Object.values(state.entities).map(e => selectIdValue((e as T), selectId));\n      }\n    }\n  }\n  function upsertOneMutably(entity: T, state: R): void {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities: readonly T[] | Record<Id, T>, state: R): void {\n    const [added, updated] = splitAddedUpdatedEntities<T, Id>(newEntities, selectId, state);\n    updateManyMutably(updated, state);\n    addManyMutably(added, state);\n  }\n  return {\n    removeAll: createSingleArgumentStateOperator(removeAllMutably),\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably)\n  };\n}", "import type { IdSelector, Comparer, EntityStateAdapter, Update, EntityId, DraftableEntityState } from './models';\nimport { createStateOperator } from './state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\nimport { selectIdValue, ensureEntitiesArray, splitAddedUpdatedEntities, getCurrent } from './utils';\n\n// Borrowed from Replay\nexport function findInsertIndex<T>(sortedItems: T[], item: T, comparisonFunction: Comparer<T>): number {\n  let lowIndex = 0;\n  let highIndex = sortedItems.length;\n  while (lowIndex < highIndex) {\n    let middleIndex = lowIndex + highIndex >>> 1;\n    const currentItem = sortedItems[middleIndex];\n    const res = comparisonFunction(item, currentItem);\n    if (res >= 0) {\n      lowIndex = middleIndex + 1;\n    } else {\n      highIndex = middleIndex;\n    }\n  }\n  return lowIndex;\n}\nexport function insert<T>(sortedItems: T[], item: T, comparisonFunction: Comparer<T>): T[] {\n  const insertAtIndex = findInsertIndex(sortedItems, item, comparisonFunction);\n  sortedItems.splice(insertAtIndex, 0, item);\n  return sortedItems;\n}\nexport function createSortedStateAdapter<T, Id extends EntityId>(selectId: IdSelector<T, Id>, comparer: Comparer<T>): EntityStateAdapter<T, Id> {\n  type R = DraftableEntityState<T, Id>;\n  const {\n    removeOne,\n    removeMany,\n    removeAll\n  } = createUnsortedStateAdapter(selectId);\n  function addOneMutably(entity: T, state: R): void {\n    return addManyMutably([entity], state);\n  }\n  function addManyMutably(newEntities: readonly T[] | Record<Id, T>, state: R, existingIds?: Id[]): void {\n    newEntities = ensureEntitiesArray(newEntities);\n    const existingKeys = new Set<Id>(existingIds ?? getCurrent(state.ids));\n    const models = newEntities.filter(model => !existingKeys.has(selectIdValue(model, selectId)));\n    if (models.length !== 0) {\n      mergeFunction(state, models);\n    }\n  }\n  function setOneMutably(entity: T, state: R): void {\n    return setManyMutably([entity], state);\n  }\n  function setManyMutably(newEntities: readonly T[] | Record<Id, T>, state: R): void {\n    newEntities = ensureEntitiesArray(newEntities);\n    if (newEntities.length !== 0) {\n      for (const item of newEntities) {\n        delete (state.entities as Record<Id, T>)[selectId(item)];\n      }\n      mergeFunction(state, newEntities);\n    }\n  }\n  function setAllMutably(newEntities: readonly T[] | Record<Id, T>, state: R): void {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.entities = ({} as Record<Id, T>);\n    state.ids = [];\n    addManyMutably(newEntities, state, []);\n  }\n  function updateOneMutably(update: Update<T, Id>, state: R): void {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates: ReadonlyArray<Update<T, Id>>, state: R): void {\n    let appliedUpdates = false;\n    let replacedIds = false;\n    for (let update of updates) {\n      const entity: T | undefined = (state.entities as Record<Id, T>)[update.id];\n      if (!entity) {\n        continue;\n      }\n      appliedUpdates = true;\n      Object.assign(entity, update.changes);\n      const newId = selectId(entity);\n      if (update.id !== newId) {\n        // We do support the case where updates can change an item's ID.\n        // This makes things trickier - go ahead and swap the IDs in state now.\n        replacedIds = true;\n        delete (state.entities as Record<Id, T>)[update.id];\n        const oldIndex = (state.ids as Id[]).indexOf(update.id);\n        state.ids[oldIndex] = newId;\n        (state.entities as Record<Id, T>)[newId] = entity;\n      }\n    }\n    if (appliedUpdates) {\n      mergeFunction(state, [], appliedUpdates, replacedIds);\n    }\n  }\n  function upsertOneMutably(entity: T, state: R): void {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities: readonly T[] | Record<Id, T>, state: R): void {\n    const [added, updated, existingIdsArray] = splitAddedUpdatedEntities<T, Id>(newEntities, selectId, state);\n    if (updated.length) {\n      updateManyMutably(updated, state);\n    }\n    if (added.length) {\n      addManyMutably(added, state, existingIdsArray);\n    }\n  }\n  function areArraysEqual(a: readonly unknown[], b: readonly unknown[]) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] === b[i]) {\n        continue;\n      }\n      return false;\n    }\n    return true;\n  }\n  type MergeFunction = (state: R, addedItems: readonly T[], appliedUpdates?: boolean, replacedIds?: boolean) => void;\n  const mergeFunction: MergeFunction = (state, addedItems, appliedUpdates, replacedIds) => {\n    const currentEntities = getCurrent(state.entities);\n    const currentIds = getCurrent(state.ids);\n    const stateEntities = (state.entities as Record<Id, T>);\n    let ids: Iterable<Id> = currentIds;\n    if (replacedIds) {\n      ids = new Set(currentIds);\n    }\n    let sortedEntities: T[] = [];\n    for (const id of ids) {\n      const entity = currentEntities[id];\n      if (entity) {\n        sortedEntities.push(entity);\n      }\n    }\n    const wasPreviouslyEmpty = sortedEntities.length === 0;\n\n    // Insert/overwrite all new/updated\n    for (const item of addedItems) {\n      stateEntities[selectId(item)] = item;\n      if (!wasPreviouslyEmpty) {\n        // Binary search insertion generally requires fewer comparisons\n        insert(sortedEntities, item, comparer);\n      }\n    }\n    if (wasPreviouslyEmpty) {\n      // All we have is the incoming values, sort them\n      sortedEntities = addedItems.slice().sort(comparer);\n    } else if (appliedUpdates) {\n      // We should have a _mostly_-sorted array already\n      sortedEntities.sort(comparer);\n    }\n    const newSortedIds = sortedEntities.map(selectId);\n    if (!areArraysEqual(currentIds, newSortedIds)) {\n      state.ids = newSortedIds;\n    }\n  };\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably)\n  };\n}", "import type { EntityAdapter, EntityId, EntityAdapterOptions } from './models';\nimport { createInitialStateFactory } from './entity_state';\nimport { createSelectorsFactory } from './state_selectors';\nimport { createSortedStateAdapter } from './sorted_state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\nimport type { WithRequiredProp } from '../tsHelpers';\nexport function createEntityAdapter<T, Id extends EntityId>(options: WithRequiredProp<EntityAdapterOptions<T, Id>, 'selectId'>): EntityAdapter<T, Id>;\nexport function createEntityAdapter<T extends {\n  id: EntityId;\n}>(options?: Omit<EntityAdapterOptions<T, T['id']>, 'selectId'>): EntityAdapter<T, T['id']>;\n\n/**\r\n *\r\n * @param options\r\n *\r\n * @public\r\n */\nexport function createEntityAdapter<T>(options: EntityAdapterOptions<T, EntityId> = {}): EntityAdapter<T, EntityId> {\n  const {\n    selectId,\n    sortComparer\n  }: Required<EntityAdapterOptions<T, EntityId>> = {\n    sortComparer: false,\n    selectId: (instance: any) => instance.id,\n    ...options\n  };\n  const stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);\n  const stateFactory = createInitialStateFactory(stateAdapter);\n  const selectorsFactory = createSelectorsFactory<T, EntityId>();\n  return {\n    selectId,\n    sortComparer,\n    ...stateFactory,\n    ...selectorsFactory,\n    ...stateAdapter\n  };\n}", "import { formatProdErrorMessage as _formatProdErrorMessage, formatProdErrorMessage as _formatProdErrorMessage2, formatProdErrorMessage as _formatProdErrorMessage3 } from \"@reduxjs/toolkit\";\nimport type { Action, Dispatch, MiddlewareAPI, UnknownAction } from 'redux';\nimport { isAction } from 'redux';\nimport type { ThunkDispatch } from 'redux-thunk';\nimport { createAction } from '../createAction';\nimport { nanoid } from '../nanoid';\nimport { find } from '../utils';\nimport { TaskAbortError, listenerCancelled, listenerCompleted, taskCancelled, taskCompleted } from './exceptions';\nimport { createDelay, createPause, raceWithSignal, runTask, validateActive } from './task';\nimport type { AbortSignalWithReason, AddListenerOverloads, AnyListenerPredicate, CreateListenerMiddlewareOptions, FallbackAddListenerOptions, ForkOptions, ForkedTask, ForkedTaskExecutor, ListenerEntry, ListenerErrorHandler, ListenerErrorInfo, ListenerMiddleware, ListenerMiddlewareInstance, TakePattern, TaskResult, TypedAddListener, TypedCreateListenerEntry, TypedRemoveListener, UnsubscribeListener, UnsubscribeListenerOptions } from './types';\nimport { abortControllerWithReason, addAbortSignalListener, assertFunction, catchRejection, noop } from './utils';\nexport { TaskAbortError } from './exceptions';\nexport type { AsyncTaskExecutor, CreateListenerMiddlewareOptions, ForkedTask, ForkedTaskAPI, ForkedTaskExecutor, ListenerEffect, ListenerEffectAPI, ListenerErrorHandler, ListenerMiddleware, ListenerMiddlewareInstance, SyncTaskExecutor, TaskCancelled, TaskRejected, TaskResolved, TaskResult, TypedAddListener, TypedRemoveListener, TypedStartListening, TypedStopListening, UnsubscribeListener, UnsubscribeListenerOptions } from './types';\n\n//Overly-aggressive byte-shaving\nconst {\n  assign\n} = Object;\n/**\n * @internal\n */\nconst INTERNAL_NIL_TOKEN = ({} as const);\nconst alm = ('listenerMiddleware' as const);\nconst createFork = (parentAbortSignal: AbortSignalWithReason<unknown>, parentBlockingPromises: Promise<any>[]) => {\n  const linkControllers = (controller: AbortController) => addAbortSignalListener(parentAbortSignal, () => abortControllerWithReason(controller, parentAbortSignal.reason));\n  return <T,>(taskExecutor: ForkedTaskExecutor<T>, opts?: ForkOptions): ForkedTask<T> => {\n    assertFunction(taskExecutor, 'taskExecutor');\n    const childAbortController = new AbortController();\n    linkControllers(childAbortController);\n    const result = runTask<T>(async (): Promise<T> => {\n      validateActive(parentAbortSignal);\n      validateActive(childAbortController.signal);\n      const result = ((await taskExecutor({\n        pause: createPause(childAbortController.signal),\n        delay: createDelay(childAbortController.signal),\n        signal: childAbortController.signal\n      })) as T);\n      validateActive(childAbortController.signal);\n      return result;\n    }, () => abortControllerWithReason(childAbortController, taskCompleted));\n    if (opts?.autoJoin) {\n      parentBlockingPromises.push(result.catch(noop));\n    }\n    return {\n      result: createPause<TaskResult<T>>(parentAbortSignal)(result),\n      cancel() {\n        abortControllerWithReason(childAbortController, taskCancelled);\n      }\n    };\n  };\n};\nconst createTakePattern = <S,>(startListening: AddListenerOverloads<UnsubscribeListener, S, Dispatch>, signal: AbortSignal): TakePattern<S> => {\n  /**\n   * A function that takes a ListenerPredicate and an optional timeout,\n   * and resolves when either the predicate returns `true` based on an action\n   * state combination or when the timeout expires.\n   * If the parent listener is canceled while waiting, this will throw a\n   * TaskAbortError.\n   */\n  const take = async <P extends AnyListenerPredicate<S>,>(predicate: P, timeout: number | undefined) => {\n    validateActive(signal);\n\n    // Placeholder unsubscribe function until the listener is added\n    let unsubscribe: UnsubscribeListener = () => {};\n    const tuplePromise = new Promise<[Action, S, S]>((resolve, reject) => {\n      // Inside the Promise, we synchronously add the listener.\n      let stopListening = startListening({\n        predicate: (predicate as any),\n        effect: (action, listenerApi): void => {\n          // One-shot listener that cleans up as soon as the predicate passes\n          listenerApi.unsubscribe();\n          // Resolve the promise with the same arguments the predicate saw\n          resolve([action, listenerApi.getState(), listenerApi.getOriginalState()]);\n        }\n      });\n      unsubscribe = () => {\n        stopListening();\n        reject();\n      };\n    });\n    const promises: (Promise<null> | Promise<[Action, S, S]>)[] = [tuplePromise];\n    if (timeout != null) {\n      promises.push(new Promise<null>(resolve => setTimeout(resolve, timeout, null)));\n    }\n    try {\n      const output = await raceWithSignal(signal, Promise.race(promises));\n      validateActive(signal);\n      return output;\n    } finally {\n      // Always clean up the listener\n      unsubscribe();\n    }\n  };\n  return (((predicate: AnyListenerPredicate<S>, timeout: number | undefined) => catchRejection(take(predicate, timeout))) as TakePattern<S>);\n};\nconst getListenerEntryPropsFrom = (options: FallbackAddListenerOptions) => {\n  let {\n    type,\n    actionCreator,\n    matcher,\n    predicate,\n    effect\n  } = options;\n  if (type) {\n    predicate = createAction(type).match;\n  } else if (actionCreator) {\n    type = actionCreator!.type;\n    predicate = actionCreator.match;\n  } else if (matcher) {\n    predicate = matcher;\n  } else if (predicate) {\n    // pass\n  } else {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(21) : 'Creating or removing a listener requires one of the known fields for matching an action');\n  }\n  assertFunction(effect, 'options.listener');\n  return {\n    predicate,\n    type,\n    effect\n  };\n};\n\n/** Accepts the possible options for creating a listener, and returns a formatted listener entry */\nexport const createListenerEntry: TypedCreateListenerEntry<unknown> = ( /* @__PURE__ */(assign((options: FallbackAddListenerOptions) => {\n  const {\n    type,\n    predicate,\n    effect\n  } = getListenerEntryPropsFrom(options);\n  const id = nanoid();\n  const entry: ListenerEntry<unknown> = {\n    id,\n    effect,\n    type,\n    predicate,\n    pending: new Set<AbortController>(),\n    unsubscribe: () => {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(22) : 'Unsubscribe not initialized');\n    }\n  };\n  return entry;\n}, {\n  withTypes: () => createListenerEntry\n}) as unknown) as TypedCreateListenerEntry<unknown>);\nconst cancelActiveListeners = (entry: ListenerEntry<unknown, Dispatch<UnknownAction>>) => {\n  entry.pending.forEach(controller => {\n    abortControllerWithReason(controller, listenerCancelled);\n  });\n};\nconst createClearListenerMiddleware = (listenerMap: Map<string, ListenerEntry>) => {\n  return () => {\n    listenerMap.forEach(cancelActiveListeners);\n    listenerMap.clear();\n  };\n};\n\n/**\n * Safely reports errors to the `errorHandler` provided.\n * Errors that occur inside `errorHandler` are notified in a new task.\n * Inspired by [rxjs reportUnhandledError](https://github.com/ReactiveX/rxjs/blob/6fafcf53dc9e557439b25debaeadfd224b245a66/src/internal/util/reportUnhandledError.ts)\n * @param errorHandler\n * @param errorToNotify\n */\nconst safelyNotifyError = (errorHandler: ListenerErrorHandler, errorToNotify: unknown, errorInfo: ListenerErrorInfo): void => {\n  try {\n    errorHandler(errorToNotify, errorInfo);\n  } catch (errorHandlerError) {\n    // We cannot let an error raised here block the listener queue.\n    // The error raised here will be picked up by `window.onerror`, `process.on('error')` etc...\n    setTimeout(() => {\n      throw errorHandlerError;\n    }, 0);\n  }\n};\n\n/**\n * @public\n */\nexport const addListener = ( /* @__PURE__ */(assign( /* @__PURE__ */createAction(`${alm}/add`), {\n  withTypes: () => addListener\n}) as unknown) as TypedAddListener<unknown>);\n\n/**\n * @public\n */\nexport const clearAllListeners = /* @__PURE__ */createAction(`${alm}/removeAll`);\n\n/**\n * @public\n */\nexport const removeListener = ( /* @__PURE__ */(assign( /* @__PURE__ */createAction(`${alm}/remove`), {\n  withTypes: () => removeListener\n}) as unknown) as TypedRemoveListener<unknown>);\nconst defaultErrorHandler: ListenerErrorHandler = (...args: unknown[]) => {\n  console.error(`${alm}/error`, ...args);\n};\n\n/**\n * @public\n */\nexport const createListenerMiddleware = <StateType = unknown, DispatchType extends Dispatch<Action> = ThunkDispatch<StateType, unknown, UnknownAction>, ExtraArgument = unknown>(middlewareOptions: CreateListenerMiddlewareOptions<ExtraArgument> = {}) => {\n  const listenerMap = new Map<string, ListenerEntry>();\n  const {\n    extra,\n    onError = defaultErrorHandler\n  } = middlewareOptions;\n  assertFunction(onError, 'onError');\n  const insertEntry = (entry: ListenerEntry) => {\n    entry.unsubscribe = () => listenerMap.delete(entry!.id);\n    listenerMap.set(entry.id, entry);\n    return (cancelOptions?: UnsubscribeListenerOptions) => {\n      entry.unsubscribe();\n      if (cancelOptions?.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    };\n  };\n  const startListening = (((options: FallbackAddListenerOptions) => {\n    let entry = find(Array.from(listenerMap.values()), existingEntry => existingEntry.effect === options.effect);\n    if (!entry) {\n      entry = createListenerEntry((options as any));\n    }\n    return insertEntry(entry);\n  }) as AddListenerOverloads<any>);\n  assign(startListening, {\n    withTypes: () => startListening\n  });\n  const stopListening = (options: FallbackAddListenerOptions & UnsubscribeListenerOptions): boolean => {\n    const {\n      type,\n      effect,\n      predicate\n    } = getListenerEntryPropsFrom(options);\n    const entry = find(Array.from(listenerMap.values()), entry => {\n      const matchPredicateOrType = typeof type === 'string' ? entry.type === type : entry.predicate === predicate;\n      return matchPredicateOrType && entry.effect === effect;\n    });\n    if (entry) {\n      entry.unsubscribe();\n      if (options.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    }\n    return !!entry;\n  };\n  assign(stopListening, {\n    withTypes: () => stopListening\n  });\n  const notifyListener = async (entry: ListenerEntry<unknown, Dispatch<UnknownAction>>, action: unknown, api: MiddlewareAPI, getOriginalState: () => StateType) => {\n    const internalTaskController = new AbortController();\n    const take = createTakePattern((startListening as AddListenerOverloads<any>), internalTaskController.signal);\n    const autoJoinPromises: Promise<any>[] = [];\n    try {\n      entry.pending.add(internalTaskController);\n      await Promise.resolve(entry.effect(action,\n      // Use assign() rather than ... to avoid extra helper functions added to bundle\n      assign({}, api, {\n        getOriginalState,\n        condition: (predicate: AnyListenerPredicate<any>, timeout?: number) => take(predicate, timeout).then(Boolean),\n        take,\n        delay: createDelay(internalTaskController.signal),\n        pause: createPause<any>(internalTaskController.signal),\n        extra,\n        signal: internalTaskController.signal,\n        fork: createFork(internalTaskController.signal, autoJoinPromises),\n        unsubscribe: entry.unsubscribe,\n        subscribe: () => {\n          listenerMap.set(entry.id, entry);\n        },\n        cancelActiveListeners: () => {\n          entry.pending.forEach((controller, _, set) => {\n            if (controller !== internalTaskController) {\n              abortControllerWithReason(controller, listenerCancelled);\n              set.delete(controller);\n            }\n          });\n        },\n        cancel: () => {\n          abortControllerWithReason(internalTaskController, listenerCancelled);\n          entry.pending.delete(internalTaskController);\n        },\n        throwIfCancelled: () => {\n          validateActive(internalTaskController.signal);\n        }\n      })));\n    } catch (listenerError) {\n      if (!(listenerError instanceof TaskAbortError)) {\n        safelyNotifyError(onError, listenerError, {\n          raisedBy: 'effect'\n        });\n      }\n    } finally {\n      await Promise.all(autoJoinPromises);\n      abortControllerWithReason(internalTaskController, listenerCompleted); // Notify that the task has completed\n      entry.pending.delete(internalTaskController);\n    }\n  };\n  const clearListenerMiddleware = createClearListenerMiddleware(listenerMap);\n  const middleware: ListenerMiddleware<StateType, DispatchType, ExtraArgument> = api => next => action => {\n    if (!isAction(action)) {\n      // we only want to notify listeners for action objects\n      return next(action);\n    }\n    if (addListener.match(action)) {\n      return startListening((action.payload as any));\n    }\n    if (clearAllListeners.match(action)) {\n      clearListenerMiddleware();\n      return;\n    }\n    if (removeListener.match(action)) {\n      return stopListening(action.payload);\n    }\n\n    // Need to get this state _before_ the reducer processes the action\n    let originalState: StateType | typeof INTERNAL_NIL_TOKEN = api.getState();\n\n    // `getOriginalState` can only be called synchronously.\n    // @see https://github.com/reduxjs/redux-toolkit/discussions/1648#discussioncomment-1932820\n    const getOriginalState = (): StateType => {\n      if (originalState === INTERNAL_NIL_TOKEN) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage3(23) : `${alm}: getOriginalState can only be called synchronously`);\n      }\n      return (originalState as StateType);\n    };\n    let result: unknown;\n    try {\n      // Actually forward the action to the reducer before we handle listeners\n      result = next(action);\n      if (listenerMap.size > 0) {\n        const currentState = api.getState();\n        // Work around ESBuild+TS transpilation issue\n        const listenerEntries = Array.from(listenerMap.values());\n        for (const entry of listenerEntries) {\n          let runListener = false;\n          try {\n            runListener = entry.predicate(action, currentState, originalState);\n          } catch (predicateError) {\n            runListener = false;\n            safelyNotifyError(onError, predicateError, {\n              raisedBy: 'predicate'\n            });\n          }\n          if (!runListener) {\n            continue;\n          }\n          notifyListener(entry, action, api, getOriginalState);\n        }\n      }\n    } finally {\n      // Remove `originalState` store from this scope.\n      originalState = INTERNAL_NIL_TOKEN;\n    }\n    return result;\n  };\n  return ({\n    middleware,\n    startListening,\n    stopListening,\n    clearListeners: clearListenerMiddleware\n  } as ListenerMiddlewareInstance<StateType, DispatchType, ExtraArgument>);\n};", "import type { SerializedError } from '@reduxjs/toolkit';\nconst task = 'task';\nconst listener = 'listener';\nconst completed = 'completed';\nconst cancelled = 'cancelled';\n\n/* TaskAbortError error codes  */\nexport const taskCancelled = (`task-${cancelled}` as const);\nexport const taskCompleted = (`task-${completed}` as const);\nexport const listenerCancelled = (`${listener}-${cancelled}` as const);\nexport const listenerCompleted = (`${listener}-${completed}` as const);\nexport class TaskAbortError implements SerializedError {\n  name = 'TaskAbortError';\n  message: string;\n  constructor(public code: string | undefined) {\n    this.message = `${task} ${cancelled} (reason: ${code})`;\n  }\n}", "import { formatProdErrorMessage as _formatProdErrorMessage } from \"@reduxjs/toolkit\";\nimport type { AbortSignalWithReason } from './types';\nexport const assertFunction: (func: unknown, expected: string) => asserts func is (...args: unknown[]) => unknown = (func: unknown, expected: string) => {\n  if (typeof func !== 'function') {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(32) : `${expected} is not a function`);\n  }\n};\nexport const noop = () => {};\nexport const catchRejection = <T,>(promise: Promise<T>, onError = noop): Promise<T> => {\n  promise.catch(onError);\n  return promise;\n};\nexport const addAbortSignalListener = (abortSignal: AbortSignal, callback: (evt: Event) => void) => {\n  abortSignal.addEventListener('abort', callback, {\n    once: true\n  });\n  return () => abortSignal.removeEventListener('abort', callback);\n};\n\n/**\r\n * Calls `abortController.abort(reason)` and patches `signal.reason`.\r\n * if it is not supported.\r\n *\r\n * At the time of writing `signal.reason` is available in FF chrome, edge node 17 and deno.\r\n * @param abortController\r\n * @param reason\r\n * @returns\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/reason\r\n */\nexport const abortControllerWithReason = <T,>(abortController: AbortController, reason: T): void => {\n  type Consumer<T> = (val: T) => void;\n  const signal = (abortController.signal as AbortSignalWithReason<T>);\n  if (signal.aborted) {\n    return;\n  }\n\n  // Patch `reason` if necessary.\n  // - We use defineProperty here because reason is a getter of `AbortSignal.__proto__`.\n  // - We need to patch 'reason' before calling `.abort()` because listeners to the 'abort'\n  // event are are notified immediately.\n  if (!('reason' in signal)) {\n    Object.defineProperty(signal, 'reason', {\n      enumerable: true,\n      value: reason,\n      configurable: true,\n      writable: true\n    });\n  }\n  ;\n  (abortController.abort as Consumer<typeof reason>)(reason);\n};", "import { TaskAbortError } from './exceptions';\nimport type { AbortSignalWithReason, TaskResult } from './types';\nimport { addAbortSignalListener, catchRejection, noop } from './utils';\n\n/**\r\n * Synchronously raises {@link TaskAbortError} if the task tied to the input `signal` has been cancelled.\r\n * @param signal\r\n * @param reason\r\n * @see {TaskAbortError}\r\n */\nexport const validateActive = (signal: AbortSignal): void => {\n  if (signal.aborted) {\n    const {\n      reason\n    } = (signal as AbortSignalWithReason<string>);\n    throw new TaskAbortError(reason);\n  }\n};\n\n/**\r\n * Generates a race between the promise(s) and the AbortSignal\r\n * This avoids `Promise.race()`-related memory leaks:\r\n * https://github.com/nodejs/node/issues/17469#issuecomment-349794909\r\n */\nexport function raceWithSignal<T>(signal: AbortSignalWithReason<string>, promise: Promise<T>): Promise<T> {\n  let cleanup = noop;\n  return new Promise<T>((resolve, reject) => {\n    const notifyRejection = () => reject(new TaskAbortError(signal.reason));\n    if (signal.aborted) {\n      notifyRejection();\n      return;\n    }\n    cleanup = addAbortSignalListener(signal, notifyRejection);\n    promise.finally(() => cleanup()).then(resolve, reject);\n  }).finally(() => {\n    // after this point, replace `cleanup` with a noop, so there is no reference to `signal` any more\n    cleanup = noop;\n  });\n}\n\n/**\r\n * Runs a task and returns promise that resolves to {@link TaskResult}.\r\n * Second argument is an optional `cleanUp` function that always runs after task.\r\n *\r\n * **Note:** `runTask` runs the executor in the next microtask.\r\n * @returns\r\n */\nexport const runTask = async <T,>(task: () => Promise<T>, cleanUp?: () => void): Promise<TaskResult<T>> => {\n  try {\n    await Promise.resolve();\n    const value = await task();\n    return {\n      status: 'ok',\n      value\n    };\n  } catch (error: any) {\n    return {\n      status: error instanceof TaskAbortError ? 'cancelled' : 'rejected',\n      error\n    };\n  } finally {\n    cleanUp?.();\n  }\n};\n\n/**\r\n * Given an input `AbortSignal` and a promise returns another promise that resolves\r\n * as soon the input promise is provided or rejects as soon as\r\n * `AbortSignal.abort` is `true`.\r\n * @param signal\r\n * @returns\r\n */\nexport const createPause = <T,>(signal: AbortSignal) => {\n  return (promise: Promise<T>): Promise<T> => {\n    return catchRejection(raceWithSignal(signal, promise).then(output => {\n      validateActive(signal);\n      return output;\n    }));\n  };\n};\n\n/**\r\n * Given an input `AbortSignal` and `timeoutMs` returns a promise that resolves\r\n * after `timeoutMs` or rejects as soon as `AbortSignal.abort` is `true`.\r\n * @param signal\r\n * @returns\r\n */\nexport const createDelay = (signal: AbortSignal) => {\n  const pause = createPause<void>(signal);\n  return (timeoutMs: number): Promise<void> => {\n    return pause(new Promise<void>(resolve => setTimeout(resolve, timeoutMs)));\n  };\n};", "import type { Dispatch, Middleware, UnknownAction } from 'redux';\nimport { compose } from 'redux';\nimport { createAction } from '../createAction';\nimport { isAllOf } from '../matchers';\nimport { nanoid } from '../nanoid';\nimport { emplace, find } from '../utils';\nimport type { AddMiddleware, DynamicMiddleware, DynamicMiddlewareInstance, MiddlewareEntry, WithMiddleware } from './types';\nexport type { DynamicMiddlewareInstance, GetDispatchType as GetDispatch, MiddlewareApiConfig } from './types';\nconst createMiddlewareEntry = <State = any, DispatchType extends Dispatch<UnknownAction> = Dispatch<UnknownAction>>(middleware: Middleware<any, State, DispatchType>): MiddlewareEntry<State, DispatchType> => ({\n  id: nanoid(),\n  middleware,\n  applied: new Map()\n});\nconst matchInstance = (instanceId: string) => (action: any): action is {\n  meta: {\n    instanceId: string;\n  };\n} => action?.meta?.instanceId === instanceId;\nexport const createDynamicMiddleware = <State = any, DispatchType extends Dispatch<UnknownAction> = Dispatch<UnknownAction>>(): DynamicMiddlewareInstance<State, DispatchType> => {\n  const instanceId = nanoid();\n  const middlewareMap = new Map<string, MiddlewareEntry<State, DispatchType>>();\n  const withMiddleware = (Object.assign(createAction('dynamicMiddleware/add', (...middlewares: Middleware<any, State, DispatchType>[]) => ({\n    payload: middlewares,\n    meta: {\n      instanceId\n    }\n  })), {\n    withTypes: () => withMiddleware\n  }) as WithMiddleware<State, DispatchType>);\n  const addMiddleware = (Object.assign(function addMiddleware(...middlewares: Middleware<any, State, DispatchType>[]) {\n    middlewares.forEach(middleware => {\n      let entry = find(Array.from(middlewareMap.values()), entry => entry.middleware === middleware);\n      if (!entry) {\n        entry = createMiddlewareEntry(middleware);\n      }\n      middlewareMap.set(entry.id, entry);\n    });\n  }, {\n    withTypes: () => addMiddleware\n  }) as AddMiddleware<State, DispatchType>);\n  const getFinalMiddleware: Middleware<{}, State, DispatchType> = api => {\n    const appliedMiddleware = Array.from(middlewareMap.values()).map(entry => emplace(entry.applied, api, {\n      insert: () => entry.middleware(api)\n    }));\n    return compose(...appliedMiddleware);\n  };\n  const isWithMiddleware = isAllOf(withMiddleware, matchInstance(instanceId));\n  const middleware: DynamicMiddleware<State, DispatchType> = api => next => action => {\n    if (isWithMiddleware(action)) {\n      addMiddleware(...action.payload);\n      return api.dispatch;\n    }\n    return getFinalMiddleware(api)(next)(action);\n  };\n  return {\n    middleware,\n    addMiddleware,\n    withMiddleware,\n    instanceId\n  };\n};", "import { formatProdErrorMessage as _formatProdErrorMessage, formatProdErrorMessage as _formatProdErrorMessage2 } from \"@reduxjs/toolkit\";\nimport type { Reducer, StateFromReducersMapObject, UnknownAction } from 'redux';\nimport { combineReducers } from 'redux';\nimport { nanoid } from './nanoid';\nimport type { Id, NonUndefined, Tail, UnionToIntersection, WithOptionalProp } from './tsHelpers';\nimport { emplace } from './utils';\ntype SliceLike<ReducerPath extends string, State> = {\n  reducerPath: ReducerPath;\n  reducer: Reducer<State>;\n};\ntype AnySliceLike = SliceLike<string, any>;\ntype SliceLikeReducerPath<A extends AnySliceLike> = A extends SliceLike<infer ReducerPath, any> ? ReducerPath : never;\ntype SliceLikeState<A extends AnySliceLike> = A extends SliceLike<any, infer State> ? State : never;\nexport type WithSlice<A extends AnySliceLike> = { [Path in SliceLikeReducerPath<A>]: SliceLikeState<A> };\ntype ReducerMap = Record<string, Reducer>;\ntype ExistingSliceLike<DeclaredState> = { [ReducerPath in keyof DeclaredState]: SliceLike<ReducerPath & string, NonUndefined<DeclaredState[ReducerPath]>> }[keyof DeclaredState];\nexport type InjectConfig = {\n  /**\n   * Allow replacing reducer with a different reference. Normally, an error will be thrown if a different reducer instance to the one already injected is used.\n   */\n  overrideExisting?: boolean;\n};\n\n/**\n * A reducer that allows for slices/reducers to be injected after initialisation.\n */\nexport interface CombinedSliceReducer<InitialState, DeclaredState = InitialState> extends Reducer<DeclaredState, UnknownAction, Partial<DeclaredState>> {\n  /**\n   * Provide a type for slices that will be injected lazily.\n   *\n   * One way to do this would be with interface merging:\n   * ```ts\n   *\n   * export interface LazyLoadedSlices {}\n   *\n   * export const rootReducer = combineSlices(stringSlice).withLazyLoadedSlices<LazyLoadedSlices>();\n   *\n   * // elsewhere\n   *\n   * declare module './reducer' {\n   *   export interface LazyLoadedSlices extends WithSlice<typeof booleanSlice> {}\n   * }\n   *\n   * const withBoolean = rootReducer.inject(booleanSlice);\n   *\n   * // elsewhere again\n   *\n   * declare module './reducer' {\n   *   export interface LazyLoadedSlices {\n   *     customName: CustomState\n   *   }\n   * }\n   *\n   * const withCustom = rootReducer.inject({ reducerPath: \"customName\", reducer: customSlice.reducer })\n   * ```\n   */\n  withLazyLoadedSlices<Lazy = {}>(): CombinedSliceReducer<InitialState, Id<DeclaredState & Partial<Lazy>>>;\n\n  /**\n   * Inject a slice.\n   *\n   * Accepts an individual slice, RTKQ API instance, or a \"slice-like\" { reducerPath, reducer } object.\n   *\n   * ```ts\n   * rootReducer.inject(booleanSlice)\n   * rootReducer.inject(baseApi)\n   * rootReducer.inject({ reducerPath: 'boolean' as const, reducer: newReducer }, { overrideExisting: true })\n   * ```\n   *\n   */\n  inject<Sl extends Id<ExistingSliceLike<DeclaredState>>>(slice: Sl, config?: InjectConfig): CombinedSliceReducer<InitialState, Id<DeclaredState & WithSlice<Sl>>>;\n\n  /**\n   * Inject a slice.\n   *\n   * Accepts an individual slice, RTKQ API instance, or a \"slice-like\" { reducerPath, reducer } object.\n   *\n   * ```ts\n   * rootReducer.inject(booleanSlice)\n   * rootReducer.inject(baseApi)\n   * rootReducer.inject({ reducerPath: 'boolean' as const, reducer: newReducer }, { overrideExisting: true })\n   * ```\n   *\n   */\n  inject<ReducerPath extends string, State>(slice: SliceLike<ReducerPath, State & (ReducerPath extends keyof DeclaredState ? never : State)>, config?: InjectConfig): CombinedSliceReducer<InitialState, Id<DeclaredState & WithSlice<SliceLike<ReducerPath, State>>>>;\n\n  /**\n   * Create a selector that guarantees that the slices injected will have a defined value when selector is run.\n   *\n   * ```ts\n   * const selectBooleanWithoutInjection = (state: RootState) => state.boolean;\n   * //                                                                ^? boolean | undefined\n   *\n   * const selectBoolean = rootReducer.inject(booleanSlice).selector((state) => {\n   *   // if action hasn't been dispatched since slice was injected, this would usually be undefined\n   *   // however selector() uses a Proxy around the first parameter to ensure that it evaluates to the initial state instead, if undefined\n   *   return state.boolean;\n   *   //           ^? boolean\n   * })\n   * ```\n   *\n   * If the reducer is nested inside the root state, a selectState callback can be passed to retrieve the reducer's state.\n   *\n   * ```ts\n   *\n   * export interface LazyLoadedSlices {};\n   *\n   * export const innerReducer = combineSlices(stringSlice).withLazyLoadedSlices<LazyLoadedSlices>();\n   *\n   * export const rootReducer = combineSlices({ inner: innerReducer });\n   *\n   * export type RootState = ReturnType<typeof rootReducer>;\n   *\n   * // elsewhere\n   *\n   * declare module \"./reducer.ts\" {\n   *  export interface LazyLoadedSlices extends WithSlice<typeof booleanSlice> {}\n   * }\n   *\n   * const withBool = innerReducer.inject(booleanSlice);\n   *\n   * const selectBoolean = withBool.selector(\n   *   (state) => state.boolean,\n   *   (rootState: RootState) => state.inner\n   * );\n   * //    now expects to be passed RootState instead of innerReducer state\n   *\n   * ```\n   *\n   * Value passed to selectorFn will be a Proxy - use selector.original(proxy) to get original state value (useful for debugging)\n   *\n   * ```ts\n   * const injectedReducer = rootReducer.inject(booleanSlice);\n   * const selectBoolean = injectedReducer.selector((state) => {\n   *   console.log(injectedReducer.selector.original(state).boolean) // possibly undefined\n   *   return state.boolean\n   * })\n   * ```\n   */\n  selector: {\n    /**\n     * Create a selector that guarantees that the slices injected will have a defined value when selector is run.\n     *\n     * ```ts\n     * const selectBooleanWithoutInjection = (state: RootState) => state.boolean;\n     * //                                                                ^? boolean | undefined\n     *\n     * const selectBoolean = rootReducer.inject(booleanSlice).selector((state) => {\n     *   // if action hasn't been dispatched since slice was injected, this would usually be undefined\n     *   // however selector() uses a Proxy around the first parameter to ensure that it evaluates to the initial state instead, if undefined\n     *   return state.boolean;\n     *   //           ^? boolean\n     * })\n     * ```\n     *\n     * Value passed to selectorFn will be a Proxy - use selector.original(proxy) to get original state value (useful for debugging)\n     *\n     * ```ts\n     * const injectedReducer = rootReducer.inject(booleanSlice);\n     * const selectBoolean = injectedReducer.selector((state) => {\n     *   console.log(injectedReducer.selector.original(state).boolean) // undefined\n     *   return state.boolean\n     * })\n     * ```\n     */\n    <Selector extends (state: DeclaredState, ...args: any[]) => unknown>(selectorFn: Selector): (state: WithOptionalProp<Parameters<Selector>[0], Exclude<keyof DeclaredState, keyof InitialState>>, ...args: Tail<Parameters<Selector>>) => ReturnType<Selector>;\n\n    /**\n     * Create a selector that guarantees that the slices injected will have a defined value when selector is run.\n     *\n     * ```ts\n     * const selectBooleanWithoutInjection = (state: RootState) => state.boolean;\n     * //                                                                ^? boolean | undefined\n     *\n     * const selectBoolean = rootReducer.inject(booleanSlice).selector((state) => {\n     *   // if action hasn't been dispatched since slice was injected, this would usually be undefined\n     *   // however selector() uses a Proxy around the first parameter to ensure that it evaluates to the initial state instead, if undefined\n     *   return state.boolean;\n     *   //           ^? boolean\n     * })\n     * ```\n     *\n     * If the reducer is nested inside the root state, a selectState callback can be passed to retrieve the reducer's state.\n     *\n     * ```ts\n     *\n     * interface LazyLoadedSlices {};\n     *\n     * const innerReducer = combineSlices(stringSlice).withLazyLoadedSlices<LazyLoadedSlices>();\n     *\n     * const rootReducer = combineSlices({ inner: innerReducer });\n     *\n     * type RootState = ReturnType<typeof rootReducer>;\n     *\n     * // elsewhere\n     *\n     * declare module \"./reducer.ts\" {\n     *  interface LazyLoadedSlices extends WithSlice<typeof booleanSlice> {}\n     * }\n     *\n     * const withBool = innerReducer.inject(booleanSlice);\n     *\n     * const selectBoolean = withBool.selector(\n     *   (state) => state.boolean,\n     *   (rootState: RootState) => state.inner\n     * );\n     * //    now expects to be passed RootState instead of innerReducer state\n     *\n     * ```\n     *\n     * Value passed to selectorFn will be a Proxy - use selector.original(proxy) to get original state value (useful for debugging)\n     *\n     * ```ts\n     * const injectedReducer = rootReducer.inject(booleanSlice);\n     * const selectBoolean = injectedReducer.selector((state) => {\n     *   console.log(injectedReducer.selector.original(state).boolean) // possibly undefined\n     *   return state.boolean\n     * })\n     * ```\n     */\n    <Selector extends (state: DeclaredState, ...args: any[]) => unknown, RootState>(selectorFn: Selector, selectState: (rootState: RootState, ...args: Tail<Parameters<Selector>>) => WithOptionalProp<Parameters<Selector>[0], Exclude<keyof DeclaredState, keyof InitialState>>): (state: RootState, ...args: Tail<Parameters<Selector>>) => ReturnType<Selector>;\n    /**\n     * Returns the unproxied state. Useful for debugging.\n     * @param state state Proxy, that ensures injected reducers have value\n     * @returns original, unproxied state\n     * @throws if value passed is not a state Proxy\n     */\n    original: (state: DeclaredState) => InitialState & Partial<DeclaredState>;\n  };\n}\ntype InitialState<Slices extends Array<AnySliceLike | ReducerMap>> = UnionToIntersection<Slices[number] extends infer Slice ? Slice extends AnySliceLike ? WithSlice<Slice> : StateFromReducersMapObject<Slice> : never>;\nconst isSliceLike = (maybeSliceLike: AnySliceLike | ReducerMap): maybeSliceLike is AnySliceLike => 'reducerPath' in maybeSliceLike && typeof maybeSliceLike.reducerPath === 'string';\nconst getReducers = (slices: Array<AnySliceLike | ReducerMap>) => slices.flatMap(sliceOrMap => isSliceLike(sliceOrMap) ? [([sliceOrMap.reducerPath, sliceOrMap.reducer] as const)] : Object.entries(sliceOrMap));\nconst ORIGINAL_STATE = Symbol.for('rtk-state-proxy-original');\nconst isStateProxy = (value: any) => !!value && !!value[ORIGINAL_STATE];\nconst stateProxyMap = new WeakMap<object, object>();\nconst createStateProxy = <State extends object,>(state: State, reducerMap: Partial<Record<string, Reducer>>) => (emplace(stateProxyMap, state, {\n  insert: () => new Proxy(state, {\n    get: (target, prop, receiver) => {\n      if (prop === ORIGINAL_STATE) return target;\n      const result = Reflect.get(target, prop, receiver);\n      if (typeof result === 'undefined') {\n        const reducer = reducerMap[prop.toString()];\n        if (reducer) {\n          // ensure action type is random, to prevent reducer treating it differently\n          const reducerResult = reducer(undefined, {\n            type: nanoid()\n          });\n          if (typeof reducerResult === 'undefined') {\n            throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(24) : `The slice reducer for key \"${prop.toString()}\" returned undefined when called for selector(). ` + `If the state passed to the reducer is undefined, you must ` + `explicitly return the initial state. The initial state may ` + `not be undefined. If you don't want to set a value for this reducer, ` + `you can use null instead of undefined.`);\n          }\n          return reducerResult;\n        }\n      }\n      return result;\n    }\n  })\n}) as State);\nconst original = (state: any) => {\n  if (!isStateProxy(state)) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(25) : 'original must be used on state Proxy');\n  }\n  return state[ORIGINAL_STATE];\n};\nconst noopReducer: Reducer<Record<string, any>> = (state = {}) => state;\nexport function combineSlices<Slices extends Array<AnySliceLike | ReducerMap>>(...slices: Slices): CombinedSliceReducer<Id<InitialState<Slices>>> {\n  const reducerMap = Object.fromEntries<Reducer>(getReducers(slices));\n  const getReducer = () => Object.keys(reducerMap).length ? combineReducers(reducerMap) : noopReducer;\n  let reducer = getReducer();\n  function combinedReducer(state: Record<string, unknown>, action: UnknownAction) {\n    return reducer(state, action);\n  }\n  combinedReducer.withLazyLoadedSlices = () => combinedReducer;\n  const inject = (slice: AnySliceLike, config: InjectConfig = {}): typeof combinedReducer => {\n    const {\n      reducerPath,\n      reducer: reducerToInject\n    } = slice;\n    const currentReducer = reducerMap[reducerPath];\n    if (!config.overrideExisting && currentReducer && currentReducer !== reducerToInject) {\n      if (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') {\n        console.error(`called \\`inject\\` to override already-existing reducer ${reducerPath} without specifying \\`overrideExisting: true\\``);\n      }\n      return combinedReducer;\n    }\n    reducerMap[reducerPath] = reducerToInject;\n    reducer = getReducer();\n    return combinedReducer;\n  };\n  const selector = Object.assign(function makeSelector<State extends object, RootState, Args extends any[]>(selectorFn: (state: State, ...args: Args) => any, selectState?: (rootState: RootState, ...args: Args) => State) {\n    return function selector(state: State, ...args: Args) {\n      return selectorFn(createStateProxy(selectState ? selectState((state as any), ...args) : state, reducerMap), ...args);\n    };\n  }, {\n    original\n  });\n  return (Object.assign(combinedReducer, {\n    inject,\n    selector\n  }) as any);\n}", "/**\r\n * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js\r\n *\r\n * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes\r\n * during build.\r\n * @param {number} code\r\n */\nexport function formatProdErrorMessage(code: number) {\n  return `Minified Redux Toolkit error #${code}; visit https://redux-toolkit.js.org/Errors?code=${code} for the full message or ` + 'use the non-minified dev environment for full errors. ';\n}", "import { createSlice } from \"@reduxjs/toolkit\";\nimport type { PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface AuthState {\n  user: object | undefined;\n  state: \"ready\" | \"waiting\";\n  userId: string | undefined;\n}\n\ninterface NewSessionRequest {\n  userId: string;\n  otp: string;\n}\n\nconst initialState: AuthState = {\n  user: undefined,\n  state: \"waiting\",\n  userId: undefined,\n};\n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    willGetUser: (state) => {},\n    didGetUser: (state, action: PayloadAction<object | undefined>) => {\n      state.user = action.payload;\n      state.state = \"ready\";\n    },\n    didGetLoginEmail: (state, action: PayloadAction<string | undefined>) => {\n      state.state = action.payload === undefined ? \"ready\" : \"waiting\";\n    },\n    didGetUserId: (state, action: PayloadAction<string | undefined>) => {\n      state.state = \"ready\";\n      state.userId = action.payload;\n    },\n    willCreateSession: (state, action: PayloadAction<NewSessionRequest>) => {\n      // Empty Placeholder\n    },\n    didCreateSession: (state, action: PayloadAction<any>) => {\n      // Empty Placeholder\n    },\n  },\n});\n\nexport const {\n  willGetUser,\n  didGetUser,\n  didGetLoginEmail,\n  didGetUserId,\n  willCreateSession,\n  didCreateSession,\n} = authSlice.actions;\n\nexport default authSlice.reducer;\n", "/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n", "/**\n * Returns true if the object is a function.\n * @param value The value to check\n */\nexport function isFunction(value: any): value is (...args: any[]) => any {\n  return typeof value === 'function';\n}\n", "/**\n * Used to create Error subclasses until the community moves away from ES5.\n *\n * This is because compiling from TypeScript down to ES5 has issues with subclassing Errors\n * as well as other built-in types: https://github.com/Microsoft/TypeScript/issues/12123\n *\n * @param createImpl A factory function to create the actual constructor implementation. The returned\n * function should be a named function that calls `_super` internally.\n */\nexport function createErrorClass<T>(createImpl: (_super: any) => any): T {\n  const _super = (instance: any) => {\n    Error.call(instance);\n    instance.stack = new Error().stack;\n  };\n\n  const ctorFunc = createImpl(_super);\n  ctorFunc.prototype = Object.create(Error.prototype);\n  ctorFunc.prototype.constructor = ctorFunc;\n  return ctorFunc;\n}\n", "import { createErrorClass } from './createErrorClass';\n\nexport interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (errors: any[]): UnsubscriptionError;\n}\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = createErrorClass(\n  (_super) =>\n    function UnsubscriptionErrorImpl(this: any, errors: (Error | string)[]) {\n      _super(this);\n      this.message = errors\n        ? `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}`\n        : '';\n      this.name = 'UnsubscriptionError';\n      this.errors = errors;\n    }\n);\n", "/**\n * Removes an item from an array, mutating it.\n * @param arr The array to remove the item from\n * @param item The item to remove\n */\nexport function arrRemove<T>(arr: T[] | undefined | null, item: T) {\n  if (arr) {\n    const index = arr.indexOf(item);\n    0 <= index && arr.splice(index, 1);\n  }\n}\n", "import { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic, Unsubscribable } from './types';\nimport { arrRemove } from './util/arrRemove';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY = (() => {\n    const empty = new Subscription();\n    empty.closed = true;\n    return empty;\n  })();\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   */\n  public closed = false;\n\n  private _parentage: Subscription[] | Subscription | null = null;\n\n  /**\n   * The list of registered finalizers to execute upon unsubscription. Adding and removing from this\n   * list occurs in the {@link #add} and {@link #remove} methods.\n   */\n  private _finalizers: Exclude<TeardownLogic, void>[] | null = null;\n\n  /**\n   * @param initialTeardown A function executed first as part of the finalization\n   * process that is kicked off when {@link #unsubscribe} is called.\n   */\n  constructor(private initialTeardown?: () => void) {}\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[] | undefined;\n\n    if (!this.closed) {\n      this.closed = true;\n\n      // Remove this from it's parents.\n      const { _parentage } = this;\n      if (_parentage) {\n        this._parentage = null;\n        if (Array.isArray(_parentage)) {\n          for (const parent of _parentage) {\n            parent.remove(this);\n          }\n        } else {\n          _parentage.remove(this);\n        }\n      }\n\n      const { initialTeardown: initialFinalizer } = this;\n      if (isFunction(initialFinalizer)) {\n        try {\n          initialFinalizer();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n\n      const { _finalizers } = this;\n      if (_finalizers) {\n        this._finalizers = null;\n        for (const finalizer of _finalizers) {\n          try {\n            execFinalizer(finalizer);\n          } catch (err) {\n            errors = errors ?? [];\n            if (err instanceof UnsubscriptionError) {\n              errors = [...errors, ...err.errors];\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  }\n\n  /**\n   * Adds a finalizer to this subscription, so that finalization will be unsubscribed/called\n   * when this subscription is unsubscribed. If this subscription is already {@link #closed},\n   * because it has already been unsubscribed, then whatever finalizer is passed to it\n   * will automatically be executed (unless the finalizer itself is also a closed subscription).\n   *\n   * Closed Subscriptions cannot be added as finalizers to any subscription. Adding a closed\n   * subscription to a any subscription will result in no operation. (A noop).\n   *\n   * Adding a subscription to itself, or adding `null` or `undefined` will not perform any\n   * operation at all. (A noop).\n   *\n   * `Subscription` instances that are added to this instance will automatically remove themselves\n   * if they are unsubscribed. Functions and {@link Unsubscribable} objects that you wish to remove\n   * will need to be removed manually with {@link #remove}\n   *\n   * @param teardown The finalization logic to add to this subscription.\n   */\n  add(teardown: TeardownLogic): void {\n    // Only add the finalizer if it's not undefined\n    // and don't add a subscription to itself.\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        // If this subscription is already closed,\n        // execute whatever finalizer is handed to it automatically.\n        execFinalizer(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          // We don't add closed subscriptions, and we don't add the same subscription\n          // twice. Subscription unsubscribe is idempotent.\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n          teardown._addParent(this);\n        }\n        (this._finalizers = this._finalizers ?? []).push(teardown);\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a this subscription already has a particular parent.\n   * This will signal that this subscription has already been added to the parent in question.\n   * @param parent the parent to check for\n   */\n  private _hasParent(parent: Subscription) {\n    const { _parentage } = this;\n    return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n  }\n\n  /**\n   * Adds a parent to this subscription so it can be removed from the parent if it\n   * unsubscribes on it's own.\n   *\n   * NOTE: THIS ASSUMES THAT {@link _hasParent} HAS ALREADY BEEN CHECKED.\n   * @param parent The parent subscription to add\n   */\n  private _addParent(parent: Subscription) {\n    const { _parentage } = this;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  }\n\n  /**\n   * Called on a child when it is removed via {@link #remove}.\n   * @param parent The parent to remove\n   */\n  private _removeParent(parent: Subscription) {\n    const { _parentage } = this;\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  }\n\n  /**\n   * Removes a finalizer from this subscription that was previously added with the {@link #add} method.\n   *\n   * Note that `Subscription` instances, when unsubscribed, will automatically remove themselves\n   * from every other `Subscription` they have been added to. This means that using the `remove` method\n   * is not a common thing and should be used thoughtfully.\n   *\n   * If you add the same finalizer instance of a function or an unsubscribable object to a `Subscription` instance\n   * more than once, you will need to call `remove` the same number of times to remove all instances.\n   *\n   * All finalizer instances are removed to free up memory upon unsubscription.\n   *\n   * @param teardown The finalizer to remove from this subscription\n   */\n  remove(teardown: Exclude<TeardownLogic, void>): void {\n    const { _finalizers } = this;\n    _finalizers && arrRemove(_finalizers, teardown);\n\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  }\n}\n\nexport const EMPTY_SUBSCRIPTION = Subscription.EMPTY;\n\nexport function isSubscription(value: any): value is Subscription {\n  return (\n    value instanceof Subscription ||\n    (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe))\n  );\n}\n\nfunction execFinalizer(finalizer: Unsubscribable | (() => void)) {\n  if (isFunction(finalizer)) {\n    finalizer();\n  } else {\n    finalizer.unsubscribe();\n  }\n}\n", "import { Subscriber } from './Subscriber';\nimport { ObservableNotification } from './types';\n\n/**\n * The {@link GlobalConfig} object for RxJS. It is used to configure things\n * like how to react on unhandled errors.\n */\nexport const config: GlobalConfig = {\n  onUnhandledError: null,\n  onStoppedNotification: null,\n  Promise: undefined,\n  useDeprecatedSynchronousErrorHandling: false,\n  useDeprecatedNextContext: false,\n};\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like how to react on unhandled errors. Accessible via {@link config}\n * object.\n */\nexport interface GlobalConfig {\n  /**\n   * A registration point for unhandled errors from RxJS. These are errors that\n   * cannot were not handled by consuming code in the usual subscription path. For\n   * example, if you have this configured, and you subscribe to an observable without\n   * providing an error handler, errors from that subscription will end up here. This\n   * will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onUnhandledError: ((err: any) => void) | null;\n\n  /**\n   * A registration point for notifications that cannot be sent to subscribers because they\n   * have completed, errored or have been explicitly unsubscribed. By default, next, complete\n   * and error notifications sent to stopped subscribers are noops. However, sometimes callers\n   * might want a different behavior. For example, with sources that attempt to report errors\n   * to stopped subscribers, a caller can configure RxJS to throw an unhandled error instead.\n   * This will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onStoppedNotification: ((notification: ObservableNotification<any>, subscriber: Subscriber<any>) => void) | null;\n\n  /**\n   * The promise constructor used by default for {@link Observable#toPromise toPromise} and {@link Observable#forEach forEach}\n   * methods.\n   *\n   * @deprecated As of version 8, RxJS will no longer support this sort of injection of a\n   * Promise constructor. If you need a Promise implementation other than native promises,\n   * please polyfill/patch Promise as you see appropriate. Will be removed in v8.\n   */\n  Promise?: PromiseConstructorLike;\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BUY TIME\n   * FOR MIGRATION REASONS.\n   *\n   * @deprecated As of version 8, RxJS will no longer support synchronous throwing\n   * of unhandled errors. All errors will be thrown on a separate call stack to prevent bad\n   * behaviors described above. Will be removed in v8.\n   */\n  useDeprecatedSynchronousErrorHandling: boolean;\n\n  /**\n   * If true, enables an as-of-yet undocumented feature from v5: The ability to access\n   * `unsubscribe()` via `this` context in `next` functions created in observers passed\n   * to `subscribe`.\n   *\n   * This is being removed because the performance was severely problematic, and it could also cause\n   * issues when types other than POJOs are passed to subscribe as subscribers, as they will likely have\n   * their `this` context overwritten.\n   *\n   * @deprecated As of version 8, RxJS will no longer support altering the\n   * context of next functions provided as part of an observer to Subscribe. Instead,\n   * you will have access to a subscription or a signal or token that will allow you to do things like\n   * unsubscribe and test closed status. Will be removed in v8.\n   */\n  useDeprecatedNextContext: boolean;\n}\n", "import type { TimerHandle } from './timerHandle';\ntype SetTimeoutFunction = (handler: () => void, timeout?: number, ...args: any[]) => TimerHandle;\ntype ClearTimeoutFunction = (handle: TimerHandle) => void;\n\ninterface TimeoutProvider {\n  setTimeout: SetTimeoutFunction;\n  clearTimeout: ClearTimeoutFunction;\n  delegate:\n    | {\n        setTimeout: SetTimeoutFunction;\n        clearTimeout: ClearTimeoutFunction;\n      }\n    | undefined;\n}\n\nexport const timeoutProvider: TimeoutProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setTimeout(handler: () => void, timeout?: number, ...args) {\n    const { delegate } = timeoutProvider;\n    if (delegate?.setTimeout) {\n      return delegate.setTimeout(handler, timeout, ...args);\n    }\n    return setTimeout(handler, timeout, ...args);\n  },\n  clearTimeout(handle) {\n    const { delegate } = timeoutProvider;\n    return (delegate?.clearTimeout || clearTimeout)(handle as any);\n  },\n  delegate: undefined,\n};\n", "import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\n\n/**\n * Handles an error on another job either with the user-configured {@link onUnhandledError},\n * or by throwing it on that new job so it can be picked up by `window.onerror`, `process.on('error')`, etc.\n *\n * This should be called whenever there is an error that is out-of-band with the subscription\n * or when an error hits a terminal boundary of the subscription and no error handler was provided.\n *\n * @param err the error to report\n */\nexport function reportUnhandledError(err: any) {\n  timeoutProvider.setTimeout(() => {\n    const { onUnhandledError } = config;\n    if (onUnhandledError) {\n      // Execute the user-configured error handler.\n      onUnhandledError(err);\n    } else {\n      // Throw so it is picked up by the runtime's uncaught error mechanism.\n      throw err;\n    }\n  });\n}\n", "/* tslint:disable:no-empty */\nexport function noop() { }\n", "import { CompleteNotification, NextNotification, ErrorNotification } from './types';\n\n/**\n * A completion object optimized for memory use and created to be the\n * same \"shape\" as other notifications in v8.\n * @internal\n */\nexport const COMPLETE_NOTIFICATION = (() => createNotification('C', undefined, undefined) as CompleteNotification)();\n\n/**\n * Internal use only. Creates an optimized error notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function errorNotification(error: any): ErrorNotification {\n  return createNotification('E', undefined, error) as any;\n}\n\n/**\n * Internal use only. Creates an optimized next notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function nextNotification<T>(value: T) {\n  return createNotification('N', value, undefined) as NextNotification<T>;\n}\n\n/**\n * Ensures that all notifications created internally have the same \"shape\" in v8.\n *\n * TODO: This is only exported to support a crazy legacy test in `groupBy`.\n * @internal\n */\nexport function createNotification(kind: 'N' | 'E' | 'C', value: any, error: any) {\n  return {\n    kind,\n    value,\n    error,\n  };\n}\n", "import { config } from '../config';\n\nlet context: { errorThrown: boolean; error: any } | null = null;\n\n/**\n * Handles dealing with errors for super-gross mode. Creates a context, in which\n * any synchronously thrown errors will be passed to {@link captureError}. Which\n * will record the error such that it will be rethrown after the call back is complete.\n * TODO: Remove in v8\n * @param cb An immediately executed function.\n */\nexport function errorContext(cb: () => void) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    const isRoot = !context;\n    if (isRoot) {\n      context = { errorThrown: false, error: null };\n    }\n    cb();\n    if (isRoot) {\n      const { errorThrown, error } = context!;\n      context = null;\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    // This is the general non-deprecated path for everyone that\n    // isn't crazy enough to use super-gross mode (useDeprecatedSynchronousErrorHandling)\n    cb();\n  }\n}\n\n/**\n * Captures errors only in super-gross mode.\n * @param err the error to capture\n */\nexport function captureError(err: any) {\n  if (config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}\n", "import { isFunction } from './util/isFunction';\nimport { Observer, ObservableNotification } from './types';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param next The `next` callback of an Observer.\n   * @param error The `error` callback of an\n   * Observer.\n   * @param complete The `complete` callback of an\n   * Observer.\n   * @return A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   * @deprecated Do not use. Will be removed in v8. There is no replacement for this\n   * method, and there is no reason to be creating instances of `Subscriber` directly.\n   * If you have a specific use case, please file an issue.\n   */\n  static create<T>(next?: (x?: T) => void, error?: (e?: any) => void, complete?: () => void): Subscriber<T> {\n    return new SafeSubscriber(next, error, complete);\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected isStopped: boolean = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected destination: Subscriber<any> | Observer<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * There is no reason to directly create an instance of Subscriber. This type is exported for typings reasons.\n   */\n  constructor(destination?: Subscriber<any> | Observer<any>) {\n    super();\n    if (destination) {\n      this.destination = destination;\n      // Automatically chain subscriptions together here.\n      // if destination is a Subscription, then it is a Subscriber.\n      if (isSubscription(destination)) {\n        destination.add(this);\n      }\n    } else {\n      this.destination = EMPTY_OBSERVER;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (this.isStopped) {\n      handleStoppedNotification(nextNotification(value), this);\n    } else {\n      this._next(value!);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (this.isStopped) {\n      handleStoppedNotification(errorNotification(err), this);\n    } else {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (this.isStopped) {\n      handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n    } else {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (!this.closed) {\n      this.isStopped = true;\n      super.unsubscribe();\n      this.destination = null!;\n    }\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    try {\n      this.destination.error(err);\n    } finally {\n      this.unsubscribe();\n    }\n  }\n\n  protected _complete(): void {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  }\n}\n\n/**\n * This bind is captured here because we want to be able to have\n * compatibility with monoid libraries that tend to use a method named\n * `bind`. In particular, a library called Monio requires this.\n */\nconst _bind = Function.prototype.bind;\n\nfunction bind<Fn extends (...args: any[]) => any>(fn: Fn, thisArg: any): Fn {\n  return _bind.call(fn, thisArg);\n}\n\n/**\n * Internal optimization only, DO NOT EXPOSE.\n * @internal\n */\nclass ConsumerObserver<T> implements Observer<T> {\n  constructor(private partialObserver: Partial<Observer<T>>) {}\n\n  next(value: T): void {\n    const { partialObserver } = this;\n    if (partialObserver.next) {\n      try {\n        partialObserver.next(value);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  }\n\n  error(err: any): void {\n    const { partialObserver } = this;\n    if (partialObserver.error) {\n      try {\n        partialObserver.error(err);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    } else {\n      handleUnhandledError(err);\n    }\n  }\n\n  complete(): void {\n    const { partialObserver } = this;\n    if (partialObserver.complete) {\n      try {\n        partialObserver.complete();\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  }\n}\n\nexport class SafeSubscriber<T> extends Subscriber<T> {\n  constructor(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((e?: any) => void) | null,\n    complete?: (() => void) | null\n  ) {\n    super();\n\n    let partialObserver: Partial<Observer<T>>;\n    if (isFunction(observerOrNext) || !observerOrNext) {\n      // The first argument is a function, not an observer. The next\n      // two arguments *could* be observers, or they could be empty.\n      partialObserver = {\n        next: (observerOrNext ?? undefined) as (((value: T) => void) | undefined),\n        error: error ?? undefined,\n        complete: complete ?? undefined,\n      };\n    } else {\n      // The first argument is a partial observer.\n      let context: any;\n      if (this && config.useDeprecatedNextContext) {\n        // This is a deprecated path that made `this.unsubscribe()` available in\n        // next handler functions passed to subscribe. This only exists behind a flag\n        // now, as it is *very* slow.\n        context = Object.create(observerOrNext);\n        context.unsubscribe = () => this.unsubscribe();\n        partialObserver = {\n          next: observerOrNext.next && bind(observerOrNext.next, context),\n          error: observerOrNext.error && bind(observerOrNext.error, context),\n          complete: observerOrNext.complete && bind(observerOrNext.complete, context),\n        };\n      } else {\n        // The \"normal\" path. Just use the partial observer directly.\n        partialObserver = observerOrNext;\n      }\n    }\n\n    // Wrap the partial observer to ensure it's a full observer, and\n    // make sure proper error handling is accounted for.\n    this.destination = new ConsumerObserver(partialObserver);\n  }\n}\n\nfunction handleUnhandledError(error: any) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    captureError(error);\n  } else {\n    // Ideal path, we report this as an unhandled error,\n    // which is thrown on a new call stack.\n    reportUnhandledError(error);\n  }\n}\n\n/**\n * An error handler used when no error handler was supplied\n * to the SafeSubscriber -- meaning no error handler was supplied\n * do the `subscribe` call on our observable.\n * @param err The error to handle\n */\nfunction defaultErrorHandler(err: any) {\n  throw err;\n}\n\n/**\n * A handler for notifications that cannot be sent to a stopped subscriber.\n * @param notification The notification being sent\n * @param subscriber The stopped subscriber\n */\nfunction handleStoppedNotification(notification: ObservableNotification<any>, subscriber: Subscriber<any>) {\n  const { onStoppedNotification } = config;\n  onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));\n}\n\n/**\n * The observer used as a stub for subscriptions where the user did not\n * pass any arguments to `subscribe`. Comes with the default error handling\n * behavior.\n */\nexport const EMPTY_OBSERVER: Readonly<Observer<any>> & { closed: true } = {\n  closed: true,\n  next: noop,\n  error: defaultErrorHandler,\n  complete: noop,\n};\n", "/**\n * Symbol.observable or a string \"@@observable\". Used for interop\n *\n * @deprecated We will no longer be exporting this symbol in upcoming versions of RxJS.\n * Instead polyfill and use Symbol.observable directly *or* use https://www.npmjs.com/package/symbol-observable\n */\nexport const observable: string | symbol = (() => (typeof Symbol === 'function' && Symbol.observable) || '@@observable')();\n", "/**\n * This function takes one parameter and just returns it. Simply put,\n * this is like `<T>(x: T): T => x`.\n *\n * ## Examples\n *\n * This is useful in some cases when using things like `mergeMap`\n *\n * ```ts\n * import { interval, take, map, range, mergeMap, identity } from 'rxjs';\n *\n * const source$ = interval(1000).pipe(take(5));\n *\n * const result$ = source$.pipe(\n *   map(i => range(i)),\n *   mergeMap(identity) // same as mergeMap(x => x)\n * );\n *\n * result$.subscribe({\n *   next: console.log\n * });\n * ```\n *\n * Or when you want to selectively apply an operator\n *\n * ```ts\n * import { interval, take, identity } from 'rxjs';\n *\n * const shouldLimit = () => Math.random() < 0.5;\n *\n * const source$ = interval(1000);\n *\n * const result$ = source$.pipe(shouldLimit() ? take(5) : identity);\n *\n * result$.subscribe({\n *   next: console.log\n * });\n * ```\n *\n * @param x Any value that is returned by this function\n * @returns The value passed as the first parameter to this function\n */\nexport function identity<T>(x: T): T {\n  return x;\n}\n", "import { identity } from './identity';\nimport { UnaryFunction } from '../types';\n\nexport function pipe(): typeof identity;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>\n): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>\n): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>\n): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>\n): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>\n): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>\n): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>,\n  ...fns: UnaryFunction<any, any>[]\n): UnaryFunction<T, unknown>;\n\n/**\n * pipe() can be called on one or more functions, each of which can take one argument (\"UnaryFunction\")\n * and uses it to return a value.\n * It returns a function that takes one argument, passes it to the first UnaryFunction, and then\n * passes the result to the next one, passes that result to the next one, and so on.  \n */\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (fns.length === 0) {\n    return identity as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n", "import { Operator } from './Operator';\nimport { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription, Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, Subscribable, Observer } from './types';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  source: Observable<any> | undefined;\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  operator: Operator<any, T> | undefined;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new Observable by calling the Observable constructor\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new observable\n   * @nocollapse\n   * @deprecated Use `new Observable()` instead. Will be removed in v8.\n   */\n  static create: (...args: any[]) => any = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable instance as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param operator the operator defining the operation to take on the observable\n   * @return a new observable with the Operator applied\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * If you have implemented an operator using `lift`, it is recommended that you create an\n   * operator by simply returning `new Observable()` directly. See \"Creating new operators from\n   * scratch\" section here: https://rxjs.dev/guide/operators\n   */\n  lift<R>(operator?: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observerOrNext?: Partial<Observer<T>> | ((value: T) => void)): Subscription;\n  /** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\n  subscribe(next?: ((value: T) => void) | null, error?: ((error: any) => void) | null, complete?: (() => void) | null): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular, do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided and an error happens,\n   * it will be thrown asynchronously. Errors thrown asynchronously cannot be caught using `try`/`catch`. Instead,\n   * use the {@link onUnhandledError} configuration option or use a runtime handler (like `window.onerror` or\n   * `process.on('error)`) to be notified of unhandled errors. Because of this, it's recommended that you provide\n   * an `error` method to avoid missing thrown errors.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of an Observer,\n   * if you do not need to listen for something, you can omit a function by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to the `error` function, as with an Observer, if not provided, errors emitted by an Observable will be thrown asynchronously.\n   *\n   * You can, however, subscribe with no parameters at all. This may be the case where you're not interested in terminal events\n   * and you also handled emissions internally by using operators (e.g. using `tap`).\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * #### Examples\n   *\n   * Subscribe with an {@link guide/observer Observer}\n   *\n   * ```ts\n   * import { of } from 'rxjs';\n   *\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() {\n   *     // We actually could just remove this method,\n   *     // since we do not really care about errors right now.\n   *   },\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   *   .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // 'Adding: 1'\n   * // 'Adding: 2'\n   * // 'Adding: 3'\n   * // 'Sum equals: 6'\n   * ```\n   *\n   * Subscribe with functions ({@link deprecations/subscribe-arguments deprecated})\n   *\n   * ```ts\n   * import { of } from 'rxjs'\n   *\n   * let sum = 0;\n   *\n   * of(1, 2, 3).subscribe(\n   *   value => {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   () => console.log('Sum equals: ' + sum)\n   * );\n   *\n   * // Logs:\n   * // 'Adding: 1'\n   * // 'Adding: 2'\n   * // 'Adding: 3'\n   * // 'Sum equals: 6'\n   * ```\n   *\n   * Cancel a subscription\n   *\n   * ```ts\n   * import { interval } from 'rxjs';\n   *\n   * const subscription = interval(1000).subscribe({\n   *   next(num) {\n   *     console.log(num)\n   *   },\n   *   complete() {\n   *     // Will not be called, even when cancelling subscription.\n   *     console.log('completed!');\n   *   }\n   * });\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // 'unsubscribed!' after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   * or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   * Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   * the error will be thrown asynchronously as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {Subscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((error: any) => void) | null,\n    complete?: (() => void) | null\n  ): Subscription {\n    const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n\n    errorContext(() => {\n      const { operator, source } = this;\n      subscriber.add(\n        operator\n          ? // We're dealing with a subscription in the\n            // operator chain to one of our lifted operators.\n            operator.call(subscriber, source)\n          : source\n          ? // If `source` has a value, but `operator` does not, something that\n            // had intimate knowledge of our API, like our `Subject`, must have\n            // set it. We're going to just call `_subscribe` directly.\n            this._subscribe(subscriber)\n          : // In all other cases, we're likely wrapping a user-provided initializer\n            // function, so we need to catch errors and handle them appropriately.\n            this._trySubscribe(subscriber)\n      );\n    });\n\n    return subscriber;\n  }\n\n  /** @internal */\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      // We don't need to return anything in this case,\n      // because it's just going to try to `add()` to a subscription\n      // above.\n      sink.error(err);\n    }\n  }\n\n  /**\n   * Used as a NON-CANCELLABLE means of subscribing to an observable, for use with\n   * APIs that expect promises, like `async/await`. You cannot unsubscribe from this.\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * #### Example\n   *\n   * ```ts\n   * import { interval, take } from 'rxjs';\n   *\n   * const source$ = interval(1000).pipe(take(4));\n   *\n   * async function getTotal() {\n   *   let total = 0;\n   *\n   *   await source$.forEach(value => {\n   *     total += value;\n   *     console.log('observable -> ' + value);\n   *   });\n   *\n   *   return total;\n   * }\n   *\n   * getTotal().then(\n   *   total => console.log('Total: ' + total)\n   * );\n   *\n   * // Expected:\n   * // 'observable -> 0'\n   * // 'observable -> 1'\n   * // 'observable -> 2'\n   * // 'observable -> 3'\n   * // 'Total: 6'\n   * ```\n   *\n   * @param next a handler for each value emitted by the observable\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void): Promise<void>;\n\n  /**\n   * @param next a handler for each value emitted by the observable\n   * @param promiseCtor a constructor function used to instantiate the Promise\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   * @deprecated Passing a Promise constructor will no longer be available\n   * in upcoming versions of RxJS. This is because it adds weight to the library, for very\n   * little benefit. If you need this functionality, it is recommended that you either\n   * polyfill Promise, or you create an adapter to convert the returned native promise\n   * to whatever promise implementation you wanted. Will be removed in v8.\n   */\n  forEach(next: (value: T) => void, promiseCtor: PromiseConstructorLike): Promise<void>;\n\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      const subscriber = new SafeSubscriber<T>({\n        next: (value) => {\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscriber.unsubscribe();\n          }\n        },\n        error: reject,\n        complete: resolve,\n      });\n      this.subscribe(subscriber);\n    }) as Promise<void>;\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source?.subscribe(subscriber);\n  }\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>\n  ): Observable<D>;\n  pipe<A, B, C, D, E>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>\n  ): Observable<E>;\n  pipe<A, B, C, D, E, F>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>\n  ): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>\n  ): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>\n  ): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>\n  ): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>,\n    ...operations: OperatorFunction<any, any>[]\n  ): Observable<unknown>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ## Example\n   *\n   * ```ts\n   * import { interval, filter, map, scan } from 'rxjs';\n   *\n   * interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x));\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: typeof Promise): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: PromiseConstructorLike): Promise<T | undefined>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Subscribe to this Observable and get a Promise resolving on\n   * `complete` with the last emission (if any).\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * @method toPromise\n   * @param [promiseCtor] a constructor function used to instantiate\n   * the Promise\n   * @return A Promise that resolves with the last value emit, or\n   * rejects on an error. If there were no emissions, Promise\n   * resolves with undefined.\n   * @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise\n   */\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T | undefined> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: T | undefined;\n      this.subscribe(\n        (x: T) => (value = x),\n        (err: any) => reject(err),\n        () => resolve(value)\n      );\n    }) as Promise<T | undefined>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  return promiseCtor ?? config.Promise ?? Promise;\n}\n\nfunction isObserver<T>(value: any): value is Observer<T> {\n  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\n\nfunction isSubscriber<T>(value: any): value is Subscriber<T> {\n  return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));\n}\n", "import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\nimport { isFunction } from './isFunction';\n\n/**\n * Used to determine if an object is an Observable with a lift function.\n */\nexport function hasLift(source: any): source is { lift: InstanceType<typeof Observable>['lift'] } {\n  return isFunction(source?.lift);\n}\n\n/**\n * Creates an `OperatorFunction`. Used to define operators throughout the library in a concise way.\n * @param init The logic to connect the liftedSource to the subscriber at the moment of subscription.\n */\nexport function operate<T, R>(\n  init: (liftedSource: Observable<T>, subscriber: Subscriber<R>) => (() => void) | void\n): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    if (hasLift(source)) {\n      return source.lift(function (this: Subscriber<R>, liftedSource: Observable<T>) {\n        try {\n          return init(liftedSource, this);\n        } catch (err) {\n          this.error(err);\n        }\n      });\n    }\n    throw new TypeError('Unable to lift unknown Observable type');\n  };\n}\n", "import { Subscriber } from '../Subscriber';\n\n/**\n * Creates an instance of an `OperatorSubscriber`.\n * @param destination The downstream subscriber.\n * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n * and send to the `destination` error handler.\n * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n * this handler are sent to the `destination` error handler.\n * @param onFinalize Additional teardown logic here. This will only be called on teardown if the\n * subscriber itself is not already closed. This is called after all other teardown logic is executed.\n */\nexport function createOperatorSubscriber<T>(\n  destination: Subscriber<any>,\n  onNext?: (value: T) => void,\n  onComplete?: () => void,\n  onError?: (err: any) => void,\n  onFinalize?: () => void\n): Subscriber<T> {\n  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\n\n/**\n * A generic helper for allowing operators to be created with a Subscriber and\n * use closures to capture necessary state from the operator function itself.\n */\nexport class OperatorSubscriber<T> extends Subscriber<T> {\n  /**\n   * Creates an instance of an `OperatorSubscriber`.\n   * @param destination The downstream subscriber.\n   * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n   * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n   * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n   * and send to the `destination` error handler.\n   * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n   * this handler are sent to the `destination` error handler.\n   * @param onFinalize Additional finalization logic here. This will only be called on finalization if the\n   * subscriber itself is not already closed. This is called after all other finalization logic is executed.\n   * @param shouldUnsubscribe An optional check to see if an unsubscribe call should truly unsubscribe.\n   * NOTE: This currently **ONLY** exists to support the strange behavior of {@link groupBy}, where unsubscription\n   * to the resulting observable does not actually disconnect from the source if there are active subscriptions\n   * to any grouped observable. (DO NOT EXPOSE OR USE EXTERNALLY!!!)\n   */\n  constructor(\n    destination: Subscriber<any>,\n    onNext?: (value: T) => void,\n    onComplete?: () => void,\n    onError?: (err: any) => void,\n    private onFinalize?: () => void,\n    private shouldUnsubscribe?: () => boolean\n  ) {\n    // It's important - for performance reasons - that all of this class's\n    // members are initialized and that they are always initialized in the same\n    // order. This will ensure that all OperatorSubscriber instances have the\n    // same hidden class in V8. This, in turn, will help keep the number of\n    // hidden classes involved in property accesses within the base class as\n    // low as possible. If the number of hidden classes involved exceeds four,\n    // the property accesses will become megamorphic and performance penalties\n    // will be incurred - i.e. inline caches won't be used.\n    //\n    // The reasons for ensuring all instances have the same hidden class are\n    // further discussed in this blog post from Benedikt Meurer:\n    // https://benediktmeurer.de/2018/03/23/impact-of-polymorphism-on-component-based-frameworks-like-react/\n    super(destination);\n    this._next = onNext\n      ? function (this: OperatorSubscriber<T>, value: T) {\n          try {\n            onNext(value);\n          } catch (err) {\n            destination.error(err);\n          }\n        }\n      : super._next;\n    this._error = onError\n      ? function (this: OperatorSubscriber<T>, err: any) {\n          try {\n            onError(err);\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure finalization.\n            this.unsubscribe();\n          }\n        }\n      : super._error;\n    this._complete = onComplete\n      ? function (this: OperatorSubscriber<T>) {\n          try {\n            onComplete();\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure finalization.\n            this.unsubscribe();\n          }\n        }\n      : super._complete;\n  }\n\n  unsubscribe() {\n    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n      const { closed } = this;\n      super.unsubscribe();\n      // Execute additional teardown if we have any and we didn't already do so.\n      !closed && this.onFinalize?.();\n    }\n  }\n}\n", "import { createErrorClass } from './createErrorClass';\n\nexport interface ObjectUnsubscribedError extends Error {}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (): ObjectUnsubscribedError;\n}\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = createErrorClass(\n  (_super) =>\n    function ObjectUnsubscribedErrorImpl(this: any) {\n      _super(this);\n      this.name = 'ObjectUnsubscribedError';\n      this.message = 'object unsubscribed';\n    }\n);\n", "import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n  closed = false;\n\n  private currentObservers: Observer<T>[] | null = null;\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  observers: Observer<T>[] = [];\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  isStopped = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  hasError = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  thrownError: any = null;\n\n  /**\n   * Creates a \"subject\" by basically gluing an observer to an observable.\n   *\n   * @nocollapse\n   * @deprecated Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion.\n   */\n  static create: (...args: any[]) => any = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  constructor() {\n    // NOTE: This must be here to obscure Observable's constructor.\n    super();\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator as any;\n    return subject as any;\n  }\n\n  /** @internal */\n  protected _throwIfClosed() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  }\n\n  next(value: T) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        if (!this.currentObservers) {\n          this.currentObservers = Array.from(this.observers);\n        }\n        for (const observer of this.currentObservers) {\n          observer.next(value);\n        }\n      }\n    });\n  }\n\n  error(err: any) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.hasError = this.isStopped = true;\n        this.thrownError = err;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.error(err);\n        }\n      }\n    });\n  }\n\n  complete() {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.isStopped = true;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.complete();\n        }\n      }\n    });\n  }\n\n  unsubscribe() {\n    this.isStopped = this.closed = true;\n    this.observers = this.currentObservers = null!;\n  }\n\n  get observed() {\n    return this.observers?.length > 0;\n  }\n\n  /** @internal */\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    this._throwIfClosed();\n    return super._trySubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._checkFinalizedStatuses(subscriber);\n    return this._innerSubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _innerSubscribe(subscriber: Subscriber<any>) {\n    const { hasError, isStopped, observers } = this;\n    if (hasError || isStopped) {\n      return EMPTY_SUBSCRIPTION;\n    }\n    this.currentObservers = null;\n    observers.push(subscriber);\n    return new Subscription(() => {\n      this.currentObservers = null;\n      arrRemove(observers, subscriber);\n    });\n  }\n\n  /** @internal */\n  protected _checkFinalizedStatuses(subscriber: Subscriber<any>) {\n    const { hasError, thrownError, isStopped } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create custom Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable: any = new Observable<T>();\n    observable.source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(\n    /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n    public destination?: Observer<T>,\n    source?: Observable<T>\n  ) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    this.destination?.next?.(value);\n  }\n\n  error(err: any) {\n    this.destination?.error?.(err);\n  }\n\n  complete() {\n    this.destination?.complete?.();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return this.source?.subscribe(subscriber) ?? EMPTY_SUBSCRIPTION;\n  }\n}\n", "import { TimestampProvider } from '../types';\n\ninterface DateTimestampProvider extends TimestampProvider {\n  delegate: TimestampProvider | undefined;\n}\n\nexport const dateTimestampProvider: DateTimestampProvider = {\n  now() {\n    // Use the variable rather than `this` so that the function can be called\n    // without being bound to the provider.\n    return (dateTimestampProvider.delegate || Date).now();\n  },\n  delegate: undefined,\n};\n", "import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n\n/**\n * A unit of work to be executed in a `scheduler`. An action is typically\n * created from within a {@link SchedulerLike} and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent {@link SchedulerLike} for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n", "import type { TimerHandle } from './timerHandle';\ntype SetIntervalFunction = (handler: () => void, timeout?: number, ...args: any[]) => TimerHandle;\ntype ClearIntervalFunction = (handle: TimerHandle) => void;\n\ninterface IntervalProvider {\n  setInterval: SetIntervalFunction;\n  clearInterval: ClearIntervalFunction;\n  delegate:\n    | {\n        setInterval: SetIntervalFunction;\n        clearInterval: ClearIntervalFunction;\n      }\n    | undefined;\n}\n\nexport const intervalProvider: IntervalProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setInterval(handler: () => void, timeout?: number, ...args) {\n    const { delegate } = intervalProvider;\n    if (delegate?.setInterval) {\n      return delegate.setInterval(handler, timeout, ...args);\n    }\n    return setInterval(handler, timeout, ...args);\n  },\n  clearInterval(handle) {\n    const { delegate } = intervalProvider;\n    return (delegate?.clearInterval || clearInterval)(handle as any);\n  },\n  delegate: undefined,\n};\n", "import { Action } from './Action';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { intervalProvider } from './intervalProvider';\nimport { arrRemove } from '../util/arrRemove';\nimport { TimerHandle } from './timerHandle';\n\nexport class AsyncAction<T> extends Action<T> {\n  public id: TimerHandle | undefined;\n  public state?: T;\n  // @ts-ignore: Property has no initializer and is not definitely assigned\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (this.closed) {\n      return this;\n    }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id ?? this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, _id?: TimerHandle, delay: number = 0): TimerHandle {\n    return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(_scheduler: AsyncScheduler, id?: TimerHandle, delay: number | null = 0): TimerHandle | undefined {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay != null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    if (id != null) {\n      intervalProvider.clearInterval(id);\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, _delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      // HACK: Since code elsewhere is relying on the \"truthiness\" of the\n      // return here, we can't have it return \"\" or 0 or false.\n      // TODO: Clean this up when we refactor schedulers mid-version-8 or so.\n      errorValue = e ? e : new Error('Scheduled action threw falsy error');\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      const { id, scheduler } = this;\n      const { actions } = scheduler;\n\n      this.work = this.state = this.scheduler = null!;\n      this.pending = false;\n\n      arrRemove(actions, this);\n      if (id != null) {\n        this.id = this.recycleAsyncId(scheduler, id, null);\n      }\n\n      this.delay = null!;\n      super.unsubscribe();\n    }\n  }\n}\n", "import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\nimport { SchedulerLike, SchedulerAction } from './types';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an `Action`.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}. Will be made internal in v8.\n */\nexport class Scheduler implements SchedulerLike {\n  public static now: () => number = dateTimestampProvider.now;\n\n  constructor(private schedulerActionCtor: typeof Action, now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.schedulerActionCtor<T>(this, work).schedule(state, delay);\n  }\n}\n", "import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\nimport { TimerHandle } from './timerHandle';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   * @internal\n   */\n  public _active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   * @internal\n   */\n  public _scheduled: TimerHandle | undefined;\n\n  constructor(SchedulerAction: typeof Action, now: () => number = Scheduler.now) {\n    super(SchedulerAction, now);\n  }\n\n  public flush(action: AsyncAction<any>): void {\n    const { actions } = this;\n\n    if (this._active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this._active = true;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while ((action = actions.shift()!)); // exhaust the scheduler queue\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions.shift()!)) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n", "import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\nimport { SchedulerAction } from '../types';\nimport { TimerHandle } from './timerHandle';\n\nexport class QueueAction<T> extends AsyncAction<T> {\n  constructor(protected scheduler: QueueScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return delay > 0 || this.closed ? super.execute(state, delay) : this._execute(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: TimerHandle, delay: number = 0): TimerHandle {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n\n    if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n\n    // Otherwise flush the scheduler starting with this action.\n    scheduler.flush(this);\n\n    // HACK: In the past, this was returning `void`. However, `void` isn't a valid\n    // `TimerHandle`, and generally the return value here isn't really used. So the\n    // compromise is to return `0` which is both \"falsy\" and a valid `TimerHandle`,\n    // as opposed to refactoring every other instanceo of `requestAsyncId`.\n    return 0;\n  }\n}\n", "import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n", "import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link asyncScheduler} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * ## Examples\n * Schedule recursively first, then do something\n * ```ts\n * import { queueScheduler } from 'rxjs';\n *\n * queueScheduler.schedule(() => {\n *   queueScheduler.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n * ```\n *\n * Reschedule itself recursively\n * ```ts\n * import { queueScheduler } from 'rxjs';\n *\n * queueScheduler.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n * ```\n */\n\nexport const queueScheduler = new QueueScheduler(QueueAction);\n\n/**\n * @deprecated Renamed to {@link queueScheduler}. Will be removed in v8.\n */\nexport const queue = queueScheduler;\n", "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * A simple Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.</span>\n *\n * ![](empty.png)\n *\n * A simple Observable that only emits the complete notification. It can be used\n * for composing with other Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n *\n * Log complete notification\n *\n * ```ts\n * import { EMPTY } from 'rxjs';\n *\n * EMPTY.subscribe({\n *   next: () => console.log('Next'),\n *   complete: () => console.log('Complete!')\n * });\n *\n * // Outputs\n * // Complete!\n * ```\n *\n * Emit the number 7, then complete\n *\n * ```ts\n * import { EMPTY, startWith } from 'rxjs';\n *\n * const result = EMPTY.pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n *\n * // Outputs\n * // 7\n * ```\n *\n * Map and flatten only odd numbers to the sequence `'a'`, `'b'`, `'c'`\n *\n * ```ts\n * import { interval, mergeMap, of, EMPTY } from 'rxjs';\n *\n * const interval$ = interval(1000);\n * const result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : EMPTY),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval, e.g. (0, 1, 2, 3, ...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1, print a, b, c (each on its own)\n * // if x % 2 is not equal to 1, nothing will be output\n * ```\n *\n * @see {@link Observable}\n * @see {@link NEVER}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport const EMPTY = new Observable<never>((subscriber) => subscriber.complete());\n\n/**\n * @param scheduler A {@link SchedulerLike} to use for scheduling\n * the emission of the complete notification.\n * @deprecated Replaced with the {@link EMPTY} constant or {@link scheduled} (e.g. `scheduled([], scheduler)`). Will be removed in v8.\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nfunction emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n", "import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && isFunction(value.schedule);\n}\n", "import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\n\nfunction last<T>(arr: T[]): T | undefined {\n  return arr[arr.length - 1];\n}\n\nexport function popResultSelector(args: any[]): ((...args: unknown[]) => unknown) | undefined {\n  return isFunction(last(args)) ? args.pop() : undefined;\n}\n\nexport function popScheduler(args: any[]): SchedulerLike | undefined {\n  return isScheduler(last(args)) ? args.pop() : undefined;\n}\n\nexport function popNumber(args: any[], defaultValue: number): number {\n  return typeof last(args) === 'number' ? args.pop()! : defaultValue;\n}\n", "export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number' && typeof x !== 'function');", "import { isFunction } from \"./isFunction\";\n\n/**\n * Tests to see if the object is \"thennable\".\n * @param value the object to test\n */\nexport function isPromise(value: any): value is PromiseLike<any> {\n  return isFunction(value?.then);\n}\n", "import { InteropObservable } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input: any): input is InteropObservable<any> {\n  return isFunction(input[Symbol_observable]);\n}\n", "import { isFunction } from './isFunction';\n\nexport function isAsyncIterable<T>(obj: any): obj is AsyncIterable<T> {\n  return Symbol.asyncIterator && isFunction(obj?.[Symbol.asyncIterator]);\n}\n", "/**\n * Creates the TypeError to throw if an invalid object is passed to `from` or `scheduled`.\n * @param input The object that was passed.\n */\nexport function createInvalidObservableTypeError(input: any) {\n  // TODO: We should create error codes that can be looked up, so this can be less verbose.\n  return new TypeError(\n    `You provided ${\n      input !== null && typeof input === 'object' ? 'an invalid object' : `'${input}'`\n    } where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`\n  );\n}\n", "export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n", "import { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return isFunction(input?.[Symbol_iterator]);\n}\n", "import { ReadableStreamLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport async function* readableStreamLikeToAsyncGenerator<T>(readableStream: ReadableStreamLike<T>): AsyncGenerator<T> {\n  const reader = readableStream.getReader();\n  try {\n    while (true) {\n      const { value, done } = await reader.read();\n      if (done) {\n        return;\n      }\n      yield value!;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function isReadableStreamLike<T>(obj: any): obj is ReadableStreamLike<T> {\n  // We don't want to use instanceof checks because they would return\n  // false for instances from another Realm, like an <iframe>.\n  return isFunction(obj?.getReader);\n}\n", "import { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { Observable } from '../Observable';\nimport { ObservableInput, ObservedValueOf, ReadableStreamLike } from '../types';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isIterable } from '../util/isIterable';\nimport { isReadableStreamLike, readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nimport { Subscriber } from '../Subscriber';\nimport { isFunction } from '../util/isFunction';\nimport { reportUnhandledError } from '../util/reportUnhandledError';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function innerFrom<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;\nexport function innerFrom<T>(input: ObservableInput<T>): Observable<T> {\n  if (input instanceof Observable) {\n    return input;\n  }\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromInteropObservable(input);\n    }\n    if (isArrayLike(input)) {\n      return fromArrayLike(input);\n    }\n    if (isPromise(input)) {\n      return fromPromise(input);\n    }\n    if (isAsyncIterable(input)) {\n      return fromAsyncIterable(input);\n    }\n    if (isIterable(input)) {\n      return fromIterable(input);\n    }\n    if (isReadableStreamLike(input)) {\n      return fromReadableStreamLike(input);\n    }\n  }\n\n  throw createInvalidObservableTypeError(input);\n}\n\n/**\n * Creates an RxJS Observable from an object that implements `Symbol.observable`.\n * @param obj An object that properly implements `Symbol.observable`.\n */\nexport function fromInteropObservable<T>(obj: any) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    const obs = obj[Symbol_observable]();\n    if (isFunction(obs.subscribe)) {\n      return obs.subscribe(subscriber);\n    }\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  });\n}\n\n/**\n * Synchronously emits the values of an array like and completes.\n * This is exported because there are creation functions and operators that need to\n * make direct use of the same logic, and there's no reason to make them run through\n * `from` conditionals because we *know* they're dealing with an array.\n * @param array The array to emit values from\n */\nexport function fromArrayLike<T>(array: ArrayLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    // Loop over the array and emit each value. Note two things here:\n    // 1. We're making sure that the subscriber is not closed on each loop.\n    //    This is so we don't continue looping over a very large array after\n    //    something like a `take`, `takeWhile`, or other synchronous unsubscription\n    //    has already unsubscribed.\n    // 2. In this form, reentrant code can alter that array we're looping over.\n    //    This is a known issue, but considered an edge case. The alternative would\n    //    be to copy the array before executing the loop, but this has\n    //    performance implications.\n    for (let i = 0; i < array.length && !subscriber.closed; i++) {\n      subscriber.next(array[i]);\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromPromise<T>(promise: PromiseLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    promise\n      .then(\n        (value) => {\n          if (!subscriber.closed) {\n            subscriber.next(value);\n            subscriber.complete();\n          }\n        },\n        (err: any) => subscriber.error(err)\n      )\n      .then(null, reportUnhandledError);\n  });\n}\n\nexport function fromIterable<T>(iterable: Iterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    for (const value of iterable) {\n      subscriber.next(value);\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromAsyncIterable<T>(asyncIterable: AsyncIterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    process(asyncIterable, subscriber).catch((err) => subscriber.error(err));\n  });\n}\n\nexport function fromReadableStreamLike<T>(readableStream: ReadableStreamLike<T>) {\n  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));\n}\n\nasync function process<T>(asyncIterable: AsyncIterable<T>, subscriber: Subscriber<T>) {\n  for await (const value of asyncIterable) {\n    subscriber.next(value);\n    // A side-effect may have closed our subscriber,\n    // check before the next iteration.\n    if (subscriber.closed) {\n      return;\n    }\n  }\n  subscriber.complete();\n}\n", "import { Subscription } from '../Subscription';\nimport { SchedulerAction, SchedulerLike } from '../types';\n\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay: number,\n  repeat: true\n): void;\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay?: number,\n  repeat?: false\n): Subscription;\n\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay = 0,\n  repeat = false\n): Subscription | void {\n  const scheduleSubscription = scheduler.schedule(function (this: SchedulerAction<any>) {\n    work();\n    if (repeat) {\n      parentSubscription.add(this.schedule(null, delay));\n    } else {\n      this.unsubscribe();\n    }\n  }, delay);\n\n  parentSubscription.add(scheduleSubscription);\n\n  if (!repeat) {\n    // Because user-land scheduler implementations are unlikely to properly reuse\n    // Actions for repeat scheduling, we can't trust that the returned subscription\n    // will control repeat subscription scenarios. So we're trying to avoid using them\n    // incorrectly within this library.\n    return scheduleSubscription;\n  }\n}\n", "/** @prettier */\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n *\n * Ensure values in subscribe are called just before browser repaint\n *\n * ```ts\n * import { interval, observeOn, animationFrameScheduler } from 'rxjs';\n *\n * const someDiv = document.createElement('div');\n * someDiv.style.cssText = 'width: 200px;background: #09c';\n * document.body.appendChild(someDiv);\n * const intervals = interval(10);      // Intervals are scheduled\n *                                      // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler) // ...but we will observe on animationFrame\n * )                                    // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param delay Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return A function that returns an Observable that emits the same\n * notifications as the source Observable, but with provided scheduler.\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay = 0): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay),\n        () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay),\n        (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)\n      )\n    );\n  });\n}\n", "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified {@link SchedulerLike}.\n *\n * With `subscribeOn` you can decide what type of scheduler a specific Observable will be using when it is subscribed to.\n *\n * Schedulers control the speed and order of emissions to observers from an Observable stream.\n *\n * ![](subscribeOn.png)\n *\n * ## Example\n *\n * Given the following code:\n *\n * ```ts\n * import { of, merge } from 'rxjs';\n *\n * const a = of(1, 2, 3);\n * const b = of(4, 5, 6);\n *\n * merge(a, b).subscribe(console.log);\n *\n * // Outputs\n * // 1\n * // 2\n * // 3\n * // 4\n * // 5\n * // 6\n * ```\n *\n * Both Observable `a` and `b` will emit their values directly and synchronously once they are subscribed to.\n *\n * If we instead use the `subscribeOn` operator declaring that we want to use the {@link asyncScheduler} for values emitted by Observable `a`:\n *\n * ```ts\n * import { of, subscribeOn, asyncScheduler, merge } from 'rxjs';\n *\n * const a = of(1, 2, 3).pipe(subscribeOn(asyncScheduler));\n * const b = of(4, 5, 6);\n *\n * merge(a, b).subscribe(console.log);\n *\n * // Outputs\n * // 4\n * // 5\n * // 6\n * // 1\n * // 2\n * // 3\n * ```\n *\n * The reason for this is that Observable `b` emits its values directly and synchronously like before\n * but the emissions from `a` are scheduled on the event loop because we are now using the {@link asyncScheduler} for that specific Observable.\n *\n * @param scheduler The {@link SchedulerLike} to perform subscription actions on.\n * @param delay A delay to pass to the scheduler to delay subscriptions\n * @return A function that returns an Observable modified so that its\n * subscriptions happen on the specified {@link SchedulerLike}.\n */\nexport function subscribeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));\n  });\n}\n", "import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { InteropObservable, SchedulerLike } from '../types';\n\nexport function scheduleObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike) {\n  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n", "import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { SchedulerLike } from '../types';\n\nexport function schedulePromise<T>(input: PromiseLike<T>, scheduler: SchedulerLike) {\n  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n", "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\nexport function scheduleArray<T>(input: ArrayLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    // The current array index.\n    let i = 0;\n    // Start iterating over the array like on a schedule.\n    return scheduler.schedule(function () {\n      if (i === input.length) {\n        // If we have hit the end of the array like in the\n        // previous job, we can complete.\n        subscriber.complete();\n      } else {\n        // Otherwise let's next the value at the current index,\n        // then increment our index.\n        subscriber.next(input[i++]);\n        // If the last emission didn't cause us to close the subscriber\n        // (via take or some side effect), reschedule the job and we'll\n        // make another pass.\n        if (!subscriber.closed) {\n          this.schedule();\n        }\n      }\n    });\n  });\n}\n", "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\n\n/**\n * Used in {@link scheduled} to create an observable from an Iterable.\n * @param input The iterable to create an observable from\n * @param scheduler The scheduler to use\n */\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    let iterator: Iterator<T, T>;\n\n    // Schedule the initial creation of the iterator from\n    // the iterable. This is so the code in the iterable is\n    // not called until the scheduled job fires.\n    executeSchedule(subscriber, scheduler, () => {\n      // Create the iterator.\n      iterator = (input as any)[Symbol_iterator]();\n\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          let value: T;\n          let done: boolean | undefined;\n          try {\n            // Pull the value out of the iterator\n            ({ value, done } = iterator.next());\n          } catch (err) {\n            // We got an error while pulling from the iterator\n            subscriber.error(err);\n            return;\n          }\n\n          if (done) {\n            // If it is \"done\" we just complete. This mimics the\n            // behavior of JavaScript's `for..of` consumption of\n            // iterables, which will not emit the value from an iterator\n            // result of `{ done: true: value: 'here' }`.\n            subscriber.complete();\n          } else {\n            // The iterable is not done, emit the value.\n            subscriber.next(value);\n          }\n        },\n        0,\n        true\n      );\n    });\n\n    // During finalization, if we see this iterator has a `return` method,\n    // then we know it is a Generator, and not just an Iterator. So we call\n    // the `return()` function. This will ensure that any `finally { }` blocks\n    // inside of the generator we can hit will be hit properly.\n    return () => isFunction(iterator?.return) && iterator.return();\n  });\n}\n", "import { SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\n\nexport function scheduleAsyncIterable<T>(input: AsyncIterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable<T>((subscriber) => {\n    executeSchedule(subscriber, scheduler, () => {\n      const iterator = input[Symbol.asyncIterator]();\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          iterator.next().then((result) => {\n            if (result.done) {\n              // This will remove the subscriptions from\n              // the parent subscription.\n              subscriber.complete();\n            } else {\n              subscriber.next(result.value);\n            }\n          });\n        },\n        0,\n        true\n      );\n    });\n  });\n}\n", "import { SchedulerLike, ReadableStreamLike } from '../types';\nimport { Observable } from '../Observable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\n\nexport function scheduleReadableStreamLike<T>(input: ReadableStreamLike<T>, scheduler: SchedulerLike): Observable<T> {\n  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n", "import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\n\n/**\n * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\n * are scheduled on the provided scheduler.\n *\n * @see {@link from}\n * @see {@link of}\n *\n * @param input The observable, array, promise, iterable, etc you would like to schedule\n * @param scheduler The scheduler to use to schedule the subscription and emissions from\n * the returned observable.\n */\nexport function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    }\n    if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }\n    if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    }\n    if (isAsyncIterable(input)) {\n      return scheduleAsyncIterable(input, scheduler);\n    }\n    if (isIterable(input)) {\n      return scheduleIterable(input, scheduler);\n    }\n    if (isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n  throw createInvalidObservableTypeError(input);\n}\n", "import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike, ObservedValueOf } from '../types';\nimport { scheduled } from '../scheduled/scheduled';\nimport { innerFrom } from './innerFrom';\n\nexport function from<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function from<O extends ObservableInput<any>>(input: O, scheduler: SchedulerLike | undefined): Observable<ObservedValueOf<O>>;\n\n/**\n * Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\n *\n * <span class=\"informal\">Converts almost anything to an Observable.</span>\n *\n * ![](from.png)\n *\n * `from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\n * <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\n * object into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\n * as an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\n * converted through this operator.\n *\n * ## Examples\n *\n * Converts an array to an Observable\n *\n * ```ts\n * import { from } from 'rxjs';\n *\n * const array = [10, 20, 30];\n * const result = from(array);\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 10\n * // 20\n * // 30\n * ```\n *\n * Convert an infinite iterable (from a generator) to an Observable\n *\n * ```ts\n * import { from, take } from 'rxjs';\n *\n * function* generateDoubles(seed) {\n *    let i = seed;\n *    while (true) {\n *      yield i;\n *      i = 2 * i; // double it\n *    }\n * }\n *\n * const iterator = generateDoubles(3);\n * const result = from(iterator).pipe(take(10));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 3\n * // 6\n * // 12\n * // 24\n * // 48\n * // 96\n * // 192\n * // 384\n * // 768\n * // 1536\n * ```\n *\n * With `asyncScheduler`\n *\n * ```ts\n * import { from, asyncScheduler } from 'rxjs';\n *\n * console.log('start');\n *\n * const array = [10, 20, 30];\n * const result = from(array, asyncScheduler);\n *\n * result.subscribe(x => console.log(x));\n *\n * console.log('end');\n *\n * // Logs:\n * // 'start'\n * // 'end'\n * // 10\n * // 20\n * // 30\n * ```\n *\n * @see {@link fromEvent}\n * @see {@link fromEventPattern}\n *\n * @param {ObservableInput<T>} A subscription object, a Promise, an Observable-like,\n * an Array, an iterable, or an array-like object to be converted.\n * @param {SchedulerLike} An optional {@link SchedulerLike} on which to schedule the emission of values.\n * @return {Observable<T>}\n */\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\n  return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n", "import { SchedulerLike, ValueFromArray } from '../types';\nimport { Observable } from '../Observable';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\n\n// Devs are more likely to pass null or undefined than they are a scheduler\n// without accompanying values. To make things easier for (naughty) devs who\n// use the `strictNullChecks: false` TypeScript compiler option, these\n// overloads with explicit null and undefined values are included.\n\nexport function of(value: null): Observable<null>;\nexport function of(value: undefined): Observable<undefined>;\n\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of(scheduler: SchedulerLike): Observable<never>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of<A extends readonly unknown[]>(...valuesAndScheduler: [...A, SchedulerLike]): Observable<ValueFromArray<A>>;\n\nexport function of(): Observable<never>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function of<T>(): Observable<T>;\nexport function of<T>(value: T): Observable<T>;\nexport function of<A extends readonly unknown[]>(...values: A): Observable<ValueFromArray<A>>;\n\n/**\n * Converts the arguments to an observable sequence.\n *\n * <span class=\"informal\">Each argument becomes a `next` notification.</span>\n *\n * ![](of.png)\n *\n * Unlike {@link from}, it does not do any flattening and emits each argument in whole\n * as a separate `next` notification.\n *\n * ## Examples\n *\n * Emit the values `10, 20, 30`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of(10, 20, 30)\n *   .subscribe({\n *     next: value => console.log('next:', value),\n *     error: err => console.log('error:', err),\n *     complete: () => console.log('the end'),\n *   });\n *\n * // Outputs\n * // next: 10\n * // next: 20\n * // next: 30\n * // the end\n * ```\n *\n * Emit the array `[1, 2, 3]`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of([1, 2, 3])\n *   .subscribe({\n *     next: value => console.log('next:', value),\n *     error: err => console.log('error:', err),\n *     complete: () => console.log('the end'),\n *   });\n *\n * // Outputs\n * // next: [1, 2, 3]\n * // the end\n * ```\n *\n * @see {@link from}\n * @see {@link range}\n *\n * @param {...T} values A comma separated list of arguments you want to be emitted\n * @return {Observable} An Observable that emits the arguments\n * described above and then completes.\n */\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  const scheduler = popScheduler(args);\n  return from(args as T[], scheduler);\n}\n", "import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\nexport function map<T, R>(project: (value: T, index: number) => R): OperatorFunction<T, R>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function map<T, R, A>(project: (this: A, value: T, index: number) => R, thisArg: A): OperatorFunction<T, R>;\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n *\n * Map every click to the `clientX` position of that click\n *\n * ```ts\n * import { fromEvent, map } from 'rxjs';\n *\n * const clicks = fromEvent<PointerEvent>(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n *\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return A function that returns an Observable that emits the values from the\n * source Observable transformed by the given `project` function.\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return operate((source, subscriber) => {\n    // The index of the value from the source. Used with projection.\n    let index = 0;\n    // Subscribe to the source, all errors and completions are sent along\n    // to the consumer.\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value: T) => {\n        // Call the projection function with the appropriate this context,\n        // and send the resulting value to the consumer.\n        subscriber.next(project.call(thisArg, value, index++));\n      })\n    );\n  });\n}\n", "import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subscriber } from '../Subscriber';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * A process embodying the general \"merge\" strategy. This is used in\n * `mergeMap` and `mergeScan` because the logic is otherwise nearly identical.\n * @param source The original source observable\n * @param subscriber The consumer subscriber\n * @param project The projection function to get our inner sources\n * @param concurrent The number of concurrent inner subscriptions\n * @param onBeforeNext Additional logic to apply before nexting to our consumer\n * @param expand If `true` this will perform an \"expand\" strategy, which differs only\n * in that it recurses, and the inner subscription must be schedule-able.\n * @param innerSubScheduler A scheduler to use to schedule inner subscriptions,\n * this is to support the expand strategy, mostly, and should be deprecated\n */\nexport function mergeInternals<T, R>(\n  source: Observable<T>,\n  subscriber: Subscriber<R>,\n  project: (value: T, index: number) => ObservableInput<R>,\n  concurrent: number,\n  onBeforeNext?: (innerValue: R) => void,\n  expand?: boolean,\n  innerSubScheduler?: SchedulerLike,\n  additionalFinalizer?: () => void\n) {\n  // Buffered values, in the event of going over our concurrency limit\n  const buffer: T[] = [];\n  // The number of active inner subscriptions.\n  let active = 0;\n  // An index to pass to our accumulator function\n  let index = 0;\n  // Whether or not the outer source has completed.\n  let isComplete = false;\n\n  /**\n   * Checks to see if we can complete our result or not.\n   */\n  const checkComplete = () => {\n    // If the outer has completed, and nothing is left in the buffer,\n    // and we don't have any active inner subscriptions, then we can\n    // Emit the state and complete.\n    if (isComplete && !buffer.length && !active) {\n      subscriber.complete();\n    }\n  };\n\n  // If we're under our concurrency limit, just start the inner subscription, otherwise buffer and wait.\n  const outerNext = (value: T) => (active < concurrent ? doInnerSub(value) : buffer.push(value));\n\n  const doInnerSub = (value: T) => {\n    // If we're expanding, we need to emit the outer values and the inner values\n    // as the inners will \"become outers\" in a way as they are recursively fed\n    // back to the projection mechanism.\n    expand && subscriber.next(value as any);\n\n    // Increment the number of active subscriptions so we can track it\n    // against our concurrency limit later.\n    active++;\n\n    // A flag used to show that the inner observable completed.\n    // This is checked during finalization to see if we should\n    // move to the next item in the buffer, if there is on.\n    let innerComplete = false;\n\n    // Start our inner subscription.\n    innerFrom(project(value, index++)).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (innerValue) => {\n          // `mergeScan` has additional handling here. For example\n          // taking the inner value and updating state.\n          onBeforeNext?.(innerValue);\n\n          if (expand) {\n            // If we're expanding, then just recurse back to our outer\n            // handler. It will emit the value first thing.\n            outerNext(innerValue as any);\n          } else {\n            // Otherwise, emit the inner value.\n            subscriber.next(innerValue);\n          }\n        },\n        () => {\n          // Flag that we have completed, so we know to check the buffer\n          // during finalization.\n          innerComplete = true;\n        },\n        // Errors are passed to the destination.\n        undefined,\n        () => {\n          // During finalization, if the inner completed (it wasn't errored or\n          // cancelled), then we want to try the next item in the buffer if\n          // there is one.\n          if (innerComplete) {\n            // We have to wrap this in a try/catch because it happens during\n            // finalization, possibly asynchronously, and we want to pass\n            // any errors that happen (like in a projection function) to\n            // the outer Subscriber.\n            try {\n              // INNER SOURCE COMPLETE\n              // Decrement the active count to ensure that the next time\n              // we try to call `doInnerSub`, the number is accurate.\n              active--;\n              // If we have more values in the buffer, try to process those\n              // Note that this call will increment `active` ahead of the\n              // next conditional, if there were any more inner subscriptions\n              // to start.\n              while (buffer.length && active < concurrent) {\n                const bufferedValue = buffer.shift()!;\n                // Particularly for `expand`, we need to check to see if a scheduler was provided\n                // for when we want to start our inner subscription. Otherwise, we just start\n                // are next inner subscription.\n                if (innerSubScheduler) {\n                  executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));\n                } else {\n                  doInnerSub(bufferedValue);\n                }\n              }\n              // Check to see if we can complete, and complete if so.\n              checkComplete();\n            } catch (err) {\n              subscriber.error(err);\n            }\n          }\n        }\n      )\n    );\n  };\n\n  // Subscribe to our source observable.\n  source.subscribe(\n    createOperatorSubscriber(subscriber, outerNext, () => {\n      // Outer completed, make a note of it, and check to see if we can complete everything.\n      isComplete = true;\n      checkComplete();\n    })\n  );\n\n  // Additional finalization (for when the destination is torn down).\n  // Other finalization is added implicitly via subscription above.\n  return () => {\n    additionalFinalizer?.();\n  };\n}\n", "import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\n  concurrent?: number\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n *\n * Map and flatten each letter to an Observable ticking every 1 second\n *\n * ```ts\n * import { of, mergeMap, interval, map } from 'rxjs';\n *\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x + i)))\n * );\n *\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a, b, c every second with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and merging\n * the results of the Observables obtained from this transformation.\n */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Infinity\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  if (isFunction(resultSelector)) {\n    // DEPRECATED PATH\n    return mergeMap((a, i) => map((b: any, ii: number) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n", "import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * ![](mergeAll.png)\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n *\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\n *\n * ```ts\n * import { fromEvent, map, interval, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(map(() => interval(1000)));\n * const firstOrder = higherOrder.pipe(mergeAll());\n *\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\n *\n * ```ts\n * import { fromEvent, map, interval, take, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(() => interval(1000).pipe(take(10)))\n * );\n * const firstOrder = higherOrder.pipe(mergeAll(2));\n *\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concatAll}\n * @see {@link exhaustAll}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Infinity] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits values coming from\n * all the inner Observables emitted by the source Observable.\n */\nexport function mergeAll<O extends ObservableInput<any>>(concurrent: number = Infinity): OperatorFunction<O, ObservedValueOf<O>> {\n  return mergeMap(identity, concurrent);\n}\n", "import { Observable } from '../Observable';\nimport { ObservableInput, ObservableInputTuple, SchedulerLike } from '../types';\nimport { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\n\nexport function merge<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A[number]>;\nexport function merge<A extends readonly unknown[]>(...sourcesAndConcurrency: [...ObservableInputTuple<A>, number?]): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike?]\n): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndConcurrencyAndScheduler: [...ObservableInputTuple<A>, number?, SchedulerLike?]\n): Observable<A[number]>;\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * ![](merge.png)\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n *\n * Merge together two Observables: 1s interval and clicks\n *\n * ```ts\n * import { merge, fromEvent, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const clicksOrTimer = merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console every time the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n * ```\n *\n * Merge together 3 Observables, but run only 2 concurrently\n *\n * ```ts\n * import { interval, take, merge } from 'rxjs';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n *\n * const concurrent = 2; // the argument\n * const merged = merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits its max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits its max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n * ```\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n */\nexport function merge(...args: (ObservableInput<unknown> | number | SchedulerLike)[]): Observable<unknown> {\n  const scheduler = popScheduler(args);\n  const concurrent = popNumber(args, Infinity);\n  const sources = args as ObservableInput<unknown>[];\n  return !sources.length\n    ? // No source provided\n      EMPTY\n    : sources.length === 1\n    ? // One source? Just return it.\n      innerFrom(sources[0])\n    : // Merge all sources\n      mergeAll(concurrent)(from(sources, scheduler));\n}\n", "import { OperatorFunction, MonoTypeOperatorFunction, TruthyTypesOf } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, S extends T, A>(predicate: (this: A, value: T, index: number) => value is S, thisArg: A): OperatorFunction<T, S>;\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\nexport function filter<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, A>(predicate: (this: A, value: T, index: number) => boolean, thisArg: A): MonoTypeOperatorFunction<T>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * ![](filter.png)\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * ## Example\n *\n * Emit only click events whose target was a DIV element\n *\n * ```ts\n * import { fromEvent, filter } from 'rxjs';\n *\n * const div = document.createElement('div');\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\n * document.body.appendChild(div);\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksOnDivs = clicks.pipe(filter(ev => (<HTMLElement>ev.target).tagName === 'DIV'));\n * clicksOnDivs.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param thisArg An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return A function that returns an Observable that emits items from the\n * source Observable that satisfy the specified `predicate`.\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean, thisArg?: any): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    // An index passed to our predicate function on each call.\n    let index = 0;\n\n    // Subscribe to the source, all errors and completions are\n    // forwarded to the consumer.\n    source.subscribe(\n      // Call the predicate with the appropriate `this` context,\n      // if the predicate returns `true`, then send the value\n      // to the consumer.\n      createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value))\n    );\n  });\n}\n", "import { Observable } from '../Observable';\n\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { Subscription } from '../Subscription';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { operate } from '../util/lift';\n\n/* tslint:disable:max-line-length */\nexport function catchError<T, O extends ObservableInput<any>>(\n  selector: (err: any, caught: Observable<T>) => O\n): OperatorFunction<T, T | ObservedValueOf<O>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <span class=\"informal\">\n * It only listens to the error channel and ignores notifications.\n * Handles errors from the source observable, and maps them to a new observable.\n * The error may also be rethrown, or a new error can be thrown to emit an error from the result.\n * </span>\n *\n * ![](catch.png)\n *\n * This operator handles errors, but forwards along all other events to the resulting observable.\n * If the source observable terminates with an error, it will map that error to a new observable,\n * subscribe to it, and forward all of its events to the resulting observable.\n *\n * ## Examples\n *\n * Continue with a different Observable when there's an error\n *\n * ```ts\n * import { of, map, catchError } from 'rxjs';\n *\n * of(1, 2, 3, 4, 5)\n *   .pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError(err => of('I', 'II', 'III', 'IV', 'V'))\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n * ```\n *\n * Retry the caught source Observable again in case of error, similar to `retry()` operator\n *\n * ```ts\n * import { of, map, catchError, take } from 'rxjs';\n *\n * of(1, 2, 3, 4, 5)\n *   .pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError((err, caught) => caught),\n *     take(30)\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n * ```\n *\n * Throw a new error when the source Observable throws an error\n *\n * ```ts\n * import { of, map, catchError } from 'rxjs';\n *\n * of(1, 2, 3, 4, 5)\n *   .pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError(err => {\n *       throw 'error in source. Details: ' + err;\n *     })\n *   )\n *   .subscribe({\n *     next: x => console.log(x),\n *     error: err => console.log(err)\n *   });\n *   // 1, 2, 3, error in source. Details: four!\n * ```\n *\n * @see {@link onErrorResumeNext}\n * @see {@link repeat}\n * @see {@link repeatWhen}\n * @see {@link retry }\n * @see {@link retryWhen}\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n * is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n * is returned by the `selector` will be used to continue the observable chain.\n * @return A function that returns an Observable that originates from either\n * the source or the Observable returned by the `selector` function.\n */\nexport function catchError<T, O extends ObservableInput<any>>(\n  selector: (err: any, caught: Observable<T>) => O\n): OperatorFunction<T, T | ObservedValueOf<O>> {\n  return operate((source, subscriber) => {\n    let innerSub: Subscription | null = null;\n    let syncUnsub = false;\n    let handledResult: Observable<ObservedValueOf<O>>;\n\n    innerSub = source.subscribe(\n      createOperatorSubscriber(subscriber, undefined, undefined, (err) => {\n        handledResult = innerFrom(selector(err, catchError(selector)(source)));\n        if (innerSub) {\n          innerSub.unsubscribe();\n          innerSub = null;\n          handledResult.subscribe(subscriber);\n        } else {\n          // We don't have an innerSub yet, that means the error was synchronous\n          // because the subscribe call hasn't returned yet.\n          syncUnsub = true;\n        }\n      })\n    );\n\n    if (syncUnsub) {\n      // We have a synchronous error, we need to make sure to\n      // finalize right away. This ensures that callbacks in the `finalize` operator are called\n      // at the right time, and that finalization occurs at the expected\n      // time between the source error and the subscription to the\n      // next observable.\n      innerSub.unsubscribe();\n      innerSub = null;\n      handledResult!.subscribe(subscriber);\n    }\n  });\n}\n", "import { Observable, Subject } from 'rxjs';\n\nexport class StateObservable<S> extends Observable<S> {\n  value: S;\n  private __notifier = new Subject<S>();\n\n  constructor(input$: Observable<S>, initialState: S) {\n    super((subscriber) => {\n      const subscription = this.__notifier.subscribe(subscriber);\n      if (subscription && !subscription.closed) {\n        subscriber.next(this.value);\n      }\n      return subscription;\n    });\n\n    this.value = initialState;\n    input$.subscribe((value) => {\n      // We only want to update state$ if it has actually changed since\n      // redux requires reducers use immutability patterns.\n      // This is basically what distinctUntilChanged() does but it's so simple\n      // we don't need to pull that code in\n      if (value !== this.value) {\n        this.value = value;\n        this.__notifier.next(value);\n      }\n    });\n  }\n}\n", "import { merge } from 'rxjs';\nimport type { Epic } from './epic';\n\n/**\n  Merges all epics into a single one.\n */\nexport function combineEpics<\n  Input = unknown,\n  Output extends Input = Input,\n  State = void,\n  Dependencies = any\n>(\n  ...epics: Epic<Input, Output, State, Dependencies>[]\n): Epic<Input, Output, State, Dependencies> {\n  const merger: Epic<Input, Output, State, Dependencies> = (...args) =>\n    merge(\n      ...epics.map((epic) => {\n        const output$ = epic(...args);\n        if (!output$) {\n          throw new TypeError(\n            `combineEpics: one of the provided Epics \"${\n              epic.name || '<anonymous>'\n            }\" does not return a stream. Double check you're not missing a return statement!`\n          );\n        }\n        return output$;\n      })\n    );\n\n  // Technically the `name` property on Function's are supposed to be read-only.\n  // While some JS runtimes allow it anyway (so this is useful in debugging)\n  // some actually throw an exception when you attempt to do so.\n  try {\n    Object.defineProperty(merger, 'name', {\n      value: `combineEpics(${epics\n        .map((epic) => epic.name || '<anonymous>')\n        .join(', ')})`,\n    });\n  } catch (e) {\n    // noop\n  }\n\n  return merger;\n}\n", "import type { Dispatch, Middleware, MiddlewareAPI } from 'redux';\nimport { Subject, from, queueScheduler } from 'rxjs';\nimport { map, mergeMap, observeOn, subscribeOn } from 'rxjs/operators';\nimport { StateObservable } from './StateObservable';\nimport type { Epic } from './epic';\nimport { warn } from './utils/console';\n\ninterface Options<D = any> {\n  dependencies?: D;\n}\n\nexport interface EpicMiddleware<\n  Input = unknown,\n  Output extends Input = Input,\n  State = void,\n  Dependencies = any\n  // eslint-disable-next-line @typescript-eslint/ban-types\n> extends Middleware<{}, State> {\n  run(rootEpic: Epic<Input, Output, State, Dependencies>): void;\n}\n\nexport function createEpicMiddleware<\n  Input = unknown,\n  Output extends Input = Input,\n  State = void,\n  Dependencies = any\n>(\n  options: Options<Dependencies> = {}\n): EpicMiddleware<Input, Output, State, Dependencies> {\n  // This isn't great. RxJS doesn't publicly export the constructor for\n  // QueueScheduler nor QueueAction, so we reach in. We need to do this because\n  // we don't want our internal queuing mechanism to be on the same queue as any\n  // other RxJS code outside of redux-observable internals.\n  const QueueScheduler: any = queueScheduler.constructor;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\n  const uniqueQueueScheduler: typeof queueScheduler = new QueueScheduler(\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (queueScheduler as any).schedulerActionCtor\n  );\n\n  if (process.env.NODE_ENV !== 'production' && typeof options === 'function') {\n    throw new TypeError(\n      'Providing your root Epic to `createEpicMiddleware(rootEpic)` is no longer supported, instead use `epicMiddleware.run(rootEpic)`\\n\\nLearn more: https://redux-observable.js.org/MIGRATION.html#setting-up-the-middleware'\n    );\n  }\n\n  const epic$ = new Subject<Epic<Input, Output, State, Dependencies>>();\n  let store: MiddlewareAPI<Dispatch<any>, State>;\n\n  const epicMiddleware: EpicMiddleware<Input, Output, State, Dependencies> = (\n    _store\n  ) => {\n    if (process.env.NODE_ENV !== 'production' && store) {\n      // https://github.com/redux-observable/redux-observable/issues/389\n      warn(\n        'this middleware is already associated with a store. createEpicMiddleware should be called for every store.\\n\\nLearn more: https://goo.gl/2GQ7Da'\n      );\n    }\n    store = _store;\n    const actionSubject$ = new Subject<Input>();\n    const stateSubject$ = new Subject<State>();\n    const action$ = actionSubject$\n      .asObservable()\n      .pipe(observeOn(uniqueQueueScheduler));\n    const state$ = new StateObservable(\n      stateSubject$.pipe(observeOn(uniqueQueueScheduler)),\n      store.getState()\n    );\n\n    const result$ = epic$.pipe(\n      map((epic) => {\n        const output$ = epic(action$, state$, options.dependencies!);\n\n        if (!output$) {\n          throw new TypeError(\n            `Your root Epic \"${\n              epic.name || '<anonymous>'\n            }\" does not return a stream. Double check you're not missing a return statement!`\n          );\n        }\n\n        return output$;\n      }),\n      mergeMap((output$) =>\n        from(output$).pipe(\n          subscribeOn(uniqueQueueScheduler),\n          observeOn(uniqueQueueScheduler)\n        )\n      )\n    );\n\n    result$.subscribe(store.dispatch);\n\n    return (next) => {\n      return (action) => {\n        // Downstream middleware gets the action first,\n        // which includes their reducers, so state is\n        // updated before epics receive the action\n        const result = next(action);\n\n        // It's important to update the state$ before we emit\n        // the action because otherwise it would be stale\n        stateSubject$.next(store.getState());\n        actionSubject$.next(action as Input);\n\n        return result;\n      };\n    };\n  };\n\n  epicMiddleware.run = (rootEpic) => {\n    if (process.env.NODE_ENV !== 'production' && !store) {\n      warn(\n        'epicMiddleware.run(rootEpic) called before the middleware has been setup by redux. Provide the epicMiddleware instance to createStore() first.'\n      );\n    }\n    epic$.next(rootEpic);\n  };\n\n  return epicMiddleware;\n}\n", "let deprecationsSeen: { [key: string]: boolean } = {};\nexport const resetDeprecationsSeen = (): void => {\n  deprecationsSeen = {};\n};\n\nconst consoleWarn =\n  typeof console === 'object' && typeof console.warn === 'function'\n    ? console.warn.bind(console)\n    : () => {};\n\nexport const deprecate = (msg: string): void => {\n  if (!deprecationsSeen[msg]) {\n    deprecationsSeen[msg] = true;\n    consoleWarn(`redux-observable | DEPRECATION: ${msg}`);\n  }\n};\n\nexport const warn = (msg: string): void => {\n  consoleWarn(`redux-observable | WARNING: ${msg}`);\n};\n", "import { isAction, type Action } from 'redux';\nimport type { OperatorFunction } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { warn } from './utils/console';\n\n/**\n * Inferring the types of this is a bit challenging, and only works in newer\n * versions of TypeScript.\n *\n * @param ...types One or more Redux action types you want to filter for, variadic.\n */\nexport function ofType<\n  // All possible actions your app can dispatch\n  Input,\n  // The types you want to filter for\n  Type extends string,\n  // The resulting actions that match the above types\n  Output extends Input = Extract<Input, Action<Type>>\n>(...types: [Type, ...Type[]]): OperatorFunction<Input, Output> {\n  const len = types.length;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (len === 0) {\n      warn('ofType was called without any types!');\n    }\n    if (types.some((key) => key === null || key === undefined)) {\n      warn('ofType was called with one or more undefined or null values!');\n    }\n  }\n\n  return filter(\n    len === 1\n      ? (action): action is Output => isAction(action) && action.type === types[0]\n      : (action): action is Output => {\n        if (isAction(action)) {\n          for (let i = 0; i < len; i++) {\n            if (action.type === types[i]) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      }\n  );\n}\n", "import { Action } from \"@reduxjs/toolkit\";\nimport { map, filter, Observable } from \"rxjs\";\nimport { willGetUser } from \"../auth/authSlice\";\n\nexport const appDidStart_authWillGetUser_epic = (action$: Observable<Action>) =>\n  action$.pipe(\n    filter((action) => action?.type === \"app/didStart\"),\n    map(() => willGetUser()),\n  );\n", "/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n", "import { Client } from './client';\nimport type { Payload } from './client';\n\nexport class Service {\n    static CHUNK_SIZE = 5*1024*1024; // 5MB\n\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    static flatten(data: Payload, prefix = ''): Payload {\n        let output: Payload = {};\n\n        for (const [key, value] of Object.entries(data)) {\n            let finalKey = prefix ? prefix + '[' + key +']' : key;\n            if (Array.isArray(value)) {\n                output = { ...output, ...Service.flatten(value, finalKey) };\n            } else {\n                output[finalKey] = value;\n            }\n        }\n\n        return output;\n    }\n}", "type QueryTypesSingle = string | number | boolean;\nexport type QueryTypesList = string[] | number[] | boolean[] | Query[];\nexport type QueryTypes = QueryTypesSingle | QueryTypesList;\ntype AttributesTypes = string | string[];\n\nexport class Query {\n  method: string;\n  attribute: AttributesTypes | undefined;\n  values: QueryTypesList | undefined;\n\n  constructor(\n    method: string,\n    attribute?: AttributesTypes,\n    values?: QueryTypes\n  ) {\n    this.method = method;\n    this.attribute = attribute;\n\n    if (values !== undefined) {\n      if (Array.isArray(values)) {\n        this.values = values;\n      } else {\n        this.values = [values] as QueryTypesList;\n      }\n    }\n  }\n\n  toString(): string {\n    return JSON.stringify({\n      method: this.method,\n      attribute: this.attribute,\n      values: this.values,\n    });\n  }\n\n  static equal = (attribute: string, value: QueryTypes): string =>\n    new Query(\"equal\", attribute, value).toString();\n\n  static notEqual = (attribute: string, value: QueryTypes): string =>\n    new Query(\"notEqual\", attribute, value).toString();\n\n  static lessThan = (attribute: string, value: QueryTypes): string =>\n    new Query(\"lessThan\", attribute, value).toString();\n\n  static lessThanEqual = (attribute: string, value: QueryTypes): string =>\n    new Query(\"lessThanEqual\", attribute, value).toString();\n\n  static greaterThan = (attribute: string, value: QueryTypes): string =>\n    new Query(\"greaterThan\", attribute, value).toString();\n\n  static greaterThanEqual = (attribute: string, value: QueryTypes): string =>\n    new Query(\"greaterThanEqual\", attribute, value).toString();\n\n  static isNull = (attribute: string): string =>\n    new Query(\"isNull\", attribute).toString();\n\n  static isNotNull = (attribute: string): string =>\n    new Query(\"isNotNull\", attribute).toString();\n\n  static between = (attribute: string, start: string | number, end: string | number) =>\n    new Query(\"between\", attribute, [start, end] as QueryTypesList).toString();\n\n  static startsWith = (attribute: string, value: string): string =>\n    new Query(\"startsWith\", attribute, value).toString();\n\n  static endsWith = (attribute: string, value: string): string =>\n    new Query(\"endsWith\", attribute, value).toString();\n\n  static select = (attributes: string[]): string =>\n    new Query(\"select\", undefined, attributes).toString();\n\n  static search = (attribute: string, value: string): string =>\n    new Query(\"search\", attribute, value).toString();\n\n  static orderDesc = (attribute: string): string =>\n    new Query(\"orderDesc\", attribute).toString();\n\n  static orderAsc = (attribute: string): string =>\n    new Query(\"orderAsc\", attribute).toString();\n\n  static cursorAfter = (documentId: string): string =>\n    new Query(\"cursorAfter\", undefined, documentId).toString();\n\n  static cursorBefore = (documentId: string): string =>\n    new Query(\"cursorBefore\", undefined, documentId).toString();\n\n  static limit = (limit: number): string =>\n    new Query(\"limit\", undefined, limit).toString();\n\n  static offset = (offset: number): string =>\n    new Query(\"offset\", undefined, offset).toString();\n\n  static contains = (attribute: string, value: string | string[]): string =>\n    new Query(\"contains\", attribute, value).toString();\n\n  static or = (queries: string[]) =>\n    new Query(\"or\", undefined, queries.map((query) => JSON.parse(query))).toString();\n\n  static and = (queries: string[]) =>\n    new Query(\"and\", undefined, queries.map((query) => JSON.parse(query))).toString();\n}\n", "import { Models } from './models';\nimport { Service } from './service';\n\ntype Payload = {\n    [key: string]: any;\n}\n\ntype Headers = {\n    [key: string]: string;\n}\n\ntype RealtimeResponse = {\n    type: 'error' | 'event' | 'connected' | 'response';\n    data: RealtimeResponseAuthenticated | RealtimeResponseConnected | RealtimeResponseError | RealtimeResponseEvent<unknown>;\n}\n\ntype RealtimeRequest = {\n    type: 'authentication';\n    data: RealtimeRequestAuthenticate;\n}\n\nexport type RealtimeResponseEvent<T extends unknown> = {\n    events: string[];\n    channels: string[];\n    timestamp: number;\n    payload: T;\n}\n\ntype RealtimeResponseError = {\n    code: number;\n    message: string;\n}\n\ntype RealtimeResponseConnected = {\n    channels: string[];\n    user?: object;\n}\n\ntype RealtimeResponseAuthenticated = {\n    to: string;\n    success: boolean;\n    user: object;\n}\n\ntype RealtimeRequestAuthenticate = {\n    session: string;\n}\n\ntype Realtime = {\n    socket?: WebSocket;\n    timeout?: number;\n    url?: string;\n    lastMessage?: RealtimeResponse;\n    channels: Set<string>;\n    subscriptions: Map<number, {\n        channels: string[];\n        callback: (payload: RealtimeResponseEvent<any>) => void\n    }>;\n    subscriptionsCounter: number;\n    reconnect: boolean;\n    reconnectAttempts: number;\n    getTimeout: () => number;\n    connect: () => void;\n    createSocket: () => void;\n    cleanUp: (channels: string[]) => void;\n    onMessage: (event: MessageEvent) => void;\n}\n\nexport type UploadProgress = {\n    $id: string;\n    progress: number;\n    sizeUploaded: number;\n    chunksTotal: number;\n    chunksUploaded: number;\n}\n\nclass AppwriteException extends Error {\n    code: number;\n    response: string;\n    type: string;\n    constructor(message: string, code: number = 0, type: string = '', response: string = '') {\n        super(message);\n        this.name = 'AppwriteException';\n        this.message = message;\n        this.code = code;\n        this.type = type;\n        this.response = response;\n    }\n}\n\nclass Client {\n    config = {\n        endpoint: 'https://cloud.appwrite.io/v1',\n        endpointRealtime: '',\n        project: '',\n        jwt: '',\n        locale: '',\n        session: '',\n    };\n    headers: Headers = {\n        'x-sdk-name': 'Web',\n        'x-sdk-platform': 'client',\n        'x-sdk-language': 'web',\n        'x-sdk-version': '15.0.0',\n        'X-Appwrite-Response-Format': '1.5.0',\n    };\n\n    /**\n     * Set Endpoint\n     *\n     * Your project endpoint\n     *\n     * @param {string} endpoint\n     *\n     * @returns {this}\n     */\n    setEndpoint(endpoint: string): this {\n        this.config.endpoint = endpoint;\n        this.config.endpointRealtime = this.config.endpointRealtime || this.config.endpoint.replace('https://', 'wss://').replace('http://', 'ws://');\n\n        return this;\n    }\n\n    /**\n     * Set Realtime Endpoint\n     *\n     * @param {string} endpointRealtime\n     *\n     * @returns {this}\n     */\n    setEndpointRealtime(endpointRealtime: string): this {\n        this.config.endpointRealtime = endpointRealtime;\n\n        return this;\n    }\n\n    /**\n     * Set Project\n     *\n     * Your project ID\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setProject(value: string): this {\n        this.headers['X-Appwrite-Project'] = value;\n        this.config.project = value;\n        return this;\n    }\n\n    /**\n     * Set JWT\n     *\n     * Your secret JSON Web Token\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setJWT(value: string): this {\n        this.headers['X-Appwrite-JWT'] = value;\n        this.config.jwt = value;\n        return this;\n    }\n\n    /**\n     * Set Locale\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setLocale(value: string): this {\n        this.headers['X-Appwrite-Locale'] = value;\n        this.config.locale = value;\n        return this;\n    }\n\n    /**\n     * Set Session\n     *\n     * The user session to authenticate with\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setSession(value: string): this {\n        this.headers['X-Appwrite-Session'] = value;\n        this.config.session = value;\n        return this;\n    }\n\n\n    private realtime: Realtime = {\n        socket: undefined,\n        timeout: undefined,\n        url: '',\n        channels: new Set(),\n        subscriptions: new Map(),\n        subscriptionsCounter: 0,\n        reconnect: true,\n        reconnectAttempts: 0,\n        lastMessage: undefined,\n        connect: () => {\n            clearTimeout(this.realtime.timeout);\n            this.realtime.timeout = window?.setTimeout(() => {\n                this.realtime.createSocket();\n            }, 50);\n        },\n        getTimeout: () => {\n            switch (true) {\n                case this.realtime.reconnectAttempts < 5:\n                    return 1000;\n                case this.realtime.reconnectAttempts < 15:\n                    return 5000;\n                case this.realtime.reconnectAttempts < 100:\n                    return 10_000;\n                default:\n                    return 60_000;\n            }\n        },\n        createSocket: () => {\n            if (this.realtime.channels.size < 1) {\n                this.realtime.reconnect = false;\n                this.realtime.socket?.close();\n                return;\n            }\n\n            const channels = new URLSearchParams();\n            channels.set('project', this.config.project);\n            this.realtime.channels.forEach(channel => {\n                channels.append('channels[]', channel);\n            });\n\n            const url = this.config.endpointRealtime + '/realtime?' + channels.toString();\n\n            if (\n                url !== this.realtime.url || // Check if URL is present\n                !this.realtime.socket || // Check if WebSocket has not been created\n                this.realtime.socket?.readyState > WebSocket.OPEN // Check if WebSocket is CLOSING (3) or CLOSED (4)\n            ) {\n                if (\n                    this.realtime.socket &&\n                    this.realtime.socket?.readyState < WebSocket.CLOSING // Close WebSocket if it is CONNECTING (0) or OPEN (1)\n                ) {\n                    this.realtime.reconnect = false;\n                    this.realtime.socket.close();\n                }\n\n                this.realtime.url = url;\n                this.realtime.socket = new WebSocket(url);\n                this.realtime.socket.addEventListener('message', this.realtime.onMessage);\n                this.realtime.socket.addEventListener('open', _event => {\n                    this.realtime.reconnectAttempts = 0;\n                });\n                this.realtime.socket.addEventListener('close', event => {\n                    if (\n                        !this.realtime.reconnect ||\n                        (\n                            this.realtime?.lastMessage?.type === 'error' && // Check if last message was of type error\n                            (<RealtimeResponseError>this.realtime?.lastMessage.data).code === 1008 // Check for policy violation 1008\n                        )\n                    ) {\n                        this.realtime.reconnect = true;\n                        return;\n                    }\n\n                    const timeout = this.realtime.getTimeout();\n                    console.error(`Realtime got disconnected. Reconnect will be attempted in ${timeout / 1000} seconds.`, event.reason);\n\n                    setTimeout(() => {\n                        this.realtime.reconnectAttempts++;\n                        this.realtime.createSocket();\n                    }, timeout);\n                })\n            }\n        },\n        onMessage: (event) => {\n            try {\n                const message: RealtimeResponse = JSON.parse(event.data);\n                this.realtime.lastMessage = message;\n                switch (message.type) {\n                    case 'connected':\n                        const cookie = JSON.parse(window.localStorage.getItem('cookieFallback') ?? '{}');\n                        const session = cookie?.[`a_session_${this.config.project}`];\n                        const messageData = <RealtimeResponseConnected>message.data;\n\n                        if (session && !messageData.user) {\n                            this.realtime.socket?.send(JSON.stringify(<RealtimeRequest>{\n                                type: 'authentication',\n                                data: {\n                                    session\n                                }\n                            }));\n                        }\n                        break;\n                    case 'event':\n                        let data = <RealtimeResponseEvent<unknown>>message.data;\n                        if (data?.channels) {\n                            const isSubscribed = data.channels.some(channel => this.realtime.channels.has(channel));\n                            if (!isSubscribed) return;\n                            this.realtime.subscriptions.forEach(subscription => {\n                                if (data.channels.some(channel => subscription.channels.includes(channel))) {\n                                    setTimeout(() => subscription.callback(data));\n                                }\n                            })\n                        }\n                        break;\n                    case 'error':\n                        throw message.data;\n                    default:\n                        break;\n                }\n            } catch (e) {\n                console.error(e);\n            }\n        },\n        cleanUp: channels => {\n            this.realtime.channels.forEach(channel => {\n                if (channels.includes(channel)) {\n                    let found = Array.from(this.realtime.subscriptions).some(([_key, subscription] )=> {\n                        return subscription.channels.includes(channel);\n                    })\n\n                    if (!found) {\n                        this.realtime.channels.delete(channel);\n                    }\n                }\n            })\n        }\n    }\n\n    /**\n     * Subscribes to Appwrite events and passes you the payload in realtime.\n     * \n     * @param {string|string[]} channels \n     * Channel to subscribe - pass a single channel as a string or multiple with an array of strings.\n     * \n     * Possible channels are:\n     * - account\n     * - collections\n     * - collections.[ID]\n     * - collections.[ID].documents\n     * - documents\n     * - documents.[ID]\n     * - files\n     * - files.[ID]\n     * - executions\n     * - executions.[ID]\n     * - functions.[ID]\n     * - teams\n     * - teams.[ID]\n     * - memberships\n     * - memberships.[ID]\n     * @param {(payload: RealtimeMessage) => void} callback Is called on every realtime update.\n     * @returns {() => void} Unsubscribes from events.\n     */\n    subscribe<T extends unknown>(channels: string | string[], callback: (payload: RealtimeResponseEvent<T>) => void): () => void {\n        let channelArray = typeof channels === 'string' ? [channels] : channels;\n        channelArray.forEach(channel => this.realtime.channels.add(channel));\n\n        const counter = this.realtime.subscriptionsCounter++;\n        this.realtime.subscriptions.set(counter, {\n            channels: channelArray,\n            callback\n        });\n\n        this.realtime.connect();\n\n        return () => {\n            this.realtime.subscriptions.delete(counter);\n            this.realtime.cleanUp(channelArray);\n            this.realtime.connect();\n        }\n    }\n\n    async call(method: string, url: URL, headers: Headers = {}, params: Payload = {}): Promise<any> {\n        method = method.toUpperCase();\n\n\n        headers = Object.assign({}, this.headers, headers);\n\n        let options: RequestInit = {\n            method,\n            headers,\n            credentials: 'include'\n        };\n\n        if (typeof window !== 'undefined' && window.localStorage) {\n            const cookieFallback = window.localStorage.getItem('cookieFallback');\n            if (cookieFallback) {\n                headers['X-Fallback-Cookies'] = cookieFallback;\n            }\n        }\n\n        if (method === 'GET') {\n            for (const [key, value] of Object.entries(Service.flatten(params))) {\n                url.searchParams.append(key, value);\n            }\n        } else {\n            switch (headers['content-type']) {\n                case 'application/json':\n                    options.body = JSON.stringify(params);\n                    break;\n\n                case 'multipart/form-data':\n                    let formData = new FormData();\n\n                    for (const key in params) {\n                        if (Array.isArray(params[key])) {\n                            params[key].forEach((value: any) => {\n                                formData.append(key + '[]', value);\n                            })\n                        } else {\n                            formData.append(key, params[key]);\n                        }\n                    }\n\n                    options.body = formData;\n                    delete headers['content-type'];\n                    break;\n            }\n        }\n\n        try {\n            let data = null;\n            const response = await fetch(url.toString(), options);\n\n            if (response.headers.get('content-type')?.includes('application/json')) {\n                data = await response.json();\n            } else {\n                data = {\n                    message: await response.text()\n                };\n            }\n\n            if (400 <= response.status) {\n                throw new AppwriteException(data?.message, response.status, data?.type, data);\n            }\n\n            const cookieFallback = response.headers.get('X-Fallback-Cookies');\n\n            if (typeof window !== 'undefined' && window.localStorage && cookieFallback) {\n                window.console.warn('Appwrite is using localStorage for session management. Increase your security by adding a custom domain as your API endpoint.');\n                window.localStorage.setItem('cookieFallback', cookieFallback);\n            }\n\n            return data;\n        } catch (e) {\n            if (e instanceof AppwriteException) {\n                throw e;\n            }\n            throw new AppwriteException((<Error>e).message);\n        }\n    }\n}\n\nexport { Client, AppwriteException };\nexport { Query } from './query';\nexport type { Models, Payload };\nexport type { QueryTypes, QueryTypesList } from './query';\n", "import { Service } from '../service';\nimport { AppwriteException, Client } from '../client';\nimport type { Models } from '../models';\nimport type { UploadProgress, Payload } from '../client';\nimport { AuthenticatorType } from '../enums/authenticator-type';\nimport { AuthenticationFactor } from '../enums/authentication-factor';\nimport { OAuthProvider } from '../enums/o-auth-provider';\n\nexport class Account extends Service {\n\n     constructor(client: Client)\n     {\n        super(client);\n     }\n\n    /**\n     * Get account\n     *\n     * Get the currently logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async get<Preferences extends Models.Preferences>(): Promise<Models.User<Preferences>> {\n        const apiPath = '/account';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create account\n     *\n     * Use this endpoint to allow a new user to register a new account in your\n     * project. After the user registration completes successfully, you can use\n     * the\n     * [/account/verfication](https://appwrite.io/docs/references/cloud/client-web/account#createVerification)\n     * route to start verifying the user email address. To allow the new user to\n     * login to their new account, you need to create a new [account\n     * session](https://appwrite.io/docs/references/cloud/client-web/account#createEmailSession).\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async create<Preferences extends Models.Preferences>(userId: string, email: string, password: string, name?: string): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/account';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update email\n     *\n     * Update currently logged in user account email address. After changing user\n     * address, the user confirmation status will get reset. A new confirmation\n     * email is not sent automatically however you can use the send confirmation\n     * email endpoint again to send the confirmation email. For security measures,\n     * user password is required to complete this request.\n     * This endpoint can also be used to convert an anonymous account to a normal\n     * one, by passing an email address and a new password.\n     * \n     *\n     * @param {string} email\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateEmail<Preferences extends Models.Preferences>(email: string, password: string): Promise<Models.User<Preferences>> {\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/account/email';\n        const payload: Payload = {};\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List Identities\n     *\n     * Get the list of identities for the currently logged in user.\n     *\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listIdentities(queries?: string[]): Promise<Models.IdentityList> {\n        const apiPath = '/account/identities';\n        const payload: Payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete identity\n     *\n     * Delete an identity by its unique ID.\n     *\n     * @param {string} identityId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async deleteIdentity(identityId: string): Promise<{}> {\n        if (typeof identityId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"identityId\"');\n        }\n\n        const apiPath = '/account/identities/{identityId}'.replace('{identityId}', identityId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create JWT\n     *\n     * Use this endpoint to create a JSON Web Token. You can use the resulting JWT\n     * to authenticate on behalf of the current user when working with the\n     * Appwrite server-side API and SDKs. The JWT secret is valid for 15 minutes\n     * from its creation and will be invalid if the user will logout in that time\n     * frame.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createJWT(): Promise<Models.Jwt> {\n        const apiPath = '/account/jwt';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List logs\n     *\n     * Get the list of latest security activity logs for the currently logged in\n     * user. Each log returns user IP address, location and date and time of log.\n     *\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listLogs(queries?: string[]): Promise<Models.LogList> {\n        const apiPath = '/account/logs';\n        const payload: Payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update MFA\n     *\n     * Enable or disable MFA on an account.\n     *\n     * @param {boolean} mfa\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateMFA<Preferences extends Models.Preferences>(mfa: boolean): Promise<Models.User<Preferences>> {\n        if (typeof mfa === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"mfa\"');\n        }\n\n        const apiPath = '/account/mfa';\n        const payload: Payload = {};\n\n        if (typeof mfa !== 'undefined') {\n            payload['mfa'] = mfa;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Add Authenticator\n     *\n     * Add an authenticator app to be used as an MFA factor. Verify the\n     * authenticator using the [verify\n     * authenticator](/docs/references/cloud/client-web/account#updateMfaAuthenticator)\n     * method.\n     *\n     * @param {AuthenticatorType} type\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createMfaAuthenticator(type: AuthenticatorType): Promise<Models.MfaType> {\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Verify Authenticator\n     *\n     * Verify an authenticator app after adding it using the [add\n     * authenticator](/docs/references/cloud/client-web/account#createMfaAuthenticator)\n     * method. add \n     *\n     * @param {AuthenticatorType} type\n     * @param {string} otp\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateMfaAuthenticator<Preferences extends Models.Preferences>(type: AuthenticatorType, otp: string): Promise<Models.User<Preferences>> {\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        if (typeof otp === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"otp\"');\n        }\n\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        const payload: Payload = {};\n\n        if (typeof otp !== 'undefined') {\n            payload['otp'] = otp;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete Authenticator\n     *\n     * Delete an authenticator for a user by ID.\n     *\n     * @param {AuthenticatorType} type\n     * @param {string} otp\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async deleteMfaAuthenticator(type: AuthenticatorType, otp: string): Promise<{}> {\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        if (typeof otp === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"otp\"');\n        }\n\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        const payload: Payload = {};\n\n        if (typeof otp !== 'undefined') {\n            payload['otp'] = otp;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create 2FA Challenge\n     *\n     * Begin the process of MFA verification after sign-in. Finish the flow with\n     * [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge)\n     * method.\n     *\n     * @param {AuthenticationFactor} factor\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createMfaChallenge(factor: AuthenticationFactor): Promise<Models.MfaChallenge> {\n        if (typeof factor === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"factor\"');\n        }\n\n        const apiPath = '/account/mfa/challenge';\n        const payload: Payload = {};\n\n        if (typeof factor !== 'undefined') {\n            payload['factor'] = factor;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create MFA Challenge (confirmation)\n     *\n     * Complete the MFA challenge by providing the one-time password. Finish the\n     * process of MFA verification by providing the one-time password. To begin\n     * the flow, use\n     * [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge)\n     * method.\n     *\n     * @param {string} challengeId\n     * @param {string} otp\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateMfaChallenge(challengeId: string, otp: string): Promise<{}> {\n        if (typeof challengeId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"challengeId\"');\n        }\n\n        if (typeof otp === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"otp\"');\n        }\n\n        const apiPath = '/account/mfa/challenge';\n        const payload: Payload = {};\n\n        if (typeof challengeId !== 'undefined') {\n            payload['challengeId'] = challengeId;\n        }\n\n        if (typeof otp !== 'undefined') {\n            payload['otp'] = otp;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List Factors\n     *\n     * List the factors available on the account to be used as a MFA challange.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listMfaFactors(): Promise<Models.MfaFactors> {\n        const apiPath = '/account/mfa/factors';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get MFA Recovery Codes\n     *\n     * Get recovery codes that can be used as backup for MFA flow. Before getting\n     * codes, they must be generated using\n     * [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes)\n     * method. An OTP challenge is required to read recovery codes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async getMfaRecoveryCodes(): Promise<Models.MfaRecoveryCodes> {\n        const apiPath = '/account/mfa/recovery-codes';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create MFA Recovery Codes\n     *\n     * Generate recovery codes as backup for MFA flow. It's recommended to\n     * generate and show then immediately after user successfully adds their\n     * authehticator. Recovery codes can be used as a MFA verification type in\n     * [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge)\n     * method.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createMfaRecoveryCodes(): Promise<Models.MfaRecoveryCodes> {\n        const apiPath = '/account/mfa/recovery-codes';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Regenerate MFA Recovery Codes\n     *\n     * Regenerate recovery codes that can be used as backup for MFA flow. Before\n     * regenerating codes, they must be first generated using\n     * [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes)\n     * method. An OTP challenge is required to regenreate recovery codes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateMfaRecoveryCodes(): Promise<Models.MfaRecoveryCodes> {\n        const apiPath = '/account/mfa/recovery-codes';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update name\n     *\n     * Update currently logged in user account name.\n     *\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateName<Preferences extends Models.Preferences>(name: string): Promise<Models.User<Preferences>> {\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/account/name';\n        const payload: Payload = {};\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update password\n     *\n     * Update currently logged in user password. For validation, user is required\n     * to pass in the new password, and the old password. For users created with\n     * OAuth, Team Invites and Magic URL, oldPassword is optional.\n     *\n     * @param {string} password\n     * @param {string} oldPassword\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updatePassword<Preferences extends Models.Preferences>(password: string, oldPassword?: string): Promise<Models.User<Preferences>> {\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/account/password';\n        const payload: Payload = {};\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof oldPassword !== 'undefined') {\n            payload['oldPassword'] = oldPassword;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update phone\n     *\n     * Update the currently logged in user's phone number. After updating the\n     * phone number, the phone verification status will be reset. A confirmation\n     * SMS is not sent automatically, however you can use the [POST\n     * /account/verification/phone](https://appwrite.io/docs/references/cloud/client-web/account#createPhoneVerification)\n     * endpoint to send a confirmation SMS.\n     *\n     * @param {string} phone\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updatePhone<Preferences extends Models.Preferences>(phone: string, password: string): Promise<Models.User<Preferences>> {\n        if (typeof phone === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"phone\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/account/phone';\n        const payload: Payload = {};\n\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get account preferences\n     *\n     * Get the preferences as a key-value object for the currently logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async getPrefs<Preferences extends Models.Preferences>(): Promise<Preferences> {\n        const apiPath = '/account/prefs';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update preferences\n     *\n     * Update currently logged in user account preferences. The object you pass is\n     * stored as is, and replaces any previous value. The maximum allowed prefs\n     * size is 64kB and throws error if exceeded.\n     *\n     * @param {Partial<Preferences>} prefs\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updatePrefs<Preferences extends Models.Preferences>(prefs: Partial<Preferences>): Promise<Models.User<Preferences>> {\n        if (typeof prefs === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"prefs\"');\n        }\n\n        const apiPath = '/account/prefs';\n        const payload: Payload = {};\n\n        if (typeof prefs !== 'undefined') {\n            payload['prefs'] = prefs;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create password recovery\n     *\n     * Sends the user an email with a temporary secret key for password reset.\n     * When the user clicks the confirmation link he is redirected back to your\n     * app password reset URL with the secret key and email address values\n     * attached to the URL query string. Use the query string params to submit a\n     * request to the [PUT\n     * /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#updateRecovery)\n     * endpoint to complete the process. The verification link sent to the user's\n     * email address is valid for 1 hour.\n     *\n     * @param {string} email\n     * @param {string} url\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createRecovery(email: string, url: string): Promise<Models.Token> {\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n        const apiPath = '/account/recovery';\n        const payload: Payload = {};\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create password recovery (confirmation)\n     *\n     * Use this endpoint to complete the user account password reset. Both the\n     * **userId** and **secret** arguments will be passed as query parameters to\n     * the redirect URL you have provided when sending your request to the [POST\n     * /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#createRecovery)\n     * endpoint.\n     * \n     * Please note that in order to avoid a [Redirect\n     * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)\n     * the only valid redirect URLs are the ones from domains you have set when\n     * adding your platforms in the console interface.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateRecovery(userId: string, secret: string, password: string): Promise<Models.Token> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/account/recovery';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List sessions\n     *\n     * Get the list of active sessions across different devices for the currently\n     * logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listSessions(): Promise<Models.SessionList> {\n        const apiPath = '/account/sessions';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete sessions\n     *\n     * Delete all sessions from the user account and remove any sessions cookies\n     * from the end client.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async deleteSessions(): Promise<{}> {\n        const apiPath = '/account/sessions';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create anonymous session\n     *\n     * Use this endpoint to allow a new user to register an anonymous account in\n     * your project. This route will also create a new session for the user. To\n     * allow the new user to convert an anonymous account to a normal account, you\n     * need to update its [email and\n     * password](https://appwrite.io/docs/references/cloud/client-web/account#updateEmail)\n     * or create an [OAuth2\n     * session](https://appwrite.io/docs/references/cloud/client-web/account#CreateOAuth2Session).\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createAnonymousSession(): Promise<Models.Session> {\n        const apiPath = '/account/sessions/anonymous';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email password session\n     *\n     * Allow the user to login into their account by providing a valid email and\n     * password combination. This route will create a new session for the user.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {string} email\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createEmailPasswordSession(email: string, password: string): Promise<Models.Session> {\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/account/sessions/email';\n        const payload: Payload = {};\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update magic URL session\n     *\n     * Use this endpoint to create a session from token. Provide the **userId**\n     * and **secret** parameters from the successful response of authentication\n     * flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateMagicURLSession(userId: string, secret: string): Promise<Models.Session> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        const apiPath = '/account/sessions/magic-url';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create OAuth2 session\n     *\n     * Allow the user to login to their account using the OAuth2 provider of their\n     * choice. Each OAuth2 provider should be enabled from the Appwrite console\n     * first. Use the success and failure arguments to provide a redirect URL's\n     * back to your app when login is completed.\n     * \n     * If there is already an active session, the new session will be attached to\n     * the logged-in account. If there are no active sessions, the server will\n     * attempt to look for a user with the same email address as the email\n     * received from the OAuth2 provider and attach the new session to the\n     * existing user. If no matching user is found - the server will create a new\n     * user.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appwrite.io/docs/authentication-security#limits).\n     * \n     *\n     * @param {OAuthProvider} provider\n     * @param {string} success\n     * @param {string} failure\n     * @param {string[]} scopes\n     * @throws {AppwriteException}\n     * @returns {void|string}\n    */\n    createOAuth2Session(provider: OAuthProvider, success?: string, failure?: string, scopes?: string[]): void | URL {\n        if (typeof provider === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"provider\"');\n        }\n\n        const apiPath = '/account/sessions/oauth2/{provider}'.replace('{provider}', provider);\n        const payload: Payload = {};\n\n        if (typeof success !== 'undefined') {\n            payload['success'] = success;\n        }\n\n        if (typeof failure !== 'undefined') {\n            payload['failure'] = failure;\n        }\n\n        if (typeof scopes !== 'undefined') {\n            payload['scopes'] = scopes;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        if (typeof window !== 'undefined' && window?.location) {\n            window.location.href = uri.toString();\n        } else {\n            return uri;\n        }\n    }\n\n    /**\n     * Update phone session\n     *\n     * Use this endpoint to create a session from token. Provide the **userId**\n     * and **secret** parameters from the successful response of authentication\n     * flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updatePhoneSession(userId: string, secret: string): Promise<Models.Session> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        const apiPath = '/account/sessions/phone';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create session\n     *\n     * Use this endpoint to create a session from token. Provide the **userId**\n     * and **secret** parameters from the successful response of authentication\n     * flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createSession(userId: string, secret: string): Promise<Models.Session> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        const apiPath = '/account/sessions/token';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get session\n     *\n     * Use this endpoint to get a logged in user's session using a Session ID.\n     * Inputting 'current' will return the current session being used.\n     *\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async getSession(sessionId: string): Promise<Models.Session> {\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n\n        const apiPath = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update session\n     *\n     * Use this endpoint to extend a session's length. Extending a session is\n     * useful when session expiry is short. If the session was created using an\n     * OAuth provider, this endpoint refreshes the access token from the provider.\n     *\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateSession(sessionId: string): Promise<Models.Session> {\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n\n        const apiPath = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete session\n     *\n     * Logout the user. Use 'current' as the session ID to logout on this device,\n     * use a session ID to logout on another device. If you're looking to logout\n     * the user on all devices, use [Delete\n     * Sessions](https://appwrite.io/docs/references/cloud/client-web/account#deleteSessions)\n     * instead.\n     *\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async deleteSession(sessionId: string): Promise<{}> {\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n\n        const apiPath = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update status\n     *\n     * Block the currently logged in user account. Behind the scene, the user\n     * record is not deleted but permanently blocked from any access. To\n     * completely delete a user, use the Users API instead.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateStatus<Preferences extends Models.Preferences>(): Promise<Models.User<Preferences>> {\n        const apiPath = '/account/status';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create push target\n     *\n     *\n     * @param {string} targetId\n     * @param {string} identifier\n     * @param {string} providerId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createPushTarget(targetId: string, identifier: string, providerId?: string): Promise<Models.Target> {\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n        if (typeof identifier === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"identifier\"');\n        }\n\n        const apiPath = '/account/targets/push';\n        const payload: Payload = {};\n\n        if (typeof targetId !== 'undefined') {\n            payload['targetId'] = targetId;\n        }\n\n        if (typeof identifier !== 'undefined') {\n            payload['identifier'] = identifier;\n        }\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update push target\n     *\n     *\n     * @param {string} targetId\n     * @param {string} identifier\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updatePushTarget(targetId: string, identifier: string): Promise<Models.Target> {\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n        if (typeof identifier === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"identifier\"');\n        }\n\n        const apiPath = '/account/targets/{targetId}/push'.replace('{targetId}', targetId);\n        const payload: Payload = {};\n\n        if (typeof identifier !== 'undefined') {\n            payload['identifier'] = identifier;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete push target\n     *\n     *\n     * @param {string} targetId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async deletePushTarget(targetId: string): Promise<{}> {\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n        const apiPath = '/account/targets/{targetId}/push'.replace('{targetId}', targetId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email token (OTP)\n     *\n     * Sends the user an email with a secret key for creating a session. If the\n     * provided user ID has not be registered, a new user will be created. Use the\n     * returned user ID and secret and submit a request to the [POST\n     * /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession)\n     * endpoint to complete the login process. The secret sent to the user's email\n     * is valid for 15 minutes.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {boolean} phrase\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createEmailToken(userId: string, email: string, phrase?: boolean): Promise<Models.Token> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        const apiPath = '/account/tokens/email';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof phrase !== 'undefined') {\n            payload['phrase'] = phrase;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create magic URL token\n     *\n     * Sends the user an email with a secret key for creating a session. If the\n     * provided user ID has not been registered, a new user will be created. When\n     * the user clicks the link in the email, the user is redirected back to the\n     * URL you provided with the secret key and userId values attached to the URL\n     * query string. Use the query string parameters to submit a request to the\n     * [POST\n     * /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession)\n     * endpoint to complete the login process. The link sent to the user's email\n     * address is valid for 1 hour. If you are on a mobile device you can leave\n     * the URL parameter empty, so that the login completion will be handled by\n     * your Appwrite instance by default.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appwrite.io/docs/authentication-security#limits).\n     * \n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} url\n     * @param {boolean} phrase\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createMagicURLToken(userId: string, email: string, url?: string, phrase?: boolean): Promise<Models.Token> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        const apiPath = '/account/tokens/magic-url';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        if (typeof phrase !== 'undefined') {\n            payload['phrase'] = phrase;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create OAuth2 token\n     *\n     * Allow the user to login to their account using the OAuth2 provider of their\n     * choice. Each OAuth2 provider should be enabled from the Appwrite console\n     * first. Use the success and failure arguments to provide a redirect URL's\n     * back to your app when login is completed. \n     * \n     * If authentication succeeds, `userId` and `secret` of a token will be\n     * appended to the success URL as query parameters. These can be used to\n     * create a new session using the [Create\n     * session](https://appwrite.io/docs/references/cloud/client-web/account#createSession)\n     * endpoint.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {OAuthProvider} provider\n     * @param {string} success\n     * @param {string} failure\n     * @param {string[]} scopes\n     * @throws {AppwriteException}\n     * @returns {void|string}\n    */\n    createOAuth2Token(provider: OAuthProvider, success?: string, failure?: string, scopes?: string[]): void | URL {\n        if (typeof provider === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"provider\"');\n        }\n\n        const apiPath = '/account/tokens/oauth2/{provider}'.replace('{provider}', provider);\n        const payload: Payload = {};\n\n        if (typeof success !== 'undefined') {\n            payload['success'] = success;\n        }\n\n        if (typeof failure !== 'undefined') {\n            payload['failure'] = failure;\n        }\n\n        if (typeof scopes !== 'undefined') {\n            payload['scopes'] = scopes;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        if (typeof window !== 'undefined' && window?.location) {\n            window.location.href = uri.toString();\n        } else {\n            return uri;\n        }\n    }\n\n    /**\n     * Create phone token\n     *\n     * Sends the user an SMS with a secret key for creating a session. If the\n     * provided user ID has not be registered, a new user will be created. Use the\n     * returned user ID and secret and submit a request to the [POST\n     * /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession)\n     * endpoint to complete the login process. The secret sent to the user's phone\n     * is valid for 15 minutes.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {string} userId\n     * @param {string} phone\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createPhoneToken(userId: string, phone: string): Promise<Models.Token> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof phone === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"phone\"');\n        }\n\n        const apiPath = '/account/tokens/phone';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email verification\n     *\n     * Use this endpoint to send a verification message to your user email address\n     * to confirm they are the valid owners of that address. Both the **userId**\n     * and **secret** arguments will be passed as query parameters to the URL you\n     * have provided to be attached to the verification email. The provided URL\n     * should redirect the user back to your app and allow you to complete the\n     * verification process by verifying both the **userId** and **secret**\n     * parameters. Learn more about how to [complete the verification\n     * process](https://appwrite.io/docs/references/cloud/client-web/account#updateVerification).\n     * The verification link sent to the user's email address is valid for 7 days.\n     * \n     * Please note that in order to avoid a [Redirect\n     * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md),\n     * the only valid redirect URLs are the ones from domains you have set when\n     * adding your platforms in the console interface.\n     * \n     *\n     * @param {string} url\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createVerification(url: string): Promise<Models.Token> {\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n        const apiPath = '/account/verification';\n        const payload: Payload = {};\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email verification (confirmation)\n     *\n     * Use this endpoint to complete the user email verification process. Use both\n     * the **userId** and **secret** parameters that were attached to your app URL\n     * to verify the user email ownership. If confirmed this route will return a\n     * 200 status code.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateVerification(userId: string, secret: string): Promise<Models.Token> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        const apiPath = '/account/verification';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create phone verification\n     *\n     * Use this endpoint to send a verification SMS to the currently logged in\n     * user. This endpoint is meant for use after updating a user's phone number\n     * using the\n     * [accountUpdatePhone](https://appwrite.io/docs/references/cloud/client-web/account#updatePhone)\n     * endpoint. Learn more about how to [complete the verification\n     * process](https://appwrite.io/docs/references/cloud/client-web/account#updatePhoneVerification).\n     * The verification code sent to the user's phone number is valid for 15\n     * minutes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createPhoneVerification(): Promise<Models.Token> {\n        const apiPath = '/account/verification/phone';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create phone verification (confirmation)\n     *\n     * Use this endpoint to complete the user phone verification process. Use the\n     * **userId** and **secret** that were sent to your user's phone number to\n     * verify the user email ownership. If confirmed this route will return a 200\n     * status code.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updatePhoneVerification(userId: string, secret: string): Promise<Models.Token> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        const apiPath = '/account/verification/phone';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n};\n", "import { Service } from '../service';\nimport { AppwriteException, Client } from '../client';\nimport type { Models } from '../models';\nimport type { UploadProgress, Payload } from '../client';\nimport { Browser } from '../enums/browser';\nimport { CreditCard } from '../enums/credit-card';\nimport { Flag } from '../enums/flag';\n\nexport class Avatars extends Service {\n\n     constructor(client: Client)\n     {\n        super(client);\n     }\n\n    /**\n     * Get browser icon\n     *\n     * You can use this endpoint to show different browser icons to your users.\n     * The code argument receives the browser code as it appears in your user [GET\n     * /account/sessions](https://appwrite.io/docs/references/cloud/client-web/account#getSessions)\n     * endpoint. Use width, height and quality arguments to change the output\n     * settings.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     *\n     * @param {Browser} code\n     * @param {number} width\n     * @param {number} height\n     * @param {number} quality\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getBrowser(code: Browser, width?: number, height?: number, quality?: number): URL {\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n\n        const apiPath = '/avatars/browsers/{code}'.replace('{code}', code);\n        const payload: Payload = {};\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n\n    /**\n     * Get credit card icon\n     *\n     * The credit card endpoint will return you the icon of the credit card\n     * provider you need. Use width, height and quality arguments to change the\n     * output settings.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     * \n     *\n     * @param {CreditCard} code\n     * @param {number} width\n     * @param {number} height\n     * @param {number} quality\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getCreditCard(code: CreditCard, width?: number, height?: number, quality?: number): URL {\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n\n        const apiPath = '/avatars/credit-cards/{code}'.replace('{code}', code);\n        const payload: Payload = {};\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n\n    /**\n     * Get favicon\n     *\n     * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote\n     * website URL.\n     * \n     *\n     * @param {string} url\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getFavicon(url: string): URL {\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n        const apiPath = '/avatars/favicon';\n        const payload: Payload = {};\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n\n    /**\n     * Get country flag\n     *\n     * You can use this endpoint to show different country flags icons to your\n     * users. The code argument receives the 2 letter country code. Use width,\n     * height and quality arguments to change the output settings. Country codes\n     * follow the [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) standard.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     * \n     *\n     * @param {Flag} code\n     * @param {number} width\n     * @param {number} height\n     * @param {number} quality\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getFlag(code: Flag, width?: number, height?: number, quality?: number): URL {\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n\n        const apiPath = '/avatars/flags/{code}'.replace('{code}', code);\n        const payload: Payload = {};\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n\n    /**\n     * Get image from URL\n     *\n     * Use this endpoint to fetch a remote image URL and crop it to any image size\n     * you want. This endpoint is very useful if you need to crop and display\n     * remote images in your app or in case you want to make sure a 3rd party\n     * image is properly served using a TLS protocol.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 400x400px.\n     * \n     *\n     * @param {string} url\n     * @param {number} width\n     * @param {number} height\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getImage(url: string, width?: number, height?: number): URL {\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n        const apiPath = '/avatars/image';\n        const payload: Payload = {};\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n\n    /**\n     * Get user initials\n     *\n     * Use this endpoint to show your user initials avatar icon on your website or\n     * app. By default, this route will try to print your logged-in user name or\n     * email initials. You can also overwrite the user name if you pass the 'name'\n     * parameter. If no name is given and no user is logged, an empty avatar will\n     * be returned.\n     * \n     * You can use the color and background params to change the avatar colors. By\n     * default, a random theme will be selected. The random theme will persist for\n     * the user's initials when reloading the same theme will always return for\n     * the same initials.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     * \n     *\n     * @param {string} name\n     * @param {number} width\n     * @param {number} height\n     * @param {string} background\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getInitials(name?: string, width?: number, height?: number, background?: string): URL {\n        const apiPath = '/avatars/initials';\n        const payload: Payload = {};\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof background !== 'undefined') {\n            payload['background'] = background;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n\n    /**\n     * Get QR code\n     *\n     * Converts a given plain text to a QR code image. You can use the query\n     * parameters to change the size and style of the resulting image.\n     * \n     *\n     * @param {string} text\n     * @param {number} size\n     * @param {number} margin\n     * @param {boolean} download\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getQR(text: string, size?: number, margin?: number, download?: boolean): URL {\n        if (typeof text === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"text\"');\n        }\n\n        const apiPath = '/avatars/qr';\n        const payload: Payload = {};\n\n        if (typeof text !== 'undefined') {\n            payload['text'] = text;\n        }\n\n        if (typeof size !== 'undefined') {\n            payload['size'] = size;\n        }\n\n        if (typeof margin !== 'undefined') {\n            payload['margin'] = margin;\n        }\n\n        if (typeof download !== 'undefined') {\n            payload['download'] = download;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n};\n", "import { Service } from '../service';\nimport { AppwriteException, Client } from '../client';\nimport type { Models } from '../models';\nimport type { UploadProgress, Payload } from '../client';\n\nexport class Databases extends Service {\n\n     constructor(client: Client)\n     {\n        super(client);\n     }\n\n    /**\n     * List documents\n     *\n     * Get a list of all the user's documents in a given collection. You can use\n     * the query params to filter your results.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listDocuments<Document extends Models.Document>(databaseId: string, collectionId: string, queries?: string[]): Promise<Models.DocumentList<Document>> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create document\n     *\n     * Create a new Document. Before using this route, you should create a new\n     * collection resource using either a [server\n     * integration](https://appwrite.io/docs/server/databases#databasesCreateCollection)\n     * API or directly from your database console.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @param {Omit<Document, keyof Models.Document>} data\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createDocument<Document extends Models.Document>(databaseId: string, collectionId: string, documentId: string, data: Omit<Document, keyof Models.Document>, permissions?: string[]): Promise<Document> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n\n        if (typeof data === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"data\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n\n        if (typeof documentId !== 'undefined') {\n            payload['documentId'] = documentId;\n        }\n\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get document\n     *\n     * Get a document by its unique ID. This endpoint response returns a JSON\n     * object with the document data.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async getDocument<Document extends Models.Document>(databaseId: string, collectionId: string, documentId: string, queries?: string[]): Promise<Document> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n        const payload: Payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update document\n     *\n     * Update a document by its unique ID. Using the patch method you can pass\n     * only specific fields that will get updated.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @param {Partial<Omit<Document, keyof Models.Document>>} data\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateDocument<Document extends Models.Document>(databaseId: string, collectionId: string, documentId: string, data?: Partial<Omit<Document, keyof Models.Document>>, permissions?: string[]): Promise<Document> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n        const payload: Payload = {};\n\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete document\n     *\n     * Delete a document by its unique ID.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async deleteDocument(databaseId: string, collectionId: string, documentId: string): Promise<{}> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n};\n", "import { Service } from '../service';\nimport { AppwriteException, Client } from '../client';\nimport type { Models } from '../models';\nimport type { UploadProgress, Payload } from '../client';\nimport { ExecutionMethod } from '../enums/execution-method';\n\nexport class Functions extends Service {\n\n     constructor(client: Client)\n     {\n        super(client);\n     }\n\n    /**\n     * List executions\n     *\n     * Get a list of all the current user function execution logs. You can use the\n     * query params to filter your results.\n     *\n     * @param {string} functionId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listExecutions(functionId: string, queries?: string[], search?: string): Promise<Models.ExecutionList> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/executions'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create execution\n     *\n     * Trigger a function execution. The returned object will return you the\n     * current execution status. You can ping the `Get Execution` endpoint to get\n     * updates on the current execution status. Once this endpoint is called, your\n     * function execution process will start asynchronously.\n     *\n     * @param {string} functionId\n     * @param {string} body\n     * @param {boolean} async\n     * @param {string} xpath\n     * @param {ExecutionMethod} method\n     * @param {object} headers\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createExecution(functionId: string, body?: string, async?: boolean, xpath?: string, method?: ExecutionMethod, headers?: object): Promise<Models.Execution> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/executions'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n\n        if (typeof body !== 'undefined') {\n            payload['body'] = body;\n        }\n\n        if (typeof async !== 'undefined') {\n            payload['async'] = async;\n        }\n\n        if (typeof xpath !== 'undefined') {\n            payload['path'] = xpath;\n        }\n\n        if (typeof method !== 'undefined') {\n            payload['method'] = method;\n        }\n\n        if (typeof headers !== 'undefined') {\n            payload['headers'] = headers;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get execution\n     *\n     * Get a function execution log by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} executionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async getExecution(functionId: string, executionId: string): Promise<Models.Execution> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof executionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"executionId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/executions/{executionId}'.replace('{functionId}', functionId).replace('{executionId}', executionId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n};\n", "import { Service } from '../service';\nimport { AppwriteException, Client } from '../client';\nimport type { Models } from '../models';\nimport type { UploadProgress, Payload } from '../client';\n\nexport class Graphql extends Service {\n\n     constructor(client: Client)\n     {\n        super(client);\n     }\n\n    /**\n     * GraphQL endpoint\n     *\n     * Execute a GraphQL mutation.\n     *\n     * @param {object} query\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async query(query: object): Promise<{}> {\n        if (typeof query === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"query\"');\n        }\n\n        const apiPath = '/graphql';\n        const payload: Payload = {};\n\n        if (typeof query !== 'undefined') {\n            payload['query'] = query;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'x-sdk-graphql': 'true',\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * GraphQL endpoint\n     *\n     * Execute a GraphQL mutation.\n     *\n     * @param {object} query\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async mutation(query: object): Promise<{}> {\n        if (typeof query === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"query\"');\n        }\n\n        const apiPath = '/graphql/mutation';\n        const payload: Payload = {};\n\n        if (typeof query !== 'undefined') {\n            payload['query'] = query;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'x-sdk-graphql': 'true',\n            'content-type': 'application/json',\n        }, payload);\n    }\n};\n", "import { Service } from '../service';\nimport { AppwriteException, Client } from '../client';\nimport type { Models } from '../models';\nimport type { UploadProgress, Payload } from '../client';\n\nexport class Locale extends Service {\n\n     constructor(client: Client)\n     {\n        super(client);\n     }\n\n    /**\n     * Get user locale\n     *\n     * Get the current user location based on IP. Returns an object with user\n     * country code, country name, continent name, continent code, ip address and\n     * suggested currency. You can use the locale header to get the data in a\n     * supported language.\n     * \n     * ([IP Geolocation by DB-IP](https://db-ip.com))\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async get(): Promise<Models.Locale> {\n        const apiPath = '/locale';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List Locale Codes\n     *\n     * List of all locale codes in [ISO\n     * 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listCodes(): Promise<Models.LocaleCodeList> {\n        const apiPath = '/locale/codes';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List continents\n     *\n     * List of all continents. You can use the locale header to get the data in a\n     * supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listContinents(): Promise<Models.ContinentList> {\n        const apiPath = '/locale/continents';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List countries\n     *\n     * List of all countries. You can use the locale header to get the data in a\n     * supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listCountries(): Promise<Models.CountryList> {\n        const apiPath = '/locale/countries';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List EU countries\n     *\n     * List of all countries that are currently members of the EU. You can use the\n     * locale header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listCountriesEU(): Promise<Models.CountryList> {\n        const apiPath = '/locale/countries/eu';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List countries phone codes\n     *\n     * List of all countries phone codes. You can use the locale header to get the\n     * data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listCountriesPhones(): Promise<Models.PhoneList> {\n        const apiPath = '/locale/countries/phones';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List currencies\n     *\n     * List of all currencies, including currency symbol, name, plural, and\n     * decimal digits for all major and minor currencies. You can use the locale\n     * header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listCurrencies(): Promise<Models.CurrencyList> {\n        const apiPath = '/locale/currencies';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List languages\n     *\n     * List of all languages classified by ISO 639-1 including 2-letter code, name\n     * in English, and name in the respective language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listLanguages(): Promise<Models.LanguageList> {\n        const apiPath = '/locale/languages';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n};\n", "import { Service } from '../service';\nimport { AppwriteException, Client } from '../client';\nimport type { Models } from '../models';\nimport type { UploadProgress, Payload } from '../client';\n\nexport class Messaging extends Service {\n\n     constructor(client: Client)\n     {\n        super(client);\n     }\n\n    /**\n     * Create subscriber\n     *\n     * Create a new subscriber.\n     *\n     * @param {string} topicId\n     * @param {string} subscriberId\n     * @param {string} targetId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createSubscriber(topicId: string, subscriberId: string, targetId: string): Promise<Models.Subscriber> {\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n        const apiPath = '/messaging/topics/{topicId}/subscribers'.replace('{topicId}', topicId);\n        const payload: Payload = {};\n\n        if (typeof subscriberId !== 'undefined') {\n            payload['subscriberId'] = subscriberId;\n        }\n\n        if (typeof targetId !== 'undefined') {\n            payload['targetId'] = targetId;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete subscriber\n     *\n     * Delete a subscriber by its unique ID.\n     *\n     * @param {string} topicId\n     * @param {string} subscriberId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async deleteSubscriber(topicId: string, subscriberId: string): Promise<{}> {\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n\n        const apiPath = '/messaging/topics/{topicId}/subscribers/{subscriberId}'.replace('{topicId}', topicId).replace('{subscriberId}', subscriberId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n};\n", "import { Service } from '../service';\nimport { AppwriteException, Client } from '../client';\nimport type { Models } from '../models';\nimport type { UploadProgress, Payload } from '../client';\nimport { ImageGravity } from '../enums/image-gravity';\nimport { ImageFormat } from '../enums/image-format';\n\nexport class Storage extends Service {\n\n     constructor(client: Client)\n     {\n        super(client);\n     }\n\n    /**\n     * List files\n     *\n     * Get a list of all the user files. You can use the query params to filter\n     * your results.\n     *\n     * @param {string} bucketId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listFiles(bucketId: string, queries?: string[], search?: string): Promise<Models.FileList> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files'.replace('{bucketId}', bucketId);\n        const payload: Payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create file\n     *\n     * Create a new file. Before using this route, you should create a new bucket\n     * resource using either a [server\n     * integration](https://appwrite.io/docs/server/storage#storageCreateBucket)\n     * API or directly from your Appwrite console.\n     * \n     * Larger files should be uploaded using multiple requests with the\n     * [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range)\n     * header to send a partial request with a maximum supported chunk of `5MB`.\n     * The `content-range` header values should always be in bytes.\n     * \n     * When the first request is sent, the server will return the **File** object,\n     * and the subsequent part request must include the file's **id** in\n     * `x-appwrite-id` header to allow the server to know that the partial upload\n     * is for the existing file and not for a new one.\n     * \n     * If you're creating a new file using one of the Appwrite SDKs, all the\n     * chunking logic will be managed by the SDK internally.\n     * \n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @param {File} file\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createFile(bucketId: string, fileId: string, file: File, permissions?: string[], onProgress = (progress: UploadProgress) => {}): Promise<Models.File> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        if (typeof file === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"file\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files'.replace('{bucketId}', bucketId);\n        const payload: Payload = {};\n\n        if (typeof fileId !== 'undefined') {\n            payload['fileId'] = fileId;\n        }\n\n        if (typeof file !== 'undefined') {\n            payload['file'] = file;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        if(!(file instanceof File)) {\n            throw new AppwriteException('Parameter \"file\" has to be a File.');\n        }\n\n        const size = file.size;\n\n        if (size <= Service.CHUNK_SIZE) {\n            return await this.client.call('post', uri, {\n                'content-type': 'multipart/form-data',\n            }, payload);\n        }\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'multipart/form-data',\n        }\n\n        let offset = 0;\n        let response = undefined;\n        if(fileId != 'unique()') {\n            try {\n                response = await this.client.call('GET', new URL(this.client.config.endpoint + apiPath + '/' + fileId), apiHeaders);\n                offset = response.chunksUploaded * Service.CHUNK_SIZE;\n            } catch(e) {\n            }\n        }\n\n        while (offset < size) {\n            let end = Math.min(offset + Service.CHUNK_SIZE - 1, size - 1);\n\n            apiHeaders['content-range'] = 'bytes ' + offset + '-' + end + '/' + size;\n            if (response && response.$id) {\n                apiHeaders['x-appwrite-id'] = response.$id;\n            }\n\n            const chunk = file.slice(offset, end + 1);\n            payload['file'] = new File([chunk], file.name);\n            response = await this.client.call('post', uri, apiHeaders, payload);\n\n            if (onProgress) {\n                onProgress({\n                    $id: response.$id,\n                    progress: (offset / size) * 100,\n                    sizeUploaded: offset,\n                    chunksTotal: response.chunksTotal,\n                    chunksUploaded: response.chunksUploaded\n                });\n            }\n            offset += Service.CHUNK_SIZE;\n        }\n        return response;\n    }\n\n    /**\n     * Get file\n     *\n     * Get a file by its unique ID. This endpoint response returns a JSON object\n     * with the file metadata.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async getFile(bucketId: string, fileId: string): Promise<Models.File> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update file\n     *\n     * Update a file by its unique ID. Only users with write permissions have\n     * access to update this resource.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateFile(bucketId: string, fileId: string, name?: string, permissions?: string[]): Promise<Models.File> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete File\n     *\n     * Delete a file by its unique ID. Only users with write permissions have\n     * access to delete this resource.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async deleteFile(bucketId: string, fileId: string): Promise<{}> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get file for download\n     *\n     * Get a file content by its unique ID. The endpoint response return with a\n     * 'Content-Disposition: attachment' header that tells the browser to start\n     * downloading the file to user downloads directory.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getFileDownload(bucketId: string, fileId: string): URL {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}/download'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n\n    /**\n     * Get file preview\n     *\n     * Get a file preview image. Currently, this method supports preview for image\n     * files (jpg, png, and gif), other supported formats, like pdf, docs, slides,\n     * and spreadsheets, will return the file icon image. You can also pass query\n     * string arguments for cutting and resizing your preview image. Preview is\n     * supported only for image files smaller than 10MB.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @param {number} width\n     * @param {number} height\n     * @param {ImageGravity} gravity\n     * @param {number} quality\n     * @param {number} borderWidth\n     * @param {string} borderColor\n     * @param {number} borderRadius\n     * @param {number} opacity\n     * @param {number} rotation\n     * @param {string} background\n     * @param {ImageFormat} output\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getFilePreview(bucketId: string, fileId: string, width?: number, height?: number, gravity?: ImageGravity, quality?: number, borderWidth?: number, borderColor?: string, borderRadius?: number, opacity?: number, rotation?: number, background?: string, output?: ImageFormat): URL {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}/preview'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof gravity !== 'undefined') {\n            payload['gravity'] = gravity;\n        }\n\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n\n        if (typeof borderWidth !== 'undefined') {\n            payload['borderWidth'] = borderWidth;\n        }\n\n        if (typeof borderColor !== 'undefined') {\n            payload['borderColor'] = borderColor;\n        }\n\n        if (typeof borderRadius !== 'undefined') {\n            payload['borderRadius'] = borderRadius;\n        }\n\n        if (typeof opacity !== 'undefined') {\n            payload['opacity'] = opacity;\n        }\n\n        if (typeof rotation !== 'undefined') {\n            payload['rotation'] = rotation;\n        }\n\n        if (typeof background !== 'undefined') {\n            payload['background'] = background;\n        }\n\n        if (typeof output !== 'undefined') {\n            payload['output'] = output;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n\n    /**\n     * Get file for view\n     *\n     * Get a file content by its unique ID. This endpoint is similar to the\n     * download method but returns with no  'Content-Disposition: attachment'\n     * header.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getFileView(bucketId: string, fileId: string): URL {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}/view'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n};\n", "import { Service } from '../service';\nimport { AppwriteException, Client } from '../client';\nimport type { Models } from '../models';\nimport type { UploadProgress, Payload } from '../client';\n\nexport class Teams extends Service {\n\n     constructor(client: Client)\n     {\n        super(client);\n     }\n\n    /**\n     * List teams\n     *\n     * Get a list of all the teams in which the current user is a member. You can\n     * use the parameters to filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async list<Preferences extends Models.Preferences>(queries?: string[], search?: string): Promise<Models.TeamList<Preferences>> {\n        const apiPath = '/teams';\n        const payload: Payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create team\n     *\n     * Create a new team. The user who creates the team will automatically be\n     * assigned as the owner of the team. Only the users with the owner role can\n     * invite new members, add new owners and delete or update the team.\n     *\n     * @param {string} teamId\n     * @param {string} name\n     * @param {string[]} roles\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async create<Preferences extends Models.Preferences>(teamId: string, name: string, roles?: string[]): Promise<Models.Team<Preferences>> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/teams';\n        const payload: Payload = {};\n\n        if (typeof teamId !== 'undefined') {\n            payload['teamId'] = teamId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof roles !== 'undefined') {\n            payload['roles'] = roles;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get team\n     *\n     * Get a team by its ID. All team members have read access for this resource.\n     *\n     * @param {string} teamId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async get<Preferences extends Models.Preferences>(teamId: string): Promise<Models.Team<Preferences>> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        const apiPath = '/teams/{teamId}'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update name\n     *\n     * Update the team's name by its unique ID.\n     *\n     * @param {string} teamId\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateName<Preferences extends Models.Preferences>(teamId: string, name: string): Promise<Models.Team<Preferences>> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/teams/{teamId}'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete team\n     *\n     * Delete a team using its ID. Only team members with the owner role can\n     * delete the team.\n     *\n     * @param {string} teamId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async delete(teamId: string): Promise<{}> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        const apiPath = '/teams/{teamId}'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List team memberships\n     *\n     * Use this endpoint to list a team's members using the team's ID. All team\n     * members have read access to this endpoint.\n     *\n     * @param {string} teamId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listMemberships(teamId: string, queries?: string[], search?: string): Promise<Models.MembershipList> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        const apiPath = '/teams/{teamId}/memberships'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create team membership\n     *\n     * Invite a new member to join your team. Provide an ID for existing users, or\n     * invite unregistered users using an email or phone number. If initiated from\n     * a Client SDK, Appwrite will send an email or sms with a link to join the\n     * team to the invited user, and an account will be created for them if one\n     * doesn't exist. If initiated from a Server SDK, the new member will be added\n     * automatically to the team.\n     * \n     * You only need to provide one of a user ID, email, or phone number. Appwrite\n     * will prioritize accepting the user ID > email > phone number if you provide\n     * more than one of these parameters.\n     * \n     * Use the `url` parameter to redirect the user from the invitation email to\n     * your app. After the user is redirected, use the [Update Team Membership\n     * Status](https://appwrite.io/docs/references/cloud/client-web/teams#updateMembershipStatus)\n     * endpoint to allow the user to accept the invitation to the team. \n     * \n     * Please note that to avoid a [Redirect\n     * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)\n     * Appwrite will accept the only redirect URLs under the domains you have\n     * added as a platform on the Appwrite Console.\n     * \n     *\n     * @param {string} teamId\n     * @param {string[]} roles\n     * @param {string} email\n     * @param {string} userId\n     * @param {string} phone\n     * @param {string} url\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createMembership(teamId: string, roles: string[], email?: string, userId?: string, phone?: string, url?: string, name?: string): Promise<Models.Membership> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof roles === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"roles\"');\n        }\n\n        const apiPath = '/teams/{teamId}/memberships'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n\n        if (typeof roles !== 'undefined') {\n            payload['roles'] = roles;\n        }\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get team membership\n     *\n     * Get a team member by the membership unique id. All team members have read\n     * access for this resource.\n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async getMembership(teamId: string, membershipId: string): Promise<Models.Membership> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update membership\n     *\n     * Modify the roles of a team member. Only team members with the owner role\n     * have access to this endpoint. Learn more about [roles and\n     * permissions](https://appwrite.io/docs/permissions).\n     * \n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @param {string[]} roles\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateMembership(teamId: string, membershipId: string, roles: string[]): Promise<Models.Membership> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n\n        if (typeof roles === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"roles\"');\n        }\n\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        const payload: Payload = {};\n\n        if (typeof roles !== 'undefined') {\n            payload['roles'] = roles;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete team membership\n     *\n     * This endpoint allows a user to leave a team or for a team owner to delete\n     * the membership of any other team member. You can also use this endpoint to\n     * delete a user membership even if it is not accepted.\n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async deleteMembership(teamId: string, membershipId: string): Promise<{}> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update team membership status\n     *\n     * Use this endpoint to allow a user to accept an invitation to join a team\n     * after being redirected back to your app from the invitation email received\n     * by the user.\n     * \n     * If the request is successful, a session for the user is automatically\n     * created.\n     * \n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateMembershipStatus(teamId: string, membershipId: string, userId: string, secret: string): Promise<Models.Membership> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}/status'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get team preferences\n     *\n     * Get the team's shared preferences by its unique ID. If a preference doesn't\n     * need to be shared by all team members, prefer storing them in [user\n     * preferences](https://appwrite.io/docs/references/cloud/client-web/account#getPrefs).\n     *\n     * @param {string} teamId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async getPrefs<Preferences extends Models.Preferences>(teamId: string): Promise<Preferences> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        const apiPath = '/teams/{teamId}/prefs'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update preferences\n     *\n     * Update the team's preferences by its unique ID. The object you pass is\n     * stored as is and replaces any previous value. The maximum allowed prefs\n     * size is 64kB and throws an error if exceeded.\n     *\n     * @param {string} teamId\n     * @param {object} prefs\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updatePrefs<Preferences extends Models.Preferences>(teamId: string, prefs: object): Promise<Preferences> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof prefs === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"prefs\"');\n        }\n\n        const apiPath = '/teams/{teamId}/prefs'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n\n        if (typeof prefs !== 'undefined') {\n            payload['prefs'] = prefs;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n};\n", "export class Permission {\n\n    static read = (role: string): string => {\n        return `read(\"${role}\")`\n    }\n\n    static write = (role: string): string => {\n        return `write(\"${role}\")`\n    }\n\n    static create = (role: string): string => {\n        return `create(\"${role}\")`\n    }\n\n    static update = (role: string): string => {\n        return `update(\"${role}\")`\n    }\n\n    static delete = (role: string): string => {\n        return `delete(\"${role}\")`\n    }\n}\n", "/**\n * Helper class to generate role strings for `Permission`.\n */\nexport class Role {\n\n    /**\n     * Grants access to anyone.\n     * \n     * This includes authenticated and unauthenticated users.\n     * \n     * @returns {string}\n     */\n    public static any(): string {\n        return 'any'\n    }\n\n    /**\n     * Grants access to a specific user by user ID.\n     * \n     * You can optionally pass verified or unverified for\n     * `status` to target specific types of users.\n     *\n     * @param {string} id \n     * @param {string} status \n     * @returns {string}\n     */\n    public static user(id: string, status: string = ''): string {\n        if (status === '') {\n            return `user:${id}`\n        }\n        return `user:${id}/${status}`\n    }\n\n    /**\n     * Grants access to any authenticated or anonymous user.\n     * \n     * You can optionally pass verified or unverified for\n     * `status` to target specific types of users.\n     * \n     * @param {string} status \n     * @returns {string}\n     */\n    public static users(status: string = ''): string {\n        if (status === '') {\n            return 'users'\n        }\n        return `users/${status}`\n    }\n\n    /**\n     * Grants access to any guest user without a session.\n     * \n     * Authenticated users don't have access to this role.\n     * \n     * @returns {string}\n     */\n    public static guests(): string {\n        return 'guests'\n    }\n\n    /**\n     * Grants access to a team by team ID.\n     * \n     * You can optionally pass a role for `role` to target\n     * team members with the specified role.\n     * \n     * @param {string} id \n     * @param {string} role \n     * @returns {string}\n     */\n    public static team(id: string, role: string = ''): string {\n        if (role === '') {\n            return `team:${id}`\n        }\n        return `team:${id}/${role}`\n    }\n\n    /**\n     * Grants access to a specific member of a team.\n     * \n     * When the member is removed from the team, they will\n     * no longer have access.\n     * \n     * @param {string} id \n     * @returns {string}\n     */\n    public static member(id: string): string {\n        return `member:${id}`\n    }\n\n    /**\n     * Grants access to a user with the specified label.\n     * \n     * @param {string} name \n     * @returns  {string}\n     */\n    public static label(name: string): string {\n        return `label:${name}`\n    }\n}", "export class ID {\n    // Generate an hex ID based on timestamp\n    // Recreated from https://www.php.net/manual/en/function.uniqid.php\n    static #hexTimestamp(): string {\n        const now = new Date();\n        const sec = Math.floor(now.getTime() / 1000);\n        const msec = now.getMilliseconds();\n\n        // Convert to hexadecimal\n        const hexTimestamp = sec.toString(16) + msec.toString(16).padStart(5, '0');\n        return hexTimestamp;\n    }\n\n    public static custom(id: string): string {\n        return id\n    }\n\n    public static unique(padding: number = 7): string {\n        // Generate a unique ID with padding to have a longer ID\n        const baseId = ID.#hexTimestamp();\n        let randomPadding = '';\n        for (let i = 0; i < padding; i++) {\n            const randomHexDigit = Math.floor(Math.random() * 16).toString(16);\n            randomPadding += randomHexDigit;\n        }\n        return baseId + randomPadding;\n    }\n}\n", "export enum AuthenticatorType {\n    Totp = 'totp',\n}", "export enum AuthenticationFactor {\n    Email = 'email',\n    Phone = 'phone',\n    Totp = 'totp',\n    Recoverycode = 'recoverycode',\n}", "export enum OAuthProvider {\n    Amazon = 'amazon',\n    Apple = 'apple',\n    Auth0 = 'auth0',\n    Authentik = 'authentik',\n    Autodesk = 'autodesk',\n    Bitbucket = 'bitbucket',\n    Bitly = 'bitly',\n    Box = 'box',\n    Dailymotion = 'dailymotion',\n    Discord = 'discord',\n    Disqus = 'disqus',\n    Dropbox = 'dropbox',\n    Etsy = 'etsy',\n    Facebook = 'facebook',\n    Github = 'github',\n    Gitlab = 'gitlab',\n    Google = 'google',\n    Linkedin = 'linkedin',\n    Microsoft = 'microsoft',\n    Notion = 'notion',\n    Oidc = 'oidc',\n    Okta = 'okta',\n    Paypal = 'paypal',\n    PaypalSandbox = 'paypalSandbox',\n    Podio = 'podio',\n    Salesforce = 'salesforce',\n    Slack = 'slack',\n    Spotify = 'spotify',\n    Stripe = 'stripe',\n    Tradeshift = 'tradeshift',\n    TradeshiftBox = 'tradeshiftBox',\n    Twitch = 'twitch',\n    Wordpress = 'wordpress',\n    Yahoo = 'yahoo',\n    Yammer = 'yammer',\n    Yandex = 'yandex',\n    Zoho = 'zoho',\n    Zoom = 'zoom',\n    Mock = 'mock',\n}", "export enum Browser {\n    AvantBrowser = 'aa',\n    AndroidWebViewBeta = 'an',\n    GoogleChrome = 'ch',\n    GoogleChromeIOS = 'ci',\n    GoogleChromeMobile = 'cm',\n    Chromium = 'cr',\n    MozillaFirefox = 'ff',\n    Safari = 'sf',\n    MobileSafari = 'mf',\n    MicrosoftEdge = 'ps',\n    MicrosoftEdgeIOS = 'oi',\n    OperaMini = 'om',\n    Opera = 'op',\n    OperaNext = 'on',\n}", "export enum CreditCard {\n    AmericanExpress = 'amex',\n    Argencard = 'argencard',\n    Cabal = 'cabal',\n    Cencosud = 'cencosud',\n    DinersClub = 'diners',\n    Discover = 'discover',\n    Elo = 'elo',\n    Hipercard = 'hipercard',\n    JCB = 'jcb',\n    Mastercard = 'mastercard',\n    Naranja = 'naranja',\n    TarjetaShopping = 'targeta-shopping',\n    UnionChinaPay = 'union-china-pay',\n    Visa = 'visa',\n    MIR = 'mir',\n    Maestro = 'maestro',\n}", "export enum Flag {\n    Afghanistan = 'af',\n    Angola = 'ao',\n    Albania = 'al',\n    Andorra = 'ad',\n    UnitedArabEmirates = 'ae',\n    Argentina = 'ar',\n    Armenia = 'am',\n    AntiguaAndBarbuda = 'ag',\n    Australia = 'au',\n    Austria = 'at',\n    Azerbaijan = 'az',\n    Burundi = 'bi',\n    Belgium = 'be',\n    Benin = 'bj',\n    BurkinaFaso = 'bf',\n    Bangladesh = 'bd',\n    Bulgaria = 'bg',\n    Bahrain = 'bh',\n    Bahamas = 'bs',\n    BosniaAndHerzegovina = 'ba',\n    Belarus = 'by',\n    Belize = 'bz',\n    Bolivia = 'bo',\n    Brazil = 'br',\n    Barbados = 'bb',\n    BruneiDarussalam = 'bn',\n    Bhutan = 'bt',\n    Botswana = 'bw',\n    CentralAfricanRepublic = 'cf',\n    Canada = 'ca',\n    Switzerland = 'ch',\n    Chile = 'cl',\n    China = 'cn',\n    CoteDIvoire = 'ci',\n    Cameroon = 'cm',\n    DemocraticRepublicOfTheCongo = 'cd',\n    RepublicOfTheCongo = 'cg',\n    Colombia = 'co',\n    Comoros = 'km',\n    CapeVerde = 'cv',\n    CostaRica = 'cr',\n    Cuba = 'cu',\n    Cyprus = 'cy',\n    CzechRepublic = 'cz',\n    Germany = 'de',\n    Djibouti = 'dj',\n    Dominica = 'dm',\n    Denmark = 'dk',\n    DominicanRepublic = 'do',\n    Algeria = 'dz',\n    Ecuador = 'ec',\n    Egypt = 'eg',\n    Eritrea = 'er',\n    Spain = 'es',\n    Estonia = 'ee',\n    Ethiopia = 'et',\n    Finland = 'fi',\n    Fiji = 'fj',\n    France = 'fr',\n    MicronesiaFederatedStatesOf = 'fm',\n    Gabon = 'ga',\n    UnitedKingdom = 'gb',\n    Georgia = 'ge',\n    Ghana = 'gh',\n    Guinea = 'gn',\n    Gambia = 'gm',\n    GuineaBissau = 'gw',\n    EquatorialGuinea = 'gq',\n    Greece = 'gr',\n    Grenada = 'gd',\n    Guatemala = 'gt',\n    Guyana = 'gy',\n    Honduras = 'hn',\n    Croatia = 'hr',\n    Haiti = 'ht',\n    Hungary = 'hu',\n    Indonesia = 'id',\n    India = 'in',\n    Ireland = 'ie',\n    IranIslamicRepublicOf = 'ir',\n    Iraq = 'iq',\n    Iceland = 'is',\n    Israel = 'il',\n    Italy = 'it',\n    Jamaica = 'jm',\n    Jordan = 'jo',\n    Japan = 'jp',\n    Kazakhstan = 'kz',\n    Kenya = 'ke',\n    Kyrgyzstan = 'kg',\n    Cambodia = 'kh',\n    Kiribati = 'ki',\n    SaintKittsAndNevis = 'kn',\n    SouthKorea = 'kr',\n    Kuwait = 'kw',\n    LaoPeopleSDemocraticRepublic = 'la',\n    Lebanon = 'lb',\n    Liberia = 'lr',\n    Libya = 'ly',\n    SaintLucia = 'lc',\n    Liechtenstein = 'li',\n    SriLanka = 'lk',\n    Lesotho = 'ls',\n    Lithuania = 'lt',\n    Luxembourg = 'lu',\n    Latvia = 'lv',\n    Morocco = 'ma',\n    Monaco = 'mc',\n    Moldova = 'md',\n    Madagascar = 'mg',\n    Maldives = 'mv',\n    Mexico = 'mx',\n    MarshallIslands = 'mh',\n    NorthMacedonia = 'mk',\n    Mali = 'ml',\n    Malta = 'mt',\n    Myanmar = 'mm',\n    Montenegro = 'me',\n    Mongolia = 'mn',\n    Mozambique = 'mz',\n    Mauritania = 'mr',\n    Mauritius = 'mu',\n    Malawi = 'mw',\n    Malaysia = 'my',\n    Namibia = 'na',\n    Niger = 'ne',\n    Nigeria = 'ng',\n    Nicaragua = 'ni',\n    Netherlands = 'nl',\n    Norway = 'no',\n    Nepal = 'np',\n    Nauru = 'nr',\n    NewZealand = 'nz',\n    Oman = 'om',\n    Pakistan = 'pk',\n    Panama = 'pa',\n    Peru = 'pe',\n    Philippines = 'ph',\n    Palau = 'pw',\n    PapuaNewGuinea = 'pg',\n    Poland = 'pl',\n    FrenchPolynesia = 'pf',\n    NorthKorea = 'kp',\n    Portugal = 'pt',\n    Paraguay = 'py',\n    Qatar = 'qa',\n    Romania = 'ro',\n    Russia = 'ru',\n    Rwanda = 'rw',\n    SaudiArabia = 'sa',\n    Sudan = 'sd',\n    Senegal = 'sn',\n    Singapore = 'sg',\n    SolomonIslands = 'sb',\n    SierraLeone = 'sl',\n    ElSalvador = 'sv',\n    SanMarino = 'sm',\n    Somalia = 'so',\n    Serbia = 'rs',\n    SouthSudan = 'ss',\n    SaoTomeAndPrincipe = 'st',\n    Suriname = 'sr',\n    Slovakia = 'sk',\n    Slovenia = 'si',\n    Sweden = 'se',\n    Eswatini = 'sz',\n    Seychelles = 'sc',\n    Syria = 'sy',\n    Chad = 'td',\n    Togo = 'tg',\n    Thailand = 'th',\n    Tajikistan = 'tj',\n    Turkmenistan = 'tm',\n    TimorLeste = 'tl',\n    Tonga = 'to',\n    TrinidadAndTobago = 'tt',\n    Tunisia = 'tn',\n    Turkey = 'tr',\n    Tuvalu = 'tv',\n    Tanzania = 'tz',\n    Uganda = 'ug',\n    Ukraine = 'ua',\n    Uruguay = 'uy',\n    UnitedStates = 'us',\n    Uzbekistan = 'uz',\n    VaticanCity = 'va',\n    SaintVincentAndTheGrenadines = 'vc',\n    Venezuela = 've',\n    Vietnam = 'vn',\n    Vanuatu = 'vu',\n    Samoa = 'ws',\n    Yemen = 'ye',\n    SouthAfrica = 'za',\n    Zambia = 'zm',\n    Zimbabwe = 'zw',\n}", "export enum ExecutionMethod {\n    GET = 'GET',\n    POST = 'POST',\n    PUT = 'PUT',\n    PATCH = 'PATCH',\n    DELETE = 'DELETE',\n    OPTIONS = 'OPTIONS',\n}", "export enum ImageGravity {\n    Center = 'center',\n    Topleft = 'top-left',\n    Top = 'top',\n    Topright = 'top-right',\n    Left = 'left',\n    Right = 'right',\n    Bottomleft = 'bottom-left',\n    Bottom = 'bottom',\n    Bottomright = 'bottom-right',\n}", "export enum ImageFormat {\n    Jpg = 'jpg',\n    Jpeg = 'jpeg',\n    Gif = 'gif',\n    Png = 'png',\n    Webp = 'webp',\n}", "import { Client, Account } from \"appwrite\";\n\nconst client = new Client();\n\nclient\n  .setEndpoint(\"https://cloud.appwrite.io/v1\")\n  .setProject(\"{{YOUR PROJECT ID}}\");\n\nexport const account = new Account(client);\nexport { ID } from \"appwrite\";\n", "import { Action } from \"@reduxjs/toolkit\";\nimport { filter, Observable, mergeMap, catchError, of } from \"rxjs\";\nimport { didGetUser, willGetUser } from \"../auth/authSlice\";\nimport { account } from \"../appwrite/appwrite\";\nimport { AppwriteException } from \"appwrite\";\n\nexport const authWillGetUser_authDidGetUser_epic = (\n  action$: Observable<Action>,\n) =>\n  action$.pipe(\n    filter((action) => willGetUser.match(action)),\n    mergeMap(async () => {\n      const currAccount = await account.get();\n      return didGetUser(currAccount);\n    }),\n    catchError((err) => {\n      let errAction: unknown;\n      if (err instanceof AppwriteException) {\n        const typedError: AppwriteException = err;\n        if (\n          typedError.code === 401 &&\n          typedError.type === \"general_unauthorized_scope\"\n        ) {\n          errAction = didGetUser(undefined);\n        } else {\n          errAction = {\n            type: \"error/appwriteException\",\n            errorDetails: err,\n          };\n        }\n      } else {\n        errAction = {\n          type: \"error/unexpectedType\",\n          errorDetails: err,\n        };\n        console.error(\n          `epic | authWillGetUser_authDidGetUser_epic | #error | Details: ${JSON.stringify(errAction)}`,\n        );\n      }\n      return of(errAction as Action);\n    }),\n  );\n", "import { Action } from \"@reduxjs/toolkit\";\nimport { filter, Observable, mergeMap, catchError, of } from \"rxjs\";\nimport { didGetLoginEmail, didGetUserId } from \"../auth/authSlice\";\nimport { account, ID } from \"../appwrite/appwrite\";\nimport { AppwriteException } from \"appwrite\";\n\nexport const authDidSetLoginEmail_authDidGetUserId_epic = (\n  action$: Observable<Action>,\n) =>\n  action$.pipe(\n    filter(\n      (action) =>\n        didGetLoginEmail.match(action) &&\n        typeof action.payload === \"string\" &&\n        action.payload.trim().length > 0,\n    ),\n    mergeMap(async ({ payload: email }) => {\n      const userId = await account.createEmailToken(ID.unique(), email);\n      return didGetUserId(userId.userId);\n    }),\n    catchError((err) => {\n      let errAction: unknown;\n      if (err instanceof AppwriteException) {\n        const typedError: AppwriteException = err;\n        if (\n          typedError.code === 400 &&\n          typedError.type === \"user_count_exceeded\"\n        ) {\n          errAction = {\n            type: \"auth/didGetAuthError\",\n            payload: {\n              errorMessage: `The provided email is not registered. Please contact the administrator to request access.`,\n              stage: \"login\",\n              type: \"didGetUnregisteredUser\",\n            },\n          };\n        } else {\n          errAction = {\n            type: \"error/appwriteException\",\n            errorDetails: err,\n          };\n        }\n      } else {\n        errAction = {\n          type: \"error/unexpectedType\",\n          errorDetails: err,\n        };\n        console.error(\n          `epic | authDidSetLoginEmail_authDidGetUserId_epic | #error | Details: ${JSON.stringify(errAction)}`,\n        );\n      }\n      return of(errAction as Action);\n    }),\n  );\n", "import { Action } from \"@reduxjs/toolkit\";\nimport { filter, Observable, mergeMap, catchError, of, switchAll } from \"rxjs\";\nimport { didCreateSession, willCreateSession } from \"../auth/authSlice\";\nimport { account, ID } from \"../appwrite/appwrite\";\nimport { AppwriteException } from \"appwrite\";\n\nexport const authWillCreateSession_authWillGetUser_epic = (\n  action$: Observable<Action>,\n) =>\n  action$.pipe(\n    filter(\n      (action) =>\n        willCreateSession.match(action) &&\n        action.payload &&\n        typeof action.payload.userId === \"string\" &&\n        typeof action.payload.otp === \"string\" &&\n        action.payload.otp.trim().length > 0,\n    ),\n    mergeMap(async ({ payload }) => {\n      const session = await account.createSession(payload.userId, payload.otp);\n      return didCreateSession(session);\n    }),\n    catchError((err) => {\n      let errAction: unknown;\n      if (err instanceof AppwriteException) {\n        errAction = {\n          type: \"error/appwriteException\",\n          errorDetails: err,\n        };\n      } else {\n        errAction = {\n          type: \"error/unexpectedType\",\n          errorDetails: err,\n        };\n        console.error(\n          `epic | authWillCreateSession_authWillGetUser_epic | #error | Details: ${JSON.stringify(errAction)}`,\n        );\n      }\n      return of(errAction as Action);\n    }),\n  );\n", "import { Action } from \"@reduxjs/toolkit\";\nimport { map, filter, Observable } from \"rxjs\";\nimport { didCreateSession, willGetUser } from \"../auth/authSlice\";\n\nexport const authDidCreateSession_authWillGetUser_epic = (\n  action$: Observable<Action>,\n) =>\n  action$.pipe(\n    filter((action) => didCreateSession.match(action)),\n    map(() => willGetUser()),\n  );\n", "import { configureStore } from \"@reduxjs/toolkit\";\nimport authReducer from \"../features/auth/authSlice\";\nimport { combineEpics, createEpicMiddleware, Epic } from \"redux-observable\";\nimport { appDidStart_authWillGetUser_epic } from \"../features/epics/appDidStart\";\nimport { authWillGetUser_authDidGetUser_epic } from \"../features/epics/authWillGetUser\";\nimport { authDidSetLoginEmail_authDidGetUserId_epic } from \"../features/epics/authDidGetLoginEmail\";\nimport { authWillCreateSession_authWillGetUser_epic } from \"../features/epics/authWillCreateSession\";\nimport { authDidCreateSession_authWillGetUser_epic } from \"../features/epics/authDidCreateSession\";\n\nconst epicMiddleware = createEpicMiddleware();\nexport const rootEpic = combineEpics(\n  appDidStart_authWillGetUser_epic,\n  authWillGetUser_authDidGetUser_epic,\n  authDidSetLoginEmail_authDidGetUserId_epic,\n  authWillCreateSession_authWillGetUser_epic,\n  authDidCreateSession_authWillGetUser_epic,\n);\n\nexport const reduxStore = configureStore({\n  reducer: {\n    auth: authReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(epicMiddleware),\n});\n// The next key is key for the epics' linking\nepicMiddleware.run(rootEpic as Epic<unknown, unknown, void, any>);\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof reduxStore.getState>;\n// Inferred type:\n// {auth: AuthState}\nexport type AppDispatch = typeof reduxStore.dispatch;\n\nexport const appDispatch = reduxStore.dispatch;\n", "import { onCleanup } from \"solid-js\";\nimport { createMutable, modifyMutable, reconcile } from \"solid-js/store\";\n\nexport default function useRedux(store) {\n  const currentState = store.getState();\n\n  const state = createMutable({ ...currentState });\n\n  const unsubscribe = store.subscribe(() => {\n    const newState = store.getState();\n    modifyMutable(state, reconcile(newState));\n  });\n  onCleanup(() => unsubscribe());\n  return state;\n}\n", "import { render } from \"solid-js/web\";\nimport { Route, Router } from \"@solidjs/router\";\nimport { lazy } from \"solid-js\";\n\nimport { StateProvider } from \"./features/store/StateProvider\";\nimport { reduxStore, appDispatch } from \"./app/reduxStore\";\nimport useRedux from \"./features/store/useRedux\";\n\n// import Home from \"./features/pages/Home\";\n// import LogIn from \"./features/pages/Login\";\n// import OTP from \"./features/pages/OTP\";\n// import Loading from \"./features/pages/Loading\";\n\nconst store = useRedux(reduxStore);\n// <StateProvider store={store}>\n//   <Router>\n//     <Route path=\"/login\" component={LogIn} />\n//     <Route path=\"/otp\" component={OTP} />\n//     <Route path=\"/code\" component={Home} />\n//     <Route path=\"/\" component={Loading} />\n//   </Router>\n// </StateProvider>\nrender(\n  () => (\n    <StateProvider store={store}>\n      <Router></Router>\n    </StateProvider>\n  ),\n  // @ts-ignore\n  document.getElementById(\"app\"),\n);\nappDispatch({\n  type: \"app/didStart\",\n});\n"],
  "mappings": "mBAsHA,IAAMA,EAAe,CACnB,QAAS,OACT,SAAU,OACV,KAAM,GACN,cAAe,CACb,OAAOC,GAAa,KAAK,QAAQ,KAAK,CACxC,EACA,kBAAmB,CACjB,OAAOA,GAAa,KAAK,QAAQ,OAAO,CAC1C,CACF,EACA,SAASA,GAAaC,EAAO,CAC3B,IAAMC,EAAM,OAAOD,CAAK,EACtBE,EAAMD,EAAI,OAAS,EACrB,OAAOH,EAAa,QAAQ,IAAMI,EAAM,OAAO,aAAa,GAAKA,CAAG,EAAI,IAAMD,CAChF,CACA,SAASE,GAAkBC,EAAS,CAClCN,EAAa,QAAUM,CACzB,CACA,SAASC,IAAqB,CAC5B,MAAO,CACL,GAAGP,EAAa,QAChB,GAAIA,EAAa,iBAAiB,EAClC,MAAO,CACT,CACF,CAEA,IAAMQ,GAAU,CAACC,EAAGC,IAAMD,IAAMC,EAC1BC,GAAS,OAAO,aAAa,EAC7BC,GAAS,OAAO,aAAa,EAC7BC,GAAW,OAAO,qBAAqB,EACvCC,GAAgB,CACpB,OAAQN,EACV,EACIO,GAAQ,KACRC,GAAaC,GACXC,EAAQ,EACRC,GAAU,EACVC,GAAU,CACd,MAAO,KACP,SAAU,KACV,QAAS,KACT,MAAO,IACT,EAEA,IAAIC,EAAQ,KACRC,EAAa,KACbC,GAAY,KACZC,GAAuB,KACvBC,EAAW,KACXC,EAAU,KACVC,EAAU,KACVC,GAAY,EAChB,SAASC,GAAWC,EAAIC,EAAe,CACrC,IAAMC,EAAWP,EACfQ,EAAQZ,EACRa,EAAUJ,EAAG,SAAW,EACxBK,EAAUJ,IAAkB,OAAYE,EAAQF,EAChDK,EAAOF,EACHG,GACA,CACE,MAAO,KACP,SAAU,KACV,QAASF,EAAUA,EAAQ,QAAU,KACrC,MAAOA,CACT,EACJG,EAAWJ,EAAUJ,EAAK,IAAMA,EAAG,IAAMS,EAAQ,IAAMC,GAAUJ,CAAI,CAAC,CAAC,EACzEf,EAAQe,EACRX,EAAW,KACX,GAAI,CACF,OAAOgB,EAAWH,EAAU,EAAI,CAClC,QAAE,CACAb,EAAWO,EACXX,EAAQY,CACV,CACF,CACA,SAASS,EAAaC,EAAOC,EAAS,CACpCA,EAAUA,EAAU,OAAO,OAAO,CAAC,EAAGC,GAAeD,CAAO,EAAIC,GAChE,IAAMC,EAAI,CACR,MAAAH,EACA,UAAW,KACX,cAAe,KACf,WAAYC,EAAQ,QAAU,MAChC,EACMG,EAASJ,IACT,OAAOA,GAAU,aACfrB,GAAcA,EAAW,SAAWA,EAAW,QAAQ,IAAIwB,CAAC,EAAGH,EAAQA,EAAMG,EAAE,MAAM,EACpFH,EAAQA,EAAMG,EAAE,KAAK,GAErBE,GAAYF,EAAGH,CAAK,GAE7B,MAAO,CAACM,GAAW,KAAKH,CAAC,EAAGC,CAAM,CACpC,CAMA,SAASG,GAAmBC,EAAIC,EAAOC,EAAS,CAC9C,IAAMC,EAAIC,GAAkBJ,EAAIC,EAAO,GAAOI,CAAK,EAC/CC,IAAaC,GAAcA,EAAW,QAASC,EAAQ,KAAKL,CAAC,EAC5DM,GAAkBN,CAAC,CAC1B,CA4BA,SAASO,EAAWC,EAAIC,EAAOC,EAAS,CACtCA,EAAUA,EAAU,OAAO,OAAO,CAAC,EAAGC,GAAeD,CAAO,EAAIC,GAChE,IAAMC,EAAIC,GAAkBL,EAAIC,EAAO,GAAM,CAAC,EAC9C,OAAAG,EAAE,UAAY,KACdA,EAAE,cAAgB,KAClBA,EAAE,WAAaF,EAAQ,QAAU,OAC7BI,IAAaC,GAAcA,EAAW,SACxCH,EAAE,OAASI,EACXC,EAAQ,KAAKL,CAAC,GACTM,GAAkBN,CAAC,EACnBO,GAAW,KAAKP,CAAC,CAC1B,CAgOA,SAASQ,GAAMC,EAAI,CACjB,OAAOC,EAAWD,EAAI,EAAK,CAC7B,CACA,SAASE,EAAQF,EAAI,CACnB,GAAI,CAACG,IAAwBC,IAAa,KAAM,OAAOJ,EAAG,EAC1D,IAAMK,EAAWD,EACjBA,EAAW,KACX,GAAI,CACF,OAAID,GAA6BA,GAAqB,QAAQH,CAAE,EACzDA,EAAG,CACZ,QAAE,CACAI,EAAWC,CACb,CACF,CACA,SAASC,GAAGC,EAAMP,EAAIQ,EAAS,CAC7B,IAAMC,EAAU,MAAM,QAAQF,CAAI,EAC9BG,EACAC,EAAQH,GAAWA,EAAQ,MAC/B,OAAOI,GAAa,CAClB,IAAIC,EACJ,GAAIJ,EAAS,CACXI,EAAQ,MAAMN,EAAK,MAAM,EACzB,QAASO,EAAI,EAAGA,EAAIP,EAAK,OAAQO,IAAKD,EAAMC,CAAC,EAAIP,EAAKO,CAAC,EAAE,CAC3D,MAAOD,EAAQN,EAAK,EACpB,GAAII,EACF,OAAAA,EAAQ,GACDC,EAET,IAAMG,EAASb,EAAQ,IAAMF,EAAGa,EAAOH,EAAWE,CAAS,CAAC,EAC5D,OAAAF,EAAYG,EACLE,CACT,CACF,CAIA,SAASC,GAAUC,EAAI,CACrB,OAAIC,IAAU,OACLA,EAAM,WAAa,KAAMA,EAAM,SAAW,CAACD,CAAE,EACjDC,EAAM,SAAS,KAAKD,CAAE,GACpBA,CACT,CAiBA,SAASE,IAAc,CACrB,OAAOC,CACT,CACA,SAASC,IAAW,CAClB,OAAOC,CACT,CACA,SAASC,GAAaC,EAAGC,EAAI,CAC3B,IAAMC,EAAOJ,EACPK,EAAeP,EACrBE,EAAQE,EACRJ,EAAW,KACX,GAAI,CACF,OAAOQ,EAAWH,EAAI,EAAI,CAC5B,OAASI,EAAK,CACZC,GAAYD,CAAG,CACjB,QAAE,CACAP,EAAQI,EACRN,EAAWO,CACb,CACF,CAIA,SAASI,GAAgBC,EAAI,CAC3B,GAAIC,GAAcA,EAAW,QAC3B,OAAAD,EAAG,EACIC,EAAW,KAEpB,IAAMC,EAAIC,EACJC,EAAIC,EACV,OAAO,QAAQ,QAAQ,EAAE,KAAK,IAAM,CAClCF,EAAWD,EACXG,EAAQD,EACR,IAAIE,EACJ,OAAIC,IAAaC,MACfF,EACEL,IACCA,EAAa,CACZ,QAAS,IAAI,IACb,QAAS,CAAC,EACV,SAAU,IAAI,IACd,SAAU,IAAI,IACd,MAAO,IAAI,IACX,QAAS,EACX,GACFK,EAAE,OAASA,EAAE,KAAO,IAAI,QAAQG,GAAQH,EAAE,QAAUG,CAAI,GACxDH,EAAE,QAAU,IAEdI,EAAWV,EAAI,EAAK,EACpBG,EAAWE,EAAQ,KACZC,EAAIA,EAAE,KAAO,MACtB,CAAC,CACH,CACA,GAAM,CAACK,GAAcC,EAAe,EAAkBC,EAAa,EAAK,EAQxE,SAASC,GAAcC,EAAcC,EAAS,CAC5C,IAAMC,EAAK,OAAO,SAAS,EAC3B,MAAO,CACL,GAAAA,EACA,SAAUC,GAAeD,CAAE,EAC3B,aAAAF,CACF,CACF,CACA,SAASI,GAAWC,EAAS,CAC3B,IAAIC,EACJ,OAAOC,GAASA,EAAM,UAAYD,EAAQC,EAAM,QAAQF,EAAQ,EAAE,KAAO,OACrEC,EACAD,EAAQ,YACd,CACA,SAASG,GAASC,EAAI,CACpB,IAAMD,EAAWE,EAAWD,CAAE,EACxBE,EAAOD,EAAW,IAAME,GAAgBJ,EAAS,CAAC,CAAC,EACzD,OAAAG,EAAK,QAAU,IAAM,CACnB,IAAME,EAAIF,EAAK,EACf,OAAO,MAAM,QAAQE,CAAC,EAAIA,EAAIA,GAAK,KAAO,CAACA,CAAC,EAAI,CAAC,CACnD,EACOF,CACT,CACA,IAAIG,GA4BJ,SAASC,IAAa,CACpB,IAAMC,EAAoBC,GAAcA,EAAW,QACnD,GAAI,KAAK,UAAYD,EAAoB,KAAK,OAAS,KAAK,OAC1D,IAAKA,EAAoB,KAAK,OAAS,KAAK,SAAWE,EAAOC,GAAkB,IAAI,MAC/E,CACH,IAAMC,EAAUC,EAChBA,EAAU,KACVC,EAAW,IAAMC,GAAa,IAAI,EAAG,EAAK,EAC1CF,EAAUD,CACZ,CAEF,GAAII,EAAU,CACZ,IAAMC,EAAQ,KAAK,UAAY,KAAK,UAAU,OAAS,EAClDD,EAAS,SAIZA,EAAS,QAAQ,KAAK,IAAI,EAC1BA,EAAS,YAAY,KAAKC,CAAK,IAJ/BD,EAAS,QAAU,CAAC,IAAI,EACxBA,EAAS,YAAc,CAACC,CAAK,GAK1B,KAAK,WAIR,KAAK,UAAU,KAAKD,CAAQ,EAC5B,KAAK,cAAc,KAAKA,EAAS,QAAQ,OAAS,CAAC,IAJnD,KAAK,UAAY,CAACA,CAAQ,EAC1B,KAAK,cAAgB,CAACA,EAAS,QAAQ,OAAS,CAAC,EAKrD,CACA,OAAIR,GAAqBC,EAAW,QAAQ,IAAI,IAAI,EAAU,KAAK,OAC5D,KAAK,KACd,CACA,SAASS,GAAYC,EAAMC,EAAOC,EAAQ,CACxC,IAAIC,EACFb,GAAcA,EAAW,SAAWA,EAAW,QAAQ,IAAIU,CAAI,EAAIA,EAAK,OAASA,EAAK,MACxF,GAAI,CAACA,EAAK,YAAc,CAACA,EAAK,WAAWG,EAASF,CAAK,EAAG,CACxD,GAAIX,EAAY,CACd,IAAMc,EAAoBd,EAAW,SACjCc,GAAsB,CAACF,GAAUZ,EAAW,QAAQ,IAAIU,CAAI,KAC9DV,EAAW,QAAQ,IAAIU,CAAI,EAC3BA,EAAK,OAASC,GAEXG,IAAmBJ,EAAK,MAAQC,EACvC,MAAOD,EAAK,MAAQC,EAChBD,EAAK,WAAaA,EAAK,UAAU,QACnCL,EAAW,IAAM,CACf,QAASU,EAAI,EAAGA,EAAIL,EAAK,UAAU,OAAQK,GAAK,EAAG,CACjD,IAAMC,EAAIN,EAAK,UAAUK,CAAC,EACpBD,EAAoBd,GAAcA,EAAW,QAC/Cc,GAAqBd,EAAW,SAAS,IAAIgB,CAAC,KAC9CF,EAAoB,CAACE,EAAE,OAAS,CAACA,EAAE,SACjCA,EAAE,KAAMZ,EAAQ,KAAKY,CAAC,EACrBC,EAAQ,KAAKD,CAAC,EACfA,EAAE,WAAWE,GAAeF,CAAC,GAE9BF,EACAE,EAAE,OAASf,EADQe,EAAE,MAAQf,EAEpC,CACA,GAAIG,EAAQ,OAAS,IACnB,MAAAA,EAAU,CAAC,EAEL,IAAI,KAEd,EAAG,EAAK,CAEZ,CACA,OAAOO,CACT,CACA,SAAST,GAAkBQ,EAAM,CAC/B,GAAI,CAACA,EAAK,GAAI,OACdS,GAAUT,CAAI,EACd,IAAMU,EAAOC,GACbC,GACEZ,EACAV,GAAcA,EAAW,SAAWA,EAAW,QAAQ,IAAIU,CAAI,EAAIA,EAAK,OAASA,EAAK,MACtFU,CACF,EACIpB,GAAc,CAACA,EAAW,SAAWA,EAAW,QAAQ,IAAIU,CAAI,GAClE,eAAe,IAAM,CACnBL,EAAW,IAAM,CACfL,IAAeA,EAAW,QAAU,IACpCO,EAAWgB,EAAQb,EACnBY,GAAeZ,EAAMA,EAAK,OAAQU,CAAI,EACtCb,EAAWgB,EAAQ,IACrB,EAAG,EAAK,CACV,CAAC,CAEL,CACA,SAASD,GAAeZ,EAAMC,EAAOS,EAAM,CACzC,IAAII,EACEC,EAAQF,EACZG,EAAWnB,EACbA,EAAWgB,EAAQb,EACnB,GAAI,CACFc,EAAYd,EAAK,GAAGC,CAAK,CAC3B,OAASgB,EAAK,CACZ,OAAIjB,EAAK,OACHV,GAAcA,EAAW,SAC3BU,EAAK,OAAST,EACdS,EAAK,QAAUA,EAAK,OAAO,QAAQS,EAAS,EAC5CT,EAAK,OAAS,SAEdA,EAAK,MAAQT,EACbS,EAAK,OAASA,EAAK,MAAM,QAAQS,EAAS,EAC1CT,EAAK,MAAQ,OAGjBA,EAAK,UAAYU,EAAO,EACjBQ,GAAYD,CAAG,CACxB,QAAE,CACApB,EAAWmB,EACXH,EAAQE,CACV,EACI,CAACf,EAAK,WAAaA,EAAK,WAAaU,KACnCV,EAAK,WAAa,MAAQ,cAAeA,EAC3CD,GAAYC,EAAMc,EAAW,EAAI,EACxBxB,GAAcA,EAAW,SAAWU,EAAK,MAClDV,EAAW,QAAQ,IAAIU,CAAI,EAC3BA,EAAK,OAASc,GACTd,EAAK,MAAQc,EACpBd,EAAK,UAAYU,EAErB,CACA,SAASS,GAAkBC,EAAIC,EAAMC,EAAMC,EAAQhC,EAAOiC,EAAS,CACjE,IAAMC,EAAI,CACR,GAAAL,EACA,MAAOG,EACP,UAAW,KACX,MAAO,KACP,QAAS,KACT,YAAa,KACb,SAAU,KACV,MAAOF,EACP,MAAOR,EACP,QAASA,EAAQA,EAAM,QAAU,KACjC,KAAAS,CACF,EAeA,GAdIhC,GAAcA,EAAW,UAC3BmC,EAAE,MAAQ,EACVA,EAAE,OAASF,GAETV,IAAU,MACLA,IAAUa,KACbpC,GAAcA,EAAW,SAAWuB,EAAM,KACvCA,EAAM,OACNA,EAAM,OAAO,KAAKY,CAAC,EADLZ,EAAM,OAAS,CAACY,CAAC,EAG/BZ,EAAM,MACNA,EAAM,MAAM,KAAKY,CAAC,EADLZ,EAAM,MAAQ,CAACY,CAAC,GAIlCE,IAAwBF,EAAE,GAAI,CAChC,GAAM,CAACG,EAAOC,CAAO,EAAIC,EAAa,OAAW,CAC/C,OAAQ,EACV,CAAC,EACKC,EAAWJ,GAAqB,QAAQF,EAAE,GAAII,CAAO,EAC3DG,GAAU,IAAMD,EAAS,QAAQ,CAAC,EAClC,IAAME,EAAsB,IAAMC,GAAgBL,CAAO,EAAE,KAAK,IAAMM,EAAa,QAAQ,CAAC,EACtFA,EAAeR,GAAqB,QAAQF,EAAE,GAAIQ,CAAmB,EAC3ER,EAAE,GAAKW,IACLR,EAAM,EACCtC,GAAcA,EAAW,QAAU6C,EAAa,MAAMC,CAAC,EAAIL,EAAS,MAAMK,CAAC,EAEtF,CACA,OAAOX,CACT,CACA,SAASY,GAAOrC,EAAM,CACpB,IAAMX,EAAoBC,GAAcA,EAAW,QACnD,IAAKD,EAAoBW,EAAK,OAASA,EAAK,SAAW,EAAG,OAC1D,IAAKX,EAAoBW,EAAK,OAASA,EAAK,SAAWsC,GAAS,OAAO1C,GAAaI,CAAI,EACxF,GAAIA,EAAK,UAAYuC,EAAQvC,EAAK,SAAS,UAAU,EAAG,OAAOA,EAAK,SAAS,QAAQ,KAAKA,CAAI,EAC9F,IAAMwC,EAAY,CAACxC,CAAI,EACvB,MAAQA,EAAOA,EAAK,SAAW,CAACA,EAAK,WAAaA,EAAK,UAAYW,KAAY,CAC7E,GAAItB,GAAqBC,EAAW,SAAS,IAAIU,CAAI,EAAG,QACpDX,EAAoBW,EAAK,OAASA,EAAK,QAAOwC,EAAU,KAAKxC,CAAI,CACvE,CACA,QAASK,EAAImC,EAAU,OAAS,EAAGnC,GAAK,EAAGA,IAAK,CAE9C,GADAL,EAAOwC,EAAUnC,CAAC,EACdhB,EAAmB,CACrB,IAAIoD,EAAMzC,EACR0C,EAAOF,EAAUnC,EAAI,CAAC,EACxB,MAAQoC,EAAMA,EAAI,QAAUA,IAAQC,GAClC,GAAIpD,EAAW,SAAS,IAAImD,CAAG,EAAG,MAEtC,CACA,IAAKpD,EAAoBW,EAAK,OAASA,EAAK,SAAWT,EACrDC,GAAkBQ,CAAI,WACZX,EAAoBW,EAAK,OAASA,EAAK,SAAWsC,GAAS,CACrE,IAAM7C,EAAUC,EAChBA,EAAU,KACVC,EAAW,IAAMC,GAAaI,EAAMwC,EAAU,CAAC,CAAC,EAAG,EAAK,EACxD9C,EAAUD,CACZ,CACF,CACF,CACA,SAASE,EAAWyB,EAAIC,EAAM,CAC5B,GAAI3B,EAAS,OAAO0B,EAAG,EACvB,IAAIuB,EAAO,GACNtB,IAAM3B,EAAU,CAAC,GAClBa,EAASoC,EAAO,GACfpC,EAAU,CAAC,EAChBI,KACA,GAAI,CACF,IAAMiC,EAAMxB,EAAG,EACf,OAAAyB,GAAgBF,CAAI,EACbC,CACT,OAAS3B,EAAK,CACP0B,IAAMpC,EAAU,MACrBb,EAAU,KACVwB,GAAYD,CAAG,CACjB,CACF,CACA,SAAS4B,GAAgBF,EAAM,CAM7B,GALIjD,IACEoD,IAAaxD,GAAcA,EAAW,QAASyD,GAAcrD,CAAO,EACnEsD,GAAStD,CAAO,EACrBA,EAAU,MAERiD,EAAM,OACV,IAAIC,EACJ,GAAItD,GACF,GAAI,CAACA,EAAW,SAAS,MAAQ,CAACA,EAAW,MAAM,KAAM,CACvD,IAAM2D,EAAU3D,EAAW,QACrB4D,EAAW5D,EAAW,SAC5BiB,EAAQ,KAAK,MAAMA,EAASjB,EAAW,OAAO,EAC9CsD,EAAMtD,EAAW,QACjB,QAAW6D,KAAK5C,EACd,WAAY4C,IAAMA,EAAE,MAAQA,EAAE,QAC9B,OAAOA,EAAE,OAEX7D,EAAa,KACbK,EAAW,IAAM,CACf,QAAWyD,KAAKF,EAAUzC,GAAU2C,CAAC,EACrC,QAAWC,KAAKJ,EAAS,CAEvB,GADAI,EAAE,MAAQA,EAAE,OACRA,EAAE,MACJ,QAAShD,EAAI,EAAGiD,EAAMD,EAAE,MAAM,OAAQhD,EAAIiD,EAAKjD,IAAKI,GAAU4C,EAAE,MAAMhD,CAAC,CAAC,EAEtEgD,EAAE,SAAQA,EAAE,MAAQA,EAAE,QAC1B,OAAOA,EAAE,OACT,OAAOA,EAAE,OACTA,EAAE,OAAS,CACb,CACAE,GAAgB,EAAK,CACvB,EAAG,EAAK,CACV,SAAWjE,EAAW,QAAS,CAC7BA,EAAW,QAAU,GACrBA,EAAW,QAAQ,KAAK,MAAMA,EAAW,QAASiB,CAAO,EACzDA,EAAU,KACVgD,GAAgB,EAAI,EACpB,MACF,EAEF,IAAMJ,EAAI5C,EACVA,EAAU,KACN4C,EAAE,QAAQxD,EAAW,IAAM6D,GAAWL,CAAC,EAAG,EAAK,EAC/CP,GAAKA,EAAI,CACf,CACA,SAASI,GAASS,EAAO,CACvB,QAASpD,EAAI,EAAGA,EAAIoD,EAAM,OAAQpD,IAAKgC,GAAOoB,EAAMpD,CAAC,CAAC,CACxD,CACA,SAAS0C,GAAcU,EAAO,CAC5B,QAASpD,EAAI,EAAGA,EAAIoD,EAAM,OAAQpD,IAAK,CACrC,IAAMqD,EAAOD,EAAMpD,CAAC,EACdsD,EAAQrE,EAAW,MACpBqE,EAAM,IAAID,CAAI,IACjBC,EAAM,IAAID,CAAI,EACdZ,GAAU,IAAM,CACda,EAAM,OAAOD,CAAI,EACjB/D,EAAW,IAAM,CACfL,EAAW,QAAU,GACrB+C,GAAOqB,CAAI,CACb,EAAG,EAAK,EACRpE,IAAeA,EAAW,QAAU,GACtC,CAAC,EAEL,CACF,CAuBA,SAASsE,GAAaC,EAAMC,EAAQ,CAClC,IAAMC,EAAoBC,GAAcA,EAAW,QAC/CD,EAAmBF,EAAK,OAAS,EAChCA,EAAK,MAAQ,EAClB,QAASI,EAAI,EAAGA,EAAIJ,EAAK,QAAQ,OAAQI,GAAK,EAAG,CAC/C,IAAMC,EAASL,EAAK,QAAQI,CAAC,EAC7B,GAAIC,EAAO,QAAS,CAClB,IAAMC,EAAQJ,EAAoBG,EAAO,OAASA,EAAO,MACrDC,IAAUC,EACRF,IAAWJ,IAAW,CAACI,EAAO,WAAaA,EAAO,UAAYG,KAChEC,GAAOJ,CAAM,EACNC,IAAUI,IAASX,GAAaM,EAAQJ,CAAM,CAC3D,CACF,CACF,CACA,SAASU,GAAeX,EAAM,CAC5B,IAAME,EAAoBC,GAAcA,EAAW,QACnD,QAASC,EAAI,EAAGA,EAAIJ,EAAK,UAAU,OAAQI,GAAK,EAAG,CACjD,IAAMQ,EAAIZ,EAAK,UAAUI,CAAC,GACtBF,EAAoB,CAACU,EAAE,OAAS,CAACA,EAAE,SACjCV,EAAmBU,EAAE,OAASF,GAC7BE,EAAE,MAAQF,GACXE,EAAE,KAAMC,EAAQ,KAAKD,CAAC,EACrBE,EAAQ,KAAKF,CAAC,EACnBA,EAAE,WAAaD,GAAeC,CAAC,EAEnC,CACF,CACA,SAASG,GAAUf,EAAM,CACvB,IAAII,EACJ,GAAIJ,EAAK,QACP,KAAOA,EAAK,QAAQ,QAAQ,CAC1B,IAAMK,EAASL,EAAK,QAAQ,IAAI,EAC9BgB,EAAQhB,EAAK,YAAY,IAAI,EAC7BiB,EAAMZ,EAAO,UACf,GAAIY,GAAOA,EAAI,OAAQ,CACrB,IAAMC,EAAID,EAAI,IAAI,EAChB,EAAIZ,EAAO,cAAc,IAAI,EAC3BW,EAAQC,EAAI,SACdC,EAAE,YAAY,CAAC,EAAIF,EACnBC,EAAID,CAAK,EAAIE,EACbb,EAAO,cAAcW,CAAK,EAAI,EAElC,CACF,CAEF,GAAIb,GAAcA,EAAW,SAAWH,EAAK,KAAM,CACjD,GAAIA,EAAK,OAAQ,CACf,IAAKI,EAAIJ,EAAK,OAAO,OAAS,EAAGI,GAAK,EAAGA,IAAKW,GAAUf,EAAK,OAAOI,CAAC,CAAC,EACtE,OAAOJ,EAAK,MACd,CACAmB,GAAMnB,EAAM,EAAI,CAClB,SAAWA,EAAK,MAAO,CACrB,IAAKI,EAAIJ,EAAK,MAAM,OAAS,EAAGI,GAAK,EAAGA,IAAKW,GAAUf,EAAK,MAAMI,CAAC,CAAC,EACpEJ,EAAK,MAAQ,IACf,CACA,GAAIA,EAAK,SAAU,CACjB,IAAKI,EAAIJ,EAAK,SAAS,OAAS,EAAGI,GAAK,EAAGA,IAAKJ,EAAK,SAASI,CAAC,EAAE,EACjEJ,EAAK,SAAW,IAClB,CACIG,GAAcA,EAAW,QAASH,EAAK,OAAS,EAC/CA,EAAK,MAAQ,CACpB,CACA,SAASmB,GAAMnB,EAAMoB,EAAK,CAKxB,GAJKA,IACHpB,EAAK,OAAS,EACdG,EAAW,SAAS,IAAIH,CAAI,GAE1BA,EAAK,MACP,QAASI,EAAI,EAAGA,EAAIJ,EAAK,MAAM,OAAQI,IAAKe,GAAMnB,EAAK,MAAMI,CAAC,CAAC,CAEnE,CACA,SAASiB,GAAUC,EAAK,CACtB,OAAIA,aAAe,MAAcA,EAC1B,IAAI,MAAM,OAAOA,GAAQ,SAAWA,EAAM,gBAAiB,CAChE,MAAOA,CACT,CAAC,CACH,CACA,SAASC,GAAUD,EAAKE,EAAKC,EAAO,CAClC,GAAI,CACF,QAAWC,KAAKF,EAAKE,EAAEJ,CAAG,CAC5B,OAASK,EAAG,CACVC,GAAYD,EAAIF,GAASA,EAAM,OAAU,IAAI,CAC/C,CACF,CACA,SAASG,GAAYN,EAAKG,EAAQI,EAAO,CACvC,IAAML,EAAMM,IAASL,GAASA,EAAM,SAAWA,EAAM,QAAQK,EAAK,EAC5DC,EAAQV,GAAUC,CAAG,EAC3B,GAAI,CAACE,EAAK,MAAMO,EACZjB,EACFA,EAAQ,KAAK,CACX,IAAK,CACHS,GAAUQ,EAAOP,EAAKC,CAAK,CAC7B,EACA,MAAOlB,CACT,CAAC,EACEgB,GAAUQ,EAAOP,EAAKC,CAAK,CAClC,CACA,SAASO,GAAgBC,EAAU,CACjC,GAAI,OAAOA,GAAa,YAAc,CAACA,EAAS,OAAQ,OAAOD,GAAgBC,EAAS,CAAC,EACzF,GAAI,MAAM,QAAQA,CAAQ,EAAG,CAC3B,IAAMC,EAAU,CAAC,EACjB,QAAS9B,EAAI,EAAGA,EAAI6B,EAAS,OAAQ7B,IAAK,CACxC,IAAM+B,EAASH,GAAgBC,EAAS7B,CAAC,CAAC,EAC1C,MAAM,QAAQ+B,CAAM,EAAID,EAAQ,KAAK,MAAMA,EAASC,CAAM,EAAID,EAAQ,KAAKC,CAAM,CACnF,CACA,OAAOD,CACT,CACA,OAAOD,CACT,CACA,SAASG,GAAeC,EAAIC,EAAS,CACnC,OAAO,SAAkBC,EAAO,CAC9B,IAAIC,EACJ,OAAAC,GACE,IACGD,EAAME,EAAQ,KACbb,EAAM,QAAU,CACd,GAAGA,EAAM,QACT,CAACQ,CAAE,EAAGE,EAAM,KACd,EACON,GAAS,IAAMM,EAAM,QAAQ,EACrC,EACH,MACF,EACOC,CACT,CACF,CAyEA,IAAMG,GAAW,OAAO,UAAU,EAwKlC,IAAIC,GAAmB,GAIvB,SAASC,EAAgBC,EAAMC,EAAO,CACpC,GAAIC,IACEC,EAAa,QAAS,CACxB,IAAMC,EAAID,EAAa,QACvBE,GAAkBC,GAAmB,CAAC,EACtC,IAAM,EAAIC,EAAQ,IAAMP,EAAKC,GAAS,CAAC,CAAC,CAAC,EACzC,OAAAI,GAAkBD,CAAC,EACZ,CACT,CAEF,OAAOG,EAAQ,IAAMP,EAAKC,GAAS,CAAC,CAAC,CAAC,CACxC,CAwNA,IAAMO,GAAgBC,GAAQ,oBAAoBA,CAAI,KAatD,SAASC,GAAKC,EAAO,CACnB,IAAMC,EAAQD,EAAM,MACdE,EAAYC,EAAW,IAAMH,EAAM,KAAM,OAAW,CACxD,OAAQ,CAACI,EAAGC,IAAOJ,EAAQG,IAAMC,EAAI,CAACD,GAAM,CAACC,CAC/C,CAAC,EACD,OAAOF,EACL,IAAM,CACJ,IAAMG,EAAIJ,EAAU,EACpB,GAAII,EAAG,CACL,IAAMC,EAAQP,EAAM,SAEpB,OADW,OAAOO,GAAU,YAAcA,EAAM,OAAS,EAErDC,EAAQ,IACND,EACEN,EACIK,EACA,IAAM,CACJ,GAAI,CAACE,EAAQN,CAAS,EAAG,MAAMO,GAAc,MAAM,EACnD,OAAOT,EAAM,IACf,CACN,CACF,EACAO,CACN,CACA,OAAOP,EAAM,QACf,EACA,OACA,MACF,CACF,CAiDA,IAAIU,GACJ,SAASC,IAAuB,CAC9BD,IAAU,CAAC,GAAGA,EAAM,EAAE,QAAQE,GAAMA,EAAG,CAAC,CAC1C,CC7kDA,IAAMC,GAAW,CACf,kBACA,QACA,YACA,WACA,UACA,WACA,UACA,WACA,iBACA,SACA,gBACA,QACA,QACA,OACA,WACA,QACA,WACA,aACA,OACA,cACA,WACA,WACA,WACA,WACA,UACF,EACMC,GAA2B,IAAI,IAAI,CACvC,YACA,QACA,WACA,iBACA,QACA,WACA,cACA,GAAGD,EACL,CAAC,EA6aD,SAASE,GAAgBC,EAAYC,EAAGC,EAAG,CACzC,IAAIC,EAAUD,EAAE,OACdE,EAAOH,EAAE,OACTI,EAAOF,EACPG,EAAS,EACTC,EAAS,EACTC,EAAQP,EAAEG,EAAO,CAAC,EAAE,YACpBK,EAAM,KACR,KAAOH,EAASF,GAAQG,EAASF,GAAM,CACrC,GAAIJ,EAAEK,CAAM,IAAMJ,EAAEK,CAAM,EAAG,CAC3BD,IACAC,IACA,QACF,CACA,KAAON,EAAEG,EAAO,CAAC,IAAMF,EAAEG,EAAO,CAAC,GAC/BD,IACAC,IAEF,GAAID,IAASE,EAAQ,CACnB,IAAMI,EAAOL,EAAOF,EAAWI,EAASL,EAAEK,EAAS,CAAC,EAAE,YAAcL,EAAEG,EAAOE,CAAM,EAAKC,EACxF,KAAOD,EAASF,GAAML,EAAW,aAAaE,EAAEK,GAAQ,EAAGG,CAAI,CACjE,SAAWL,IAASE,EAClB,KAAOD,EAASF,IACV,CAACK,GAAO,CAACA,EAAI,IAAIR,EAAEK,CAAM,CAAC,IAAGL,EAAEK,CAAM,EAAE,OAAO,EAClDA,YAEOL,EAAEK,CAAM,IAAMJ,EAAEG,EAAO,CAAC,GAAKH,EAAEK,CAAM,IAAMN,EAAEG,EAAO,CAAC,EAAG,CACjE,IAAMM,EAAOT,EAAE,EAAEG,CAAI,EAAE,YACvBJ,EAAW,aAAaE,EAAEK,GAAQ,EAAGN,EAAEK,GAAQ,EAAE,WAAW,EAC5DN,EAAW,aAAaE,EAAE,EAAEG,CAAI,EAAGK,CAAI,EACvCT,EAAEG,CAAI,EAAIF,EAAEG,CAAI,CAClB,KAAO,CACL,GAAI,CAACI,EAAK,CACRA,EAAM,IAAI,IACV,IAAIE,EAAIJ,EACR,KAAOI,EAAIN,GAAMI,EAAI,IAAIP,EAAES,CAAC,EAAGA,GAAG,CACpC,CACA,IAAMC,EAAQH,EAAI,IAAIR,EAAEK,CAAM,CAAC,EAC/B,GAAIM,GAAS,KACX,GAAIL,EAASK,GAASA,EAAQP,EAAM,CAClC,IAAIM,EAAIL,EACNO,EAAW,EACXC,EACF,KAAO,EAAEH,EAAIP,GAAQO,EAAIN,GAClB,GAAAS,EAAIL,EAAI,IAAIR,EAAEU,CAAC,CAAC,IAAM,MAAQG,IAAMF,EAAQC,IACjDA,IAEF,GAAIA,EAAWD,EAAQL,EAAQ,CAC7B,IAAMG,EAAOT,EAAEK,CAAM,EACrB,KAAOC,EAASK,GAAOZ,EAAW,aAAaE,EAAEK,GAAQ,EAAGG,CAAI,CAClE,MAAOV,EAAW,aAAaE,EAAEK,GAAQ,EAAGN,EAAEK,GAAQ,CAAC,CACzD,MAAOA,SACFL,EAAEK,GAAQ,EAAE,OAAO,CAC5B,CACF,CACF,CAEA,IAAMS,GAAW,gBACjB,SAASC,GAAOC,EAAMC,EAASC,EAAMC,EAAU,CAAC,EAAG,CACjD,IAAIC,EACJ,OAAAC,GAAWC,GAAW,CACpBF,EAAWE,EACXL,IAAY,SACRD,EAAK,EACLO,GAAON,EAASD,EAAK,EAAGC,EAAQ,WAAa,KAAO,OAAWC,CAAI,CACzE,EAAGC,EAAQ,KAAK,EACT,IAAM,CACXC,EAAS,EACTH,EAAQ,YAAc,EACxB,CACF,CAcA,SAASO,GAAeC,EAAYC,EAAW,OAAO,SAAU,CAC9D,IAAMC,EAAID,EAASE,EAAQ,IAAMF,EAASE,EAAQ,EAAI,IAAI,KAC1D,QAASC,EAAI,EAAGC,EAAIL,EAAW,OAAQI,EAAIC,EAAGD,IAAK,CACjD,IAAME,EAAON,EAAWI,CAAC,EACpBF,EAAE,IAAII,CAAI,IACbJ,EAAE,IAAII,CAAI,EACVL,EAAS,iBAAiBK,EAAMC,EAAY,EAEhD,CACF,CAqGA,SAASC,GAAOC,EAAQC,EAAUC,EAAQC,EAAS,CAEjD,GADID,IAAW,QAAa,CAACC,IAASA,EAAU,CAAC,GAC7C,OAAOF,GAAa,WAAY,OAAOG,GAAiBJ,EAAQC,EAAUE,EAASD,CAAM,EAC7FG,GAAmBC,GAAWF,GAAiBJ,EAAQC,EAAS,EAAGK,EAASJ,CAAM,EAAGC,CAAO,CAC9F,CA2FA,SAASI,GAAYC,EAAM,CACzB,MAAO,CAAC,CAACC,EAAa,SAAW,CAACA,EAAa,OAAS,CAACD,GAAQA,EAAK,YACxE,CA0DA,SAASE,GAAa,EAAG,CACvB,GAAIC,EAAa,UAAYA,EAAa,QACpCA,EAAa,OAAO,KAAK,CAAC,CAACC,EAAIC,CAAE,IAAMA,IAAO,CAAC,EAAG,OAExD,IAAMC,EAAM,KAAK,EAAE,IAAI,GACnBC,EAAQ,EAAE,cAAgB,EAAE,aAAa,EAAE,CAAC,GAAM,EAAE,OAcxD,IAbI,EAAE,SAAWA,GACf,OAAO,eAAe,EAAG,SAAU,CACjC,aAAc,GACd,MAAOA,CACT,CAAC,EAEH,OAAO,eAAe,EAAG,gBAAiB,CACxC,aAAc,GACd,KAAM,CACJ,OAAOA,GAAQ,QACjB,CACF,CAAC,EACGJ,EAAa,UAAY,CAACA,EAAa,OAAMA,EAAa,KAAO,KAAK,KAAO,IAC1EI,GAAM,CACX,IAAMC,EAAUD,EAAKD,CAAG,EACxB,GAAIE,GAAW,CAACD,EAAK,SAAU,CAC7B,IAAME,EAAOF,EAAK,GAAGD,CAAG,MAAM,EAE9B,GADAG,IAAS,OAAYD,EAAQ,KAAKD,EAAME,EAAM,CAAC,EAAID,EAAQ,KAAKD,EAAM,CAAC,EACnE,EAAE,aAAc,MACtB,CACAA,EAAOA,EAAK,QAAUA,EAAK,YAAcA,EAAK,IAChD,CACF,CACA,SAASG,GAAiBC,EAAQC,EAAOC,EAASC,EAAQC,EAAa,CACrE,IAAMC,EAAYC,GAAYN,CAAM,EACpC,GAAIK,EAAW,CACb,CAACH,IAAYA,EAAU,CAAC,GAAGF,EAAO,UAAU,GAC5C,IAAIO,EAAU,CAAC,EACf,QAASC,EAAI,EAAGA,EAAIN,EAAQ,OAAQM,IAAK,CACvC,IAAMZ,EAAOM,EAAQM,CAAC,EAClBZ,EAAK,WAAa,GAAKA,EAAK,KAAK,MAAM,EAAG,CAAC,IAAM,KAAMA,EAAK,OAAO,EAClEW,EAAQ,KAAKX,CAAI,CACxB,CACAM,EAAUK,CACZ,CACA,KAAO,OAAOL,GAAY,YAAYA,EAAUA,EAAQ,EACxD,GAAID,IAAUC,EAAS,OAAOA,EAC9B,IAAMO,EAAI,OAAOR,EACfS,EAAQP,IAAW,OAErB,GADAH,EAAUU,GAASR,EAAQ,CAAC,GAAKA,EAAQ,CAAC,EAAE,YAAeF,EACvDS,IAAM,UAAYA,IAAM,SAAU,CAEpC,GADIJ,GACAI,IAAM,WACRR,EAAQA,EAAM,SAAS,EACnBA,IAAUC,GAAS,OAAOA,EAEhC,GAAIQ,EAAO,CACT,IAAId,EAAOM,EAAQ,CAAC,EAChBN,GAAQA,EAAK,WAAa,EAC5BA,EAAK,OAASK,IAAUL,EAAK,KAAOK,GAC/BL,EAAO,SAAS,eAAeK,CAAK,EAC3CC,EAAUS,GAAcX,EAAQE,EAASC,EAAQP,CAAI,CACvD,MACMM,IAAY,IAAM,OAAOA,GAAY,SACvCA,EAAUF,EAAO,WAAW,KAAOC,EAC9BC,EAAUF,EAAO,YAAcC,CAE1C,SAAWA,GAAS,MAAQQ,IAAM,UAAW,CAC3C,GAAIJ,EAAW,OAAOH,EACtBA,EAAUS,GAAcX,EAAQE,EAASC,CAAM,CACjD,KAAO,IAAIM,IAAM,WACf,OAAAG,GAAmB,IAAM,CACvB,IAAIC,EAAIZ,EAAM,EACd,KAAO,OAAOY,GAAM,YAAYA,EAAIA,EAAE,EACtCX,EAAUH,GAAiBC,EAAQa,EAAGX,EAASC,CAAM,CACvD,CAAC,EACM,IAAMD,EACR,GAAI,MAAM,QAAQD,CAAK,EAAG,CAC/B,IAAMa,EAAQ,CAAC,EACTC,EAAeb,GAAW,MAAM,QAAQA,CAAO,EACrD,GAAIc,GAAuBF,EAAOb,EAAOC,EAASE,CAAW,EAC3D,OAAAQ,GAAmB,IAAOV,EAAUH,GAAiBC,EAAQc,EAAOZ,EAASC,EAAQ,EAAI,CAAE,EACpF,IAAMD,EAEf,GAAIG,EAAW,CACb,GAAI,CAACS,EAAM,OAAQ,OAAOZ,EAC1B,GAAIC,IAAW,OAAW,OAAQD,EAAU,CAAC,GAAGF,EAAO,UAAU,EACjE,IAAIJ,EAAOkB,EAAM,CAAC,EAClB,GAAIlB,EAAK,aAAeI,EAAQ,OAAOE,EACvC,IAAMe,EAAQ,CAACrB,CAAI,EACnB,MAAQA,EAAOA,EAAK,eAAiBO,GAAQc,EAAM,KAAKrB,CAAI,EAC5D,OAAQM,EAAUe,CACpB,CACA,GAAIH,EAAM,SAAW,GAEnB,GADAZ,EAAUS,GAAcX,EAAQE,EAASC,CAAM,EAC3CO,EAAO,OAAOR,OACTa,EACLb,EAAQ,SAAW,EACrBgB,GAAYlB,EAAQc,EAAOX,CAAM,EAC5BgB,GAAgBnB,EAAQE,EAASY,CAAK,GAE7CZ,GAAWS,GAAcX,CAAM,EAC/BkB,GAAYlB,EAAQc,CAAK,GAE3BZ,EAAUY,CACZ,SAAWb,EAAM,SAAU,CACzB,GAAII,GAAaJ,EAAM,WAAY,OAAQC,EAAUQ,EAAQ,CAACT,CAAK,EAAIA,EACvE,GAAI,MAAM,QAAQC,CAAO,EAAG,CAC1B,GAAIQ,EAAO,OAAQR,EAAUS,GAAcX,EAAQE,EAASC,EAAQF,CAAK,EACzEU,GAAcX,EAAQE,EAAS,KAAMD,CAAK,CAC5C,MAAWC,GAAW,MAAQA,IAAY,IAAM,CAACF,EAAO,WACtDA,EAAO,YAAYC,CAAK,EACnBD,EAAO,aAAaC,EAAOD,EAAO,UAAU,EACnDE,EAAUD,CACZ,EACA,OAAOC,CACT,CACA,SAASc,GAAuBI,EAAYN,EAAOZ,EAASmB,EAAQ,CAClE,IAAIC,EAAU,GACd,QAAS,EAAI,EAAGC,EAAMT,EAAM,OAAQ,EAAIS,EAAK,IAAK,CAChD,IAAIC,EAAOV,EAAM,CAAC,EAChBW,EAAOvB,GAAWA,EAAQkB,EAAW,MAAM,EAC3CX,EACF,GAAI,EAAAe,GAAQ,MAAQA,IAAS,IAAQA,IAAS,IACzC,IAAKf,EAAI,OAAOe,IAAU,UAAYA,EAAK,SAC9CJ,EAAW,KAAKI,CAAI,UACX,MAAM,QAAQA,CAAI,EAC3BF,EAAUN,GAAuBI,EAAYI,EAAMC,CAAI,GAAKH,UACnDb,IAAM,WACf,GAAIY,EAAQ,CACV,KAAO,OAAOG,GAAS,YAAYA,EAAOA,EAAK,EAC/CF,EACEN,GACEI,EACA,MAAM,QAAQI,CAAI,EAAIA,EAAO,CAACA,CAAI,EAClC,MAAM,QAAQC,CAAI,EAAIA,EAAO,CAACA,CAAI,CACpC,GAAKH,CACT,MACEF,EAAW,KAAKI,CAAI,EACpBF,EAAU,OAEP,CACL,IAAMrB,EAAQ,OAAOuB,CAAI,EACrBC,GAAQA,EAAK,WAAa,GAAKA,EAAK,OAASxB,EAAOmB,EAAW,KAAKK,CAAI,EACvEL,EAAW,KAAK,SAAS,eAAenB,CAAK,CAAC,CACrD,CACF,CACA,OAAOqB,CACT,CACA,SAASJ,GAAYlB,EAAQc,EAAOX,EAAS,KAAM,CACjD,QAASK,EAAI,EAAGe,EAAMT,EAAM,OAAQN,EAAIe,EAAKf,IAAKR,EAAO,aAAac,EAAMN,CAAC,EAAGL,CAAM,CACxF,CACA,SAASQ,GAAcX,EAAQE,EAASC,EAAQuB,EAAa,CAC3D,GAAIvB,IAAW,OAAW,OAAQH,EAAO,YAAc,GACvD,IAAMJ,EAAO8B,GAAe,SAAS,eAAe,EAAE,EACtD,GAAIxB,EAAQ,OAAQ,CAClB,IAAIyB,EAAW,GACf,QAASnB,EAAIN,EAAQ,OAAS,EAAGM,GAAK,EAAGA,IAAK,CAC5C,IAAMf,EAAKS,EAAQM,CAAC,EACpB,GAAIZ,IAASH,EAAI,CACf,IAAMmC,EAAWnC,EAAG,aAAeO,EAC/B,CAAC2B,GAAY,CAACnB,EAChBoB,EAAW5B,EAAO,aAAaJ,EAAMH,CAAE,EAAIO,EAAO,aAAaJ,EAAMO,CAAM,EACxEyB,GAAYnC,EAAG,OAAO,CAC7B,MAAOkC,EAAW,EACpB,CACF,MAAO3B,EAAO,aAAaJ,EAAMO,CAAM,EACvC,MAAO,CAACP,CAAI,CACd,CAmBA,IAAMiC,GAAS,IAAG,GACZC,GAAiB,OAAO,EA4B9B,IAAMC,EAAW,GC/hCjB,IAAMC,GAAO,OAAO,WAAW,EAC7BC,GAAQ,OAAO,YAAY,EAC3BC,GAAO,OAAO,WAAW,EACzBC,GAAQ,OAAO,YAAY,EAuB7B,SAASC,GAAYC,EAAK,CACxB,IAAIC,EACJ,OACED,GAAO,MACP,OAAOA,GAAQ,WACdA,EAAIE,EAAM,GACT,EAAED,EAAQ,OAAO,eAAeD,CAAG,IACnCC,IAAU,OAAO,WACjB,MAAM,QAAQD,CAAG,EAEvB,CACA,SAASG,GAAOC,EAAMC,EAAM,IAAI,IAAO,CACrC,IAAIC,EAAQC,EAAWC,EAAGC,EAC1B,GAAKH,EAASF,GAAQ,MAAQA,EAAKM,EAAI,EAAI,OAAOJ,EAClD,GAAI,CAACP,GAAYK,CAAI,GAAKC,EAAI,IAAID,CAAI,EAAG,OAAOA,EAChD,GAAI,MAAM,QAAQA,CAAI,EAAG,CACnB,OAAO,SAASA,CAAI,EAAGA,EAAOA,EAAK,MAAM,CAAC,EACzCC,EAAI,IAAID,CAAI,EACjB,QAASO,EAAI,EAAGC,EAAIR,EAAK,OAAQO,EAAIC,EAAGD,IACtCH,EAAIJ,EAAKO,CAAC,GACLJ,EAAYJ,GAAOK,EAAGH,CAAG,KAAOG,IAAGJ,EAAKO,CAAC,EAAIJ,EAEtD,KAAO,CACD,OAAO,SAASH,CAAI,EAAGA,EAAO,OAAO,OAAO,CAAC,EAAGA,CAAI,EACnDC,EAAI,IAAID,CAAI,EACjB,IAAMS,EAAO,OAAO,KAAKT,CAAI,EAC3BU,EAAO,OAAO,0BAA0BV,CAAI,EAC9C,QAASO,EAAI,EAAGC,EAAIC,EAAK,OAAQF,EAAIC,EAAGD,IACtCF,EAAOI,EAAKF,CAAC,EACT,CAAAG,EAAKL,CAAI,EAAE,MACfD,EAAIJ,EAAKK,CAAI,GACRF,EAAYJ,GAAOK,EAAGH,CAAG,KAAOG,IAAGJ,EAAKK,CAAI,EAAIF,GAEzD,CACA,OAAOH,CACT,CACA,SAASW,GAASC,EAAQC,EAAQ,CAChC,IAAIC,EAAQF,EAAOC,CAAM,EACzB,OAAKC,GACH,OAAO,eAAeF,EAAQC,EAAQ,CACpC,MAAQC,EAAQ,OAAO,OAAO,IAAI,CACpC,CAAC,EACIA,CACT,CACA,SAASC,GAAQD,EAAOE,EAAUC,EAAO,CACvC,GAAIH,EAAME,CAAQ,EAAG,OAAOF,EAAME,CAAQ,EAC1C,GAAM,CAACE,EAAGjB,CAAG,EAAIkB,EAAaF,EAAO,CACnC,OAAQ,GACR,SAAU,EACZ,CAAC,EACD,OAAAC,EAAE,EAAIjB,EACEa,EAAME,CAAQ,EAAIE,CAC5B,CAUA,SAASE,GAAUC,EAAQ,CACzBC,GAAY,GAAKC,GAAQC,GAASH,EAAQI,EAAK,EAAGC,EAAK,EAAE,CAC3D,CACA,SAASC,GAAQN,EAAQ,CACvB,OAAAD,GAAUC,CAAM,EACT,QAAQ,QAAQA,CAAM,CAC/B,CA8CA,SAASO,GAAYC,EAAOC,EAAUC,EAAOC,EAAW,GAAO,CAC7D,GAAI,CAACA,GAAYH,EAAMC,CAAQ,IAAMC,EAAO,OAC5C,IAAME,EAAOJ,EAAMC,CAAQ,EACzBI,EAAML,EAAM,OACVE,IAAU,QACZ,OAAOF,EAAMC,CAAQ,EACjBD,EAAMM,EAAI,GAAKN,EAAMM,EAAI,EAAEL,CAAQ,GAAKG,IAAS,QAAWJ,EAAMM,EAAI,EAAEL,CAAQ,EAAE,EAAE,IAExFD,EAAMC,CAAQ,EAAIC,EACdF,EAAMM,EAAI,GAAKN,EAAMM,EAAI,EAAEL,CAAQ,GAAKG,IAAS,QAAWJ,EAAMM,EAAI,EAAEL,CAAQ,EAAE,EAAE,GAE1F,IAAIM,EAAQC,GAASR,EAAOS,EAAK,EAC/BC,EAEF,IADKA,EAAOC,GAAQJ,EAAON,EAAUG,CAAI,IAAIM,EAAK,EAAE,IAAMR,CAAK,EAC3D,MAAM,QAAQF,CAAK,GAAKA,EAAM,SAAWK,EAAK,CAChD,QAASO,EAAIZ,EAAM,OAAQY,EAAIP,EAAKO,KAAMF,EAAOH,EAAMK,CAAC,IAAMF,EAAK,EAAE,GACpEA,EAAOC,GAAQJ,EAAO,SAAUF,CAAG,IAAMK,EAAK,EAAEV,EAAM,MAAM,CAC/D,EACCU,EAAOH,EAAMM,EAAK,IAAMH,EAAK,EAAE,CAClC,CA6EA,SAASI,GAAgBC,EAAQC,EAAU,CACzC,IAAMC,EAAO,QAAQ,yBAAyBF,EAAQC,CAAQ,EAC9D,MACE,CAACC,GACDA,EAAK,KACLA,EAAK,KACL,CAACA,EAAK,cACND,IAAaE,IACbF,IAAaG,KAGf,OAAOF,EAAK,MACZ,OAAOA,EAAK,SACZA,EAAK,IAAM,IAAMF,EAAOG,EAAM,EAAEF,CAAQ,EACxCC,EAAK,IAAMG,GAAML,EAAOG,EAAM,EAAEF,CAAQ,EAAII,GACrCH,CACT,CACA,IAAMI,GAAa,CACjB,IAAIN,EAAQC,EAAUM,EAAU,CAC9B,GAAIN,IAAaO,GAAM,OAAOR,EAC9B,GAAIC,IAAaE,GAAQ,OAAOI,EAChC,GAAIN,IAAaQ,GACf,OAAAC,GAAUV,CAAM,EACTO,EAET,IAAMI,EAAQC,GAASZ,EAAQI,EAAK,EAC9BS,EAAUF,EAAMV,CAAQ,EAC1Ba,EAAQD,EAAUA,EAAQ,EAAIb,EAAOC,CAAQ,EACjD,GAAIA,IAAaG,IAASH,IAAac,IAAQd,IAAa,YAAa,OAAOa,EAChF,GAAI,CAACD,EAAS,CACZ,IAAMX,EAAO,OAAO,yBAAyBF,EAAQC,CAAQ,EACvDe,EAAa,OAAOF,GAAU,WACpC,GAAIG,GAAY,IAAM,CAACD,GAAchB,EAAO,eAAeC,CAAQ,IAAM,EAAEC,GAAQA,EAAK,KACtFY,EAAQI,GAAQP,EAAOV,EAAUa,CAAK,EAAE,UACjCA,GAAS,MAAQE,GAAcF,IAAU,MAAM,UAAUb,CAAQ,EACxE,MAAO,IAAIkB,IAASC,GAAM,IAAM,MAAM,UAAUnB,CAAQ,EAAE,MAAMM,EAAUY,CAAI,CAAC,CAEnF,CACA,OAAOE,GAAYP,CAAK,EAAIQ,GAAKR,CAAK,EAAIA,CAC5C,EACA,IAAId,EAAQC,EAAU,CACpB,OACEA,IAAaO,IACbP,IAAaE,IACbF,IAAaQ,IACbR,IAAaG,IACbH,IAAac,IACbd,IAAa,YAEN,IACTgB,GAAY,GAAKC,GAAQN,GAASZ,EAAQe,EAAI,EAAGd,CAAQ,EAAE,EACpDA,KAAYD,EACrB,EACA,IAAIA,EAAQC,EAAUa,EAAO,CAC3B,OAAAM,GAAM,IAAMG,GAAYvB,EAAQC,EAAUuB,GAAOV,CAAK,CAAC,CAAC,EACjD,EACT,EACA,eAAed,EAAQC,EAAU,CAC/B,OAAAmB,GAAM,IAAMG,GAAYvB,EAAQC,EAAU,OAAW,EAAI,CAAC,EACnD,EACT,EACA,QAASwB,GACT,yBAA0B1B,EAC5B,EACA,SAASuB,GAAKR,EAAO,CACnB,IAAIY,EAAIZ,EAAMX,EAAM,EACpB,GAAI,CAACuB,EAAG,CACN,OAAO,eAAeZ,EAAOX,GAAQ,CACnC,MAAQuB,EAAI,IAAI,MAAMZ,EAAOR,EAAU,CACzC,CAAC,EACD,IAAMqB,EAAO,OAAO,KAAKb,CAAK,EAC5BZ,EAAO,OAAO,0BAA0BY,CAAK,EACzCc,EAAQ,OAAO,eAAed,CAAK,EACnCe,EACJf,IAAU,MACV,OAAOA,GAAU,UACjB,CAAC,MAAM,QAAQA,CAAK,GACpBc,IAAU,OAAO,UACnB,GAAIC,EAAS,CACX,IAAMC,EAAc,OAAO,0BAA0BF,CAAK,EAC1DD,EAAK,KAAK,GAAG,OAAO,KAAKG,CAAW,CAAC,EACrC,OAAO,OAAO5B,EAAM4B,CAAW,CACjC,CACA,QAASC,EAAI,EAAGC,EAAIL,EAAK,OAAQI,EAAIC,EAAGD,IAAK,CAC3C,IAAME,EAAON,EAAKI,CAAC,EACnB,GAAI,EAAAF,GAAWI,IAAS,eACxB,IAAI/B,EAAK+B,CAAI,EAAE,IAAK,CAClB,IAAMC,EAAMhC,EAAK+B,CAAI,EAAE,IAAI,KAAKP,CAAC,EACjC,OAAO,eAAeZ,EAAOmB,EAAM,CACjC,IAAAC,EACA,aAAc,EAChB,CAAC,CACH,CACA,GAAIhC,EAAK+B,CAAI,EAAE,IAAK,CAClB,IAAME,EAAKjC,EAAK+B,CAAI,EAAE,IAEtB,OAAO,eAAenB,EAAOmB,EAAM,CACjC,IAFM5B,GAAKe,GAAM,IAAMe,EAAG,KAAKT,EAAGrB,CAAC,CAAC,EAGpC,aAAc,EAChB,CAAC,CACH,EACF,CACF,CACA,OAAOqB,CACT,CACA,SAASU,GAAcC,EAAOC,EAAS,CACrC,IAAMC,EAAiBf,GAAOa,GAAS,CAAC,CAAC,EAEzC,OADqBf,GAAKiB,CAAc,CAE1C,CACA,SAASC,GAAcH,EAAOI,EAAU,CACtCrB,GAAM,IAAMqB,EAASjB,GAAOa,CAAK,CAAC,CAAC,CACrC,CAEA,IAAMK,GAAQ,OAAO,YAAY,EACjC,SAASC,GAAW3C,EAAQ4C,EAAQ3C,EAAU4C,EAAOC,EAAK,CACxD,IAAMC,EAAWH,EAAO3C,CAAQ,EAChC,GAAID,IAAW+C,EAAU,OACzB,IAAMC,EAAU,MAAM,QAAQhD,CAAM,EACpC,GACEC,IAAayC,KACZ,CAACrB,GAAYrB,CAAM,GAClB,CAACqB,GAAY0B,CAAQ,GACrBC,IAAY,MAAM,QAAQD,CAAQ,GACjCD,GAAO9C,EAAO8C,CAAG,IAAMC,EAASD,CAAG,GACtC,CACAvB,GAAYqB,EAAQ3C,EAAUD,CAAM,EACpC,MACF,CACA,GAAIgD,EAAS,CACX,GACEhD,EAAO,QACP+C,EAAS,SACR,CAACF,GAAUC,GAAO9C,EAAO,CAAC,GAAKA,EAAO,CAAC,EAAE8C,CAAG,GAAK,MAClD,CACA,IAAIf,EAAGkB,EAAGC,EAAOC,EAAKC,EAAQC,EAAMC,EAAgBC,EACpD,IACEL,EAAQ,EAAGC,EAAM,KAAK,IAAIJ,EAAS,OAAQ/C,EAAO,MAAM,EACxDkD,EAAQC,IACPJ,EAASG,CAAK,IAAMlD,EAAOkD,CAAK,GAC9BJ,GAAOC,EAASG,CAAK,GAAKlD,EAAOkD,CAAK,GAAKH,EAASG,CAAK,EAAEJ,CAAG,IAAM9C,EAAOkD,CAAK,EAAEJ,CAAG,GACxFI,IAEAP,GAAW3C,EAAOkD,CAAK,EAAGH,EAAUG,EAAOL,EAAOC,CAAG,EAEvD,IAAMU,EAAO,IAAI,MAAMxD,EAAO,MAAM,EAClCyD,EAAa,IAAI,IACnB,IACEN,EAAMJ,EAAS,OAAS,EAAGK,EAASpD,EAAO,OAAS,EACpDmD,GAAOD,GACPE,GAAUF,IACTH,EAASI,CAAG,IAAMnD,EAAOoD,CAAM,GAC7BN,GAAOC,EAASG,CAAK,GAAKlD,EAAOkD,CAAK,GAAKH,EAASI,CAAG,EAAEL,CAAG,IAAM9C,EAAOoD,CAAM,EAAEN,CAAG,GACvFK,IAAOC,IAEPI,EAAKJ,CAAM,EAAIL,EAASI,CAAG,EAE7B,GAAID,EAAQE,GAAUF,EAAQC,EAAK,CACjC,IAAKF,EAAIC,EAAOD,GAAKG,EAAQH,IAAK1B,GAAYwB,EAAUE,EAAGjD,EAAOiD,CAAC,CAAC,EACpE,KAAOA,EAAIjD,EAAO,OAAQiD,IACxB1B,GAAYwB,EAAUE,EAAGO,EAAKP,CAAC,CAAC,EAChCN,GAAW3C,EAAOiD,CAAC,EAAGF,EAAUE,EAAGJ,EAAOC,CAAG,EAE3CC,EAAS,OAAS/C,EAAO,QAAQuB,GAAYwB,EAAU,SAAU/C,EAAO,MAAM,EAClF,MACF,CAEA,IADAsD,EAAiB,IAAI,MAAMF,EAAS,CAAC,EAChCH,EAAIG,EAAQH,GAAKC,EAAOD,IAC3BI,EAAOrD,EAAOiD,CAAC,EACfM,EAAST,GAAOO,EAAOA,EAAKP,CAAG,EAAIO,EACnCtB,EAAI0B,EAAW,IAAIF,CAAM,EACzBD,EAAeL,CAAC,EAAIlB,IAAM,OAAY,GAAKA,EAC3C0B,EAAW,IAAIF,EAAQN,CAAC,EAE1B,IAAKlB,EAAImB,EAAOnB,GAAKoB,EAAKpB,IACxBsB,EAAON,EAAShB,CAAC,EACjBwB,EAAST,GAAOO,EAAOA,EAAKP,CAAG,EAAIO,EACnCJ,EAAIQ,EAAW,IAAIF,CAAM,EACrBN,IAAM,QAAaA,IAAM,KAC3BO,EAAKP,CAAC,EAAIF,EAAShB,CAAC,EACpBkB,EAAIK,EAAeL,CAAC,EACpBQ,EAAW,IAAIF,EAAQN,CAAC,GAG5B,IAAKA,EAAIC,EAAOD,EAAIjD,EAAO,OAAQiD,IAC7BA,KAAKO,GACPjC,GAAYwB,EAAUE,EAAGO,EAAKP,CAAC,CAAC,EAChCN,GAAW3C,EAAOiD,CAAC,EAAGF,EAAUE,EAAGJ,EAAOC,CAAG,GACxCvB,GAAYwB,EAAUE,EAAGjD,EAAOiD,CAAC,CAAC,CAE7C,KACE,SAASlB,EAAI,EAAG2B,EAAM1D,EAAO,OAAQ+B,EAAI2B,EAAK3B,IAC5CY,GAAW3C,EAAO+B,CAAC,EAAGgB,EAAUhB,EAAGc,EAAOC,CAAG,EAG7CC,EAAS,OAAS/C,EAAO,QAAQuB,GAAYwB,EAAU,SAAU/C,EAAO,MAAM,EAClF,MACF,CACA,IAAM2D,EAAa,OAAO,KAAK3D,CAAM,EACrC,QAAS+B,EAAI,EAAG2B,EAAMC,EAAW,OAAQ5B,EAAI2B,EAAK3B,IAChDY,GAAW3C,EAAO2D,EAAW5B,CAAC,CAAC,EAAGgB,EAAUY,EAAW5B,CAAC,EAAGc,EAAOC,CAAG,EAEvE,IAAMc,EAAe,OAAO,KAAKb,CAAQ,EACzC,QAAShB,EAAI,EAAG2B,EAAME,EAAa,OAAQ7B,EAAI2B,EAAK3B,IAC9C/B,EAAO4D,EAAa7B,CAAC,CAAC,IAAM,QAAWR,GAAYwB,EAAUa,EAAa7B,CAAC,EAAG,MAAS,CAE/F,CACA,SAAS8B,GAAU/C,EAAOwB,EAAU,CAAC,EAAG,CACtC,GAAM,CAAE,MAAAO,EAAO,IAAAC,EAAM,IAAK,EAAIR,EAC5BjC,EAAImB,GAAOV,CAAK,EAClB,OAAOuB,GAAS,CACd,GAAI,CAAChB,GAAYgB,CAAK,GAAK,CAAChB,GAAYhB,CAAC,EAAG,OAAOA,EACnD,IAAMyD,EAAMnB,GACVtC,EACA,CACE,CAACqC,EAAK,EAAGL,CACX,EACAK,GACAG,EACAC,CACF,EACA,OAAOgB,IAAQ,OAAYzB,EAAQyB,CACrC,CACF,CCzcA,SAASC,IAAoB,CAC3B,IAAIC,EAAY,IAAI,IACpB,SAASC,EAAUC,EAAU,CAC3B,OAAAF,EAAU,IAAIE,CAAQ,EACf,IAAMF,EAAU,OAAOE,CAAQ,CACxC,CACA,IAAIC,EAAS,GACb,SAASC,EAAQC,EAAIC,EAAS,CAC5B,GAAIH,EAAQ,MAAO,EAAEA,EAAS,IAC9B,IAAMI,EAAI,CACR,GAAAF,EACA,QAAAC,EACA,iBAAkB,GAClB,eAAgB,IAAMC,EAAE,iBAAmB,EAC7C,EACA,QAAWC,KAAKR,EAAWQ,EAAE,SAAS,CACpC,GAAGD,EACH,KAAMC,EAAE,SACR,MAAOC,GAAS,CACdA,IAAUN,EAAS,IACnBK,EAAE,SAASH,EAAI,CACb,GAAGC,EACH,QAAS,EACX,CAAC,CACH,CACF,CAAC,EACD,MAAO,CAACC,EAAE,gBACZ,CACA,MAAO,CACL,UAAAN,EACA,QAAAG,CACF,CACF,CAIA,IAAIM,GACJ,SAASC,IAAmB,EACtB,CAAC,OAAO,QAAQ,OAAS,OAAO,QAAQ,MAAM,QAAU,OAC1D,OAAO,QAAQ,aAAa,CAC1B,GAAG,OAAO,QAAQ,MAClB,OAAQ,OAAO,QAAQ,OAAS,CAClC,EAAG,EAAE,EAEPD,GAAQ,OAAO,QAAQ,MAAM,MAC/B,CACKE,GACHD,GAAiB,EAEnB,SAASE,GAAUC,EAAO,CACxB,MAAO,CACL,GAAGA,EACH,OAAQ,OAAO,QAAQ,OAAS,OAAO,QAAQ,MAAM,MACvD,CACF,CACA,SAASC,GAAmBC,EAAQC,EAAO,CACzC,IAAId,EAAS,GACb,MAAO,IAAM,CACX,IAAMe,EAAYR,GAClBC,GAAiB,EACjB,IAAMQ,EAAQD,GAAa,KAAO,KAAOR,GAAQQ,EACjD,GAAIf,EAAQ,CACVA,EAAS,GACT,MACF,CACIgB,GAASF,EAAME,CAAK,GACtBhB,EAAS,GACT,OAAO,QAAQ,GAAG,CAACgB,CAAK,GAExBH,EAAO,CAEX,CACF,CAEA,IAAMI,GAAiB,wBACjBC,GAAgB,iBAChBC,GAAW,YACjB,SAASC,GAAcC,EAAMC,EAAY,GAAO,CAC9C,IAAMC,EAAIF,EAAK,QAAQH,GAAe,IAAI,EAC1C,OAAOK,EAAID,GAAa,QAAQ,KAAKC,CAAC,EAAIA,EAAI,IAAMA,EAAI,EAC1D,CACA,SAASC,GAAYC,EAAMJ,EAAMK,EAAM,CACrC,GAAIT,GAAe,KAAKI,CAAI,EAC1B,OAEF,IAAMM,EAAWP,GAAcK,CAAI,EAC7BG,EAAWF,GAAQN,GAAcM,CAAI,EACvCG,EAAS,GACb,MAAI,CAACD,GAAYP,EAAK,WAAW,GAAG,EAClCQ,EAASF,EACAC,EAAS,YAAY,EAAE,QAAQD,EAAS,YAAY,CAAC,IAAM,EACpEE,EAASF,EAAWC,EAEpBC,EAASD,GAEHC,GAAU,KAAOT,GAAcC,EAAM,CAACQ,CAAM,CACtD,CACA,SAASC,GAAUC,EAAOC,EAAS,CACjC,GAAID,GAAS,KACX,MAAM,IAAI,MAAMC,CAAO,EAEzB,OAAOD,CACT,CACA,SAASE,GAAUP,EAAMxB,EAAI,CAC3B,OAAOkB,GAAcM,CAAI,EAAE,QAAQ,eAAgB,EAAE,EAAIN,GAAclB,CAAE,CAC3E,CACA,SAASgC,GAAoBC,EAAK,CAChC,IAAMC,EAAS,CAAC,EAChB,OAAAD,EAAI,aAAa,QAAQ,CAACJ,EAAOM,IAAQ,CACvCD,EAAOC,CAAG,EAAIN,CAChB,CAAC,EACMK,CACT,CACA,SAASE,GAAcjB,EAAMkB,EAASC,EAAc,CAClD,GAAM,CAACC,EAASC,CAAK,EAAIrB,EAAK,MAAM,KAAM,CAAC,EACrCsB,EAAWF,EAAQ,MAAM,GAAG,EAAE,OAAO,OAAO,EAC5CG,EAAMD,EAAS,OACrB,OAAOE,GAAY,CACjB,IAAMC,EAAcD,EAAS,MAAM,GAAG,EAAE,OAAO,OAAO,EAChDE,EAAUD,EAAY,OAASF,EACrC,GAAIG,EAAU,GAAKA,EAAU,GAAKL,IAAU,QAAa,CAACH,EACxD,OAAO,KAET,IAAMS,EAAQ,CACZ,KAAMJ,EAAM,GAAK,IACjB,OAAQ,CAAC,CACX,EACMK,EAAc1B,GAAKiB,IAAiB,OAAY,OAAYA,EAAajB,CAAC,EAChF,QAAS2B,EAAI,EAAGA,EAAIN,EAAKM,IAAK,CAC5B,IAAMC,EAAUR,EAASO,CAAC,EACpBE,EAAaN,EAAYI,CAAC,EAC1BG,EAAUF,EAAQ,CAAC,IAAM,IACzBd,EAAMgB,EAAUF,EAAQ,MAAM,CAAC,EAAIA,EACzC,GAAIE,GAAWC,GAAaF,EAAYH,EAAYZ,CAAG,CAAC,EACtDW,EAAM,OAAOX,CAAG,EAAIe,UACXC,GAAW,CAACC,GAAaF,EAAYD,CAAO,EACrD,OAAO,KAETH,EAAM,MAAQ,IAAII,CAAU,EAC9B,CACA,GAAIV,EAAO,CACT,IAAMa,EAAYR,EAAUD,EAAY,MAAM,CAACC,CAAO,EAAE,KAAK,GAAG,EAAI,GACpE,GAAIO,GAAaC,EAAWN,EAAYP,CAAK,CAAC,EAC5CM,EAAM,OAAON,CAAK,EAAIa,MAEtB,QAAO,IAEX,CACA,OAAOP,CACT,CACF,CACA,SAASM,GAAaE,EAAOC,EAAQ,CACnC,IAAMC,EAAUnC,GAAKA,EAAE,cAAciC,EAAO,OAAW,CACrD,YAAa,MACf,CAAC,IAAM,EACP,OAAIC,IAAW,OACN,GACE,OAAOA,GAAW,SACpBC,EAAQD,CAAM,EACZ,OAAOA,GAAW,WACpBA,EAAOD,CAAK,EACV,MAAM,QAAQC,CAAM,EACtBA,EAAO,KAAKC,CAAO,EACjBD,aAAkB,OACpBA,EAAO,KAAKD,CAAK,EAEnB,EACT,CACA,SAASG,GAAWC,EAAO,CACzB,GAAM,CAACnB,EAASC,CAAK,EAAIkB,EAAM,QAAQ,MAAM,KAAM,CAAC,EAC9CjB,EAAWF,EAAQ,MAAM,GAAG,EAAE,OAAO,OAAO,EAClD,OAAOE,EAAS,OAAO,CAACkB,EAAOV,IAAYU,GAASV,EAAQ,WAAW,GAAG,EAAI,EAAI,GAAIR,EAAS,QAAUD,IAAU,OAAY,EAAI,EAAE,CACvI,CACA,SAASoB,GAAiBC,EAAI,CAC5B,IAAMC,EAAM,IAAI,IACVC,EAAQC,GAAS,EACvB,OAAO,IAAI,MAAM,CAAC,EAAG,CACnB,IAAIC,EAAGC,EAAU,CACf,OAAKJ,EAAI,IAAII,CAAQ,GACnBC,GAAaJ,EAAO,IAAMD,EAAI,IAAII,EAAUE,EAAW,IAAMP,EAAG,EAAEK,CAAQ,CAAC,CAAC,CAAC,EAExEJ,EAAI,IAAII,CAAQ,EAAE,CAC3B,EACA,0BAA2B,CACzB,MAAO,CACL,WAAY,GACZ,aAAc,EAChB,CACF,EACA,SAAU,CACR,OAAO,QAAQ,QAAQL,EAAG,CAAC,CAC7B,CACF,CAAC,CACH,CAaA,SAASQ,GAAgBC,EAAS,CAChC,IAAIC,EAAQ,kBAAkB,KAAKD,CAAO,EAC1C,GAAI,CAACC,EAAO,MAAO,CAACD,CAAO,EAC3B,IAAIE,EAASF,EAAQ,MAAM,EAAGC,EAAM,KAAK,EACrCE,EAASH,EAAQ,MAAMC,EAAM,MAAQA,EAAM,CAAC,EAAE,MAAM,EAClDG,EAAW,CAACF,EAAQA,GAAUD,EAAM,CAAC,CAAC,EAO5C,KAAOA,EAAQ,kBAAkB,KAAKE,CAAM,GAC1CC,EAAS,KAAKF,GAAUD,EAAM,CAAC,CAAC,EAChCE,EAASA,EAAO,MAAMF,EAAM,CAAC,EAAE,MAAM,EAEvC,OAAOF,GAAgBI,CAAM,EAAE,OAAO,CAACE,EAASC,IAAc,CAAC,GAAGD,EAAS,GAAGD,EAAS,IAAIG,GAAKA,EAAID,CAAS,CAAC,EAAG,CAAC,CAAC,CACrH,CAEA,IAAME,GAAgB,IAChBC,GAAmBC,GAAc,EACjCC,GAAkBD,GAAc,EAChCE,GAAY,IAAMC,GAAUC,GAAWL,EAAgB,EAAG,kEAAkE,EAalI,IAAMM,GAAc,IAAMC,GAAU,EAAE,iBAAiB,EAqCvD,SAASC,GAAaC,EAAUC,EAAO,GAAI,CACzC,GAAM,CACJ,UAAAC,EACA,QAAAC,EACA,KAAAC,EACA,SAAAC,EACA,KAAAC,CACF,EAAIN,EACEO,EAAS,CAACF,GAAY,MAAM,QAAQA,CAAQ,GAAK,CAACA,EAAS,OAC3DG,EAAS,CACb,IAAKR,EACL,UAAAE,EACA,QAASC,GAAWC,EACpB,KAAAE,CACF,EACA,OAAOG,GAAQT,EAAS,IAAI,EAAE,OAAO,CAACU,EAAKC,IAAiB,CAC1D,QAAWC,KAAgBC,GAAgBF,CAAY,EAAG,CACxD,IAAMG,EAAOC,GAAUd,EAAMW,CAAY,EACrCI,EAAUT,EAASO,EAAOA,EAAK,MAAM,KAAM,CAAC,EAAE,CAAC,EACnDE,EAAUA,EAAQ,MAAM,GAAG,EAAE,IAAIC,GACxBA,EAAE,WAAW,GAAG,GAAKA,EAAE,WAAW,GAAG,EAAIA,EAAI,mBAAmBA,CAAC,CACzE,EAAE,KAAK,GAAG,EACXP,EAAI,KAAK,CACP,GAAGF,EACH,aAAAG,EACA,QAAAK,EACA,QAASE,GAAcF,EAAS,CAACT,EAAQP,EAAS,YAAY,CAChE,CAAC,CACH,CACA,OAAOU,CACT,EAAG,CAAC,CAAC,CACP,CACA,SAASS,GAAaC,EAAQC,EAAQ,EAAG,CACvC,MAAO,CACL,OAAAD,EACA,MAAOE,GAAWF,EAAOA,EAAO,OAAS,CAAC,CAAC,EAAI,IAAQC,EACvD,QAAQE,EAAU,CAChB,IAAMC,EAAU,CAAC,EACjB,QAASC,EAAIL,EAAO,OAAS,EAAGK,GAAK,EAAGA,IAAK,CAC3C,IAAMC,EAAQN,EAAOK,CAAC,EAChBE,EAAQD,EAAM,QAAQH,CAAQ,EACpC,GAAI,CAACI,EACH,OAAO,KAETH,EAAQ,QAAQ,CACd,GAAGG,EACH,MAAAD,CACF,CAAC,CACH,CACA,OAAOF,CACT,CACF,CACF,CACA,SAASf,GAAQmB,EAAO,CACtB,OAAO,MAAM,QAAQA,CAAK,EAAIA,EAAQ,CAACA,CAAK,CAC9C,CACA,SAASC,GAAe7B,EAAUC,EAAO,GAAI6B,EAAQ,CAAC,EAAGC,EAAW,CAAC,EAAG,CACtE,IAAMC,EAAYvB,GAAQT,CAAQ,EAClC,QAAS,EAAI,EAAGiC,EAAMD,EAAU,OAAQ,EAAIC,EAAK,IAAK,CACpD,IAAMC,EAAMF,EAAU,CAAC,EACvB,GAAIE,GAAO,OAAOA,GAAQ,SAAU,CAC7BA,EAAI,eAAe,MAAM,IAAGA,EAAI,KAAO,IAC5C,IAAMd,EAASrB,GAAamC,EAAKjC,CAAI,EACrC,QAAWyB,KAASN,EAAQ,CAC1BU,EAAM,KAAKJ,CAAK,EAChB,IAAMS,EAAe,MAAM,QAAQD,EAAI,QAAQ,GAAKA,EAAI,SAAS,SAAW,EAC5E,GAAIA,EAAI,UAAY,CAACC,EACnBN,GAAeK,EAAI,SAAUR,EAAM,QAASI,EAAOC,CAAQ,MACtD,CACL,IAAMK,EAASjB,GAAa,CAAC,GAAGW,CAAK,EAAGC,EAAS,MAAM,EACvDA,EAAS,KAAKK,CAAM,CACtB,CACAN,EAAM,IAAI,CACZ,CACF,CACF,CAGA,OAAOA,EAAM,OAASC,EAAWA,EAAS,KAAK,CAACM,EAAGC,IAAMA,EAAE,MAAQD,EAAE,KAAK,CAC5E,CACA,SAASE,GAAgBR,EAAUR,EAAU,CAC3C,QAASE,EAAI,EAAGQ,EAAMF,EAAS,OAAQN,EAAIQ,EAAKR,IAAK,CACnD,IAAME,EAAQI,EAASN,CAAC,EAAE,QAAQF,CAAQ,EAC1C,GAAII,EACF,OAAOA,CAEX,CACA,MAAO,CAAC,CACV,CACA,SAASa,GAAe1B,EAAM2B,EAAO,CACnC,IAAMC,EAAS,IAAI,IAAIC,EAAQ,EACzBC,EAAMC,EAAWC,GAAQ,CAC7B,IAAMC,EAAQjC,EAAK,EACnB,GAAI,CACF,OAAO,IAAI,IAAIiC,EAAOL,CAAM,CAC9B,MAAc,CACZ,eAAQ,MAAM,gBAAgBK,CAAK,EAAE,EAC9BD,CACT,CACF,EAAGJ,EAAQ,CACT,OAAQ,CAACL,EAAGC,IAAMD,EAAE,OAASC,EAAE,IACjC,CAAC,EACKU,EAAWH,EAAW,IAAMD,EAAI,EAAE,QAAQ,EAC1CK,EAASJ,EAAW,IAAMD,EAAI,EAAE,OAAQ,EAAI,EAC5CM,EAAOL,EAAW,IAAMD,EAAI,EAAE,IAAI,EAClCO,EAAM,IAAM,GAClB,MAAO,CACL,IAAI,UAAW,CACb,OAAOH,EAAS,CAClB,EACA,IAAI,QAAS,CACX,OAAOC,EAAO,CAChB,EACA,IAAI,MAAO,CACT,OAAOC,EAAK,CACd,EACA,IAAI,OAAQ,CACV,OAAOT,EAAM,CACf,EACA,IAAI,KAAM,CACR,OAAOU,EAAI,CACb,EACA,MAAOC,GAAiBC,GAAGJ,EAAQ,IAAMK,GAAoBV,EAAI,CAAC,CAAC,CAAC,CACtE,CACF,CACA,IAAIW,GACJ,SAASC,IAAY,CACnB,OAAOD,EACT,CACA,IAAIE,GAAc,GAClB,SAASC,IAAiB,CACxB,OAAOD,EACT,CACA,SAASE,GAAe/B,EAAO,CAC7B6B,GAAc7B,CAChB,CACA,SAASgC,GAAoBC,EAAa9B,EAAU+B,EAAYC,EAAU,CAAC,EAAG,CAC5E,GAAM,CACJ,OAAQ,CAACC,EAAQC,CAAS,EAC1B,MAAAC,EAAQ,CAAC,CACX,EAAIL,EACEM,EAAYD,EAAM,YAAcE,GAAKA,GACrCC,EAAaH,EAAM,aAAeE,GAAKA,GACvCE,EAAcJ,EAAM,aAAeK,GAAkB,EACrDC,EAAWC,GAAY,GAAIV,EAAQ,MAAQ,EAAE,EACnD,GAAIS,IAAa,OACf,MAAM,IAAI,MAAM,GAAGA,CAAQ,2BAA2B,EAC7CA,GAAY,CAACR,EAAO,EAAE,OAC/BC,EAAU,CACR,MAAOO,EACP,QAAS,GACT,OAAQ,EACV,CAAC,EAEH,GAAM,CAACE,EAAWC,CAAY,EAAIC,EAAa,EAAK,EAGhDC,EAGEC,EAAa,CAACC,EAAWC,IAAc,CACvCA,EAAU,QAAUC,EAAU,GAAKD,EAAU,QAAUvC,EAAM,IAC7DoC,IAAyB,QAAWF,EAAa,EAAI,EACzDpB,GAASwB,EACTF,EAAuBG,EACvBE,GAAgB,IAAM,CAChBL,IAAyBG,IAC7BG,EAAaN,EAAqB,KAAK,EACvCO,EAASP,EAAqB,KAAK,EACnCQ,GAAqB,EAChBC,GAAUC,EAAY,CAAC,EAAE,CAAC,CAAC,EAClC,CAAC,EAAE,QAAQ,IAAM,CACXV,IAAyBG,GAG7BQ,GAAM,IAAM,CACVjC,GAAS,OACLwB,IAAc,YAAYU,GAAYZ,CAAoB,EAC9DF,EAAa,EAAK,EAClBE,EAAuB,MACzB,CAAC,CACH,CAAC,EACH,EACM,CAACI,EAAWE,CAAY,EAAIP,EAAaZ,EAAO,EAAE,KAAK,EACvD,CAACvB,EAAO2C,CAAQ,EAAIR,EAAaZ,EAAO,EAAE,KAAK,EAC/CzC,EAAWiB,GAAeyC,EAAWxC,CAAK,EAC1CiD,EAAY,CAAC,EACbH,EAAcX,EAAaU,EAAWK,GAAc,EAAI,CAAC,CAAC,EAC1DnE,EAAUqB,EAAW,IACrB,OAAOkB,EAAQ,cAAiB,WAC3BxB,GAAgBR,EAAS,EAAGgC,EAAQ,aAAaxC,EAAS,QAAQ,CAAC,EAErEgB,GAAgBR,EAAS,EAAGR,EAAS,QAAQ,CACrD,EACKqE,EAASxC,GAAiB,IAAM,CACpC,IAAMyC,EAAIrE,EAAQ,EACZoE,EAAS,CAAC,EAChB,QAASnE,EAAI,EAAGA,EAAIoE,EAAE,OAAQpE,IAC5B,OAAO,OAAOmE,EAAQC,EAAEpE,CAAC,EAAE,MAAM,EAEnC,OAAOmE,CACT,CAAC,EACKE,GAAY,CAChB,QAAStB,EACT,KAAM,IAAMA,EACZ,OAAQ,IAAM,KACd,YAAYuB,EAAI,CACd,OAAOtB,GAAYD,EAAUuB,CAAE,CACjC,CACF,EAGA,OAAAC,GAAmB3C,GAAGW,EAAQA,GAAUc,EAAW,SAAUd,CAAM,EAAG,CACpE,MAAO,EACT,CAAC,CAAC,EACK,CACL,KAAM8B,GACN,SAAAvE,EACA,OAAAqE,EACA,UAAAlB,EACA,WAAAL,EACA,UAAAF,EACA,iBAAA8B,GACA,QAAAzE,EACA,YAAA8C,EACA,aAAA4B,GACA,aAAcnC,EAAQ,eAAiB,OAAY,GAAOA,EAAQ,aAClE,YAAAwB,CACF,EACA,SAASY,GAAkBzE,EAAOqE,EAAIhC,EAAS,CAE7CqC,EAAQ,IAAM,CACZ,GAAI,OAAOL,GAAO,SAAU,CACrBA,IAAe7B,EAAM,GACxBA,EAAM,GAAG6B,CAAE,EAEX,QAAQ,KAAK,sDAAsD,GAErE,MACF,CACA,IAAMM,GAAY,CAACN,GAAMA,EAAG,CAAC,IAAM,IAC7B,CACJ,QAAAO,GACA,QAAAC,GACA,OAAAC,GACA,MAAOC,EACT,EAAI,CACF,QAAS,GACT,QAAS,CAACJ,GACV,OAAQ,GACR,GAAGtC,CACL,EACI9C,GACEyF,GAAaH,GAAU7E,EAAM,YAAYqE,CAAE,EAAItB,GAAY4B,KAAcpF,GAAI+C,EAAO,EAAE,QAAU/C,GAAE,MAAM,GAAG,EAAE,CAAC,GAAK,GAAI8E,CAAE,EAC/H,GAAIW,KAAe,OACjB,MAAM,IAAI,MAAM,SAASX,CAAE,0BAA0B,EAChD,GAAIL,EAAU,QAAUiB,GAC7B,MAAM,IAAI,MAAM,oBAAoB,EAEtC,IAAMC,GAAU3B,EAAU,EAC1B,GAAIyB,KAAeE,IAAWH,KAAchE,EAAM,EAChD,GAAI6C,EAAU,CACZ,IAAMuB,GAAIC,GAAgB,EAC1BD,KAAMA,GAAE,SAAW,CACjB,OAAQ,IACR,QAAS,IAAI,QAAQ,CACnB,SAAUH,EACZ,CAAC,CACH,GACAzC,EAAU,CACR,MAAOyC,GACP,QAAAJ,GACA,OAAAE,GACA,MAAOC,EACT,CAAC,CACH,MAAWnC,EAAY,QAAQoC,GAAY3C,CAAO,IAChD2B,EAAU,KAAK,CACb,MAAOkB,GACP,QAAAN,GACA,OAAAE,GACA,MAAO/D,EAAM,CACf,CAAC,EACDqC,EAAW,WAAY,CACrB,MAAO4B,GACP,MAAOD,EACT,CAAC,EAGP,CAAC,CACH,CACA,SAASR,GAAiBvE,EAAO,CAE/B,OAAAA,EAAQA,GAASqF,GAAWC,EAAe,GAAKlB,GACzC,CAACC,EAAIhC,IAAYoC,GAAkBzE,EAAOqE,EAAIhC,CAAO,CAC9D,CACA,SAAS0B,GAAYwB,EAAM,CACzB,IAAMC,EAAQxB,EAAU,CAAC,EACrBwB,IACFjD,EAAU,CACR,GAAGgD,EACH,QAASC,EAAM,QACf,OAAQA,EAAM,MAChB,CAAC,EACDxB,EAAU,OAAS,EAEvB,CACA,SAASQ,GAAatD,EAAKmB,EAAU,CAAC,EAAG,CACvC,IAAMvC,EAAUe,GAAgBR,EAAS,EAAGa,EAAI,QAAQ,EAClDuE,GAAa5D,GACnBA,GAAS,UACT,QAAS5B,MAASH,EAAS,CACzB,GAAM,CACJ,MAAAE,GACA,OAAAkE,EACF,EAAIpE,EAAQG,EAAK,EACjBD,GAAM,WAAaA,GAAM,UAAU,SAAWA,GAAM,UAAU,QAAQ,EACtE,GAAM,CACJ,QAAAvB,EACF,EAAIuB,GACJ+B,GAAc,GACdM,EAAQ,aAAe5D,IAAWiH,GAAatD,EAAW,EAAG,IAAM3D,GAAQ,CACzE,OAAAyF,GACA,SAAU,CACR,SAAUhD,EAAI,SACd,OAAQA,EAAI,OACZ,KAAMA,EAAI,KACV,MAAOU,GAAoBV,CAAG,EAC9B,MAAO,KACP,IAAK,EACP,EACA,OAAQ,SACV,CAAC,CAAC,EACFa,GAAc,EAChB,CACAF,GAAS4D,EACX,CACA,SAASxB,IAAgB,CACvB,IAAMkB,EAAIC,GAAgB,EAC1B,OAAOD,GAAKA,EAAE,QAAUA,EAAE,OAAO,WAAa,CAACA,EAAE,OAAO,UAAU,EAAI,CAAC,CACzE,CACF,CACA,SAASQ,GAAmBC,EAAQC,EAAQC,EAAQ7F,EAAO,CACzD,GAAM,CACJ,KAAA1B,EACA,SAAAsB,EACA,OAAAqE,CACF,EAAI0B,EACE,CACJ,QAAAtG,EACA,UAAAd,EACA,QAAAC,CACF,EAAIwB,EAAM,EAAE,MACNb,EAAO+B,EAAW,IAAMlB,EAAM,EAAE,IAAI,EAC1CzB,GAAaA,EAAU,SAAWA,EAAU,QAAQ,EACpDuD,GAAc,GACd,IAAMgE,EAAOtH,EAAUA,EAAQ,CAC7B,OAAAyF,EACA,SAAArE,EACA,OAAQgC,IAAU,SACpB,CAAC,EAAI,OACL,OAAAE,GAAc,GACA,CACZ,OAAA8D,EACA,QAAAvG,EACA,KAAAF,EACA,OAAQ,IAAMZ,EAAYwH,EAAgBxH,EAAW,CACnD,OAAA0F,EACA,SAAArE,EACA,KAAAkG,EACA,IAAI,UAAW,CACb,OAAOD,EAAO,CAChB,CACF,CAAC,EAAIA,EAAO,EACZ,YAAYzB,EAAI,CACd,OAAOtB,GAAYxE,EAAK,KAAK,EAAG8F,EAAIjF,EAAK,CAAC,CAC5C,CACF,CAEF,CAEA,IAAM6G,GAAwBL,GAAUM,GAAS,CAC/C,GAAM,CACJ,KAAA3H,CACF,EAAI2H,EACE5F,EAAY3B,GAAS,IAAMuH,EAAM,QAAQ,EACzC7F,EAAWc,EAAW,IAAMhB,GAAeG,EAAU,EAAG4F,EAAM,MAAQ,EAAE,CAAC,EAC3EC,EACEC,EAAclE,GAAoB0D,EAAQvF,EAAU,IAAM8F,EAAS,CACvE,KAAA5H,EACA,aAAc2H,EAAM,aACpB,aAAcA,EAAM,YACtB,CAAC,EACD,OAAAN,EAAO,QAAUA,EAAO,OAAOQ,CAAW,EACnCJ,EAAkBK,GAAiB,SAAU,CAClD,MAAOD,EACP,IAAI,UAAW,CACb,OAAOJ,EAAkBM,GAAM,CAC7B,YAAaF,EACb,IAAI,MAAO,CACT,OAAOF,EAAM,IACf,EACA,IAAI,SAAU,CACZ,OAAOA,EAAM,aAAeA,EAAM,QACpC,EACA,IAAI,UAAW,CACb,MAAO,CAAC/E,EAAK,KAAOgF,EAAUI,GAAS,IAAM,IAAI,EAAGP,EAAkBQ,GAAQ,CAC5E,YAAaJ,EACb,IAAI,UAAW,CACb,OAAO/F,EAAS,CAClB,CACF,CAAC,CAAC,CACJ,CACF,CAAC,CACH,CACF,CAAC,CACH,EACA,SAASiG,GAAKJ,EAAO,CACnB,IAAMrG,EAAWqG,EAAM,YAAY,SAC7BhC,EAASgC,EAAM,YAAY,OAC3BH,EAAO5E,EAAW,IAAM+E,EAAM,SAAWxB,EAAQ,IAAM,CAC3DzC,GAAe,EAAI,EACnBiE,EAAM,QAAQ,CACZ,OAAAhC,EACA,SAAArE,EACA,OAAQiC,GAAU,GAAK,SACzB,CAAC,EACDG,GAAe,EAAK,CACtB,CAAC,CAAC,EACF,OAAO+D,EAAkBS,GAAM,CAC7B,IAAI,MAAO,CACT,OAAOP,EAAM,IACf,EACA,MAAO,GACP,IAAI,UAAW,CACb,OAAOA,EAAM,QACf,EACA,SAAUI,GAAQN,EAAkBM,EAAM,CACxC,OAAQpC,EACR,SAAUrE,EACV,IAAI,MAAO,CACT,OAAOkG,EAAK,CACd,EACA,IAAI,UAAW,CACb,OAAOG,EAAM,QACf,CACF,CAAC,CACH,CAAC,CACH,CACA,SAASM,GAAON,EAAO,CACrB,GAAItC,EAAU,CACZ,IAAMuB,EAAIC,GAAgB,EAC1B,GAAID,GAAKA,EAAE,QAAUA,EAAE,OAAO,SAAU,CACtCuB,GAASvB,EAAGe,EAAM,YAAaA,EAAM,QAAQ,EAC7C,MACF,CACAf,KAAOA,EAAE,SAAWA,EAAE,OAAS,CAAC,IAAI,UAAYA,EAAE,OAAO,QAAUe,EAAM,YAAY,QAAQ,EAAE,IAAI,CAAC,CAClG,MAAAlG,EACA,KAAAZ,EACA,OAAA8E,CACF,KAAO,CACL,KAAMlE,EAAM,aACZ,QAASA,EAAM,QACf,MAAOZ,EACP,OAAA8E,EACA,KAAMlE,EAAM,IACd,EAAE,GACJ,CACA,IAAM2G,EAAY,CAAC,EACfC,EACEC,EAAc1F,EAAWQ,GAAGuE,EAAM,YAAY,QAAS,CAACY,EAAaC,EAAa3F,IAAS,CAC/F,IAAI4F,EAAQD,GAAeD,EAAY,SAAWC,EAAY,OACxDxB,EAAO,CAAC,EACd,QAASxF,EAAI,EAAGQ,EAAMuG,EAAY,OAAQ/G,EAAIQ,EAAKR,IAAK,CACtD,IAAMkH,EAAYF,GAAeA,EAAYhH,CAAC,EACxCmH,EAAYJ,EAAY/G,CAAC,EAC3BqB,GAAQ6F,GAAaC,EAAU,MAAM,MAAQD,EAAU,MAAM,IAC/D1B,EAAKxF,CAAC,EAAIqB,EAAKrB,CAAC,GAEhBiH,EAAQ,GACJL,EAAU5G,CAAC,GACb4G,EAAU5G,CAAC,EAAE,EAEfoH,GAAWC,GAAW,CACpBT,EAAU5G,CAAC,EAAIqH,EACf7B,EAAKxF,CAAC,EAAI4F,GAAmBO,EAAM,YAAaX,EAAKxF,EAAI,CAAC,GAAKmG,EAAM,YAAY,KAAMmB,GAAa,IAAMR,EAAY,EAAE9G,EAAI,CAAC,CAAC,EAAG,IAAMmG,EAAM,YAAY,QAAQ,EAAEnG,CAAC,CAAC,CACvK,CAAC,EAEL,CAEA,OADA4G,EAAU,OAAOG,EAAY,MAAM,EAAE,QAAQM,GAAWA,EAAQ,CAAC,EAC7DhG,GAAQ4F,EACH5F,GAETwF,EAAOrB,EAAK,CAAC,EACNA,EACT,CAAC,CAAC,EACF,OAAO8B,GAAa,IAAMR,EAAY,GAAKD,CAAI,EAAE,CACnD,CACA,IAAMS,GAAeC,GACZ,IAAMtB,EAAkBS,GAAM,CACnC,IAAI,MAAO,CACT,OAAOa,EAAM,CACf,EACA,MAAO,GACP,SAAUA,GAAStB,EAAkBV,GAAgB,SAAU,CAC7D,MAAOgC,EACP,IAAI,UAAW,CACb,OAAOA,EAAM,OAAO,CACtB,CACF,CAAC,CACH,CAAC,EAYH,SAASC,GAASC,EAAOC,EAAaC,EAAU,CAC9C,IAAMC,EAAM,IAAI,IAAIH,EAAM,QAAQ,GAAG,EAC/BI,EAAcC,GAAgBH,EAAU,IAAI,IAAIF,EAAM,OAAO,aAAeA,EAAM,QAAQ,GAAG,EAAE,QAAQ,EACvGM,EAAUD,GAAgBH,EAAUC,EAAI,QAAQ,EACtD,QAASI,EAAQ,EAAGA,EAAQD,EAAQ,OAAQC,IAAS,EAC/C,CAACH,EAAYG,CAAK,GAAKD,EAAQC,CAAK,EAAE,QAAUH,EAAYG,CAAK,EAAE,SAAOP,EAAM,OAAO,SAAW,IACtG,GAAM,CACJ,MAAAQ,EACA,OAAAC,CACF,EAAIH,EAAQC,CAAK,EACjBC,EAAM,SAAWA,EAAM,QAAQ,CAC7B,OAAAC,EACA,SAAUR,EAAY,SACtB,OAAQ,SACV,CAAC,CACH,CACF,CAEA,SAASS,GAAU,CAACC,EAAOC,CAAQ,EAAGC,EAAKC,EAAK,CAC9C,MAAO,CAACD,EAAM,IAAMA,EAAIF,EAAM,CAAC,EAAIA,EAAOG,EAAMC,GAAKH,EAASE,EAAIC,CAAC,CAAC,EAAIH,CAAQ,CAClF,CACA,SAASI,GAAcC,EAAU,CAC/B,GAAIA,IAAa,IACf,OAAO,KAGT,GAAI,CACF,OAAO,SAAS,cAAcA,CAAQ,CACxC,MAAY,CACV,OAAO,IACT,CACF,CACA,SAASC,GAAaC,EAAQ,CAC5B,IAAIC,EAAS,GACPC,EAAOV,GAAS,OAAOA,GAAU,SAAW,CAChD,MAAAA,CACF,EAAIA,EACEW,EAASZ,GAAUa,EAAaF,EAAKF,EAAO,IAAI,CAAC,EAAG,CACxD,OAAQ,CAACK,EAAGC,IAAMD,EAAE,QAAUC,EAAE,OAASD,EAAE,QAAUC,EAAE,KACzD,CAAC,EAAG,OAAWC,IACb,CAACN,GAAUD,EAAO,IAAIO,CAAI,EACtBC,EAAa,UAAY,CAACA,EAAa,OAAMA,EAAa,KAAO,IAC9DD,EACR,EACD,OAAAP,EAAO,MAAQS,GAAUT,EAAO,KAAK,CAACR,EAAQQ,EAAO,IAAI,IAAM,CAC7DC,EAAS,GACTE,EAAO,CAAC,EAAED,EAAKV,CAAK,CAAC,EACrBS,EAAS,EACX,CAAC,CAAC,EACKS,GAAsB,CAC3B,OAAAP,EACA,OAAQH,EAAO,OACf,MAAOA,EAAO,KAChB,CAAC,CACH,CACA,SAASW,GAAUC,EAAQC,EAAMC,EAAS,CACxC,OAAAF,EAAO,iBAAiBC,EAAMC,CAAO,EAC9B,IAAMF,EAAO,oBAAoBC,EAAMC,CAAO,CACvD,CACA,SAASC,GAAaC,EAAMC,EAAa,CACvC,IAAMC,EAAKrB,GAAc,IAAImB,CAAI,EAAE,EAC/BE,EACFA,EAAG,eAAe,EACTD,GACT,OAAO,SAAS,EAAG,CAAC,CAExB,CAEA,SAASE,GAAQnC,EAAK,CACpB,IAAMoC,EAAI,IAAI,IAAIpC,CAAG,EACrB,OAAOoC,EAAE,SAAWA,EAAE,MACxB,CACA,SAASC,GAAaC,EAAO,CAC3B,IAAIC,EACEC,EAAM,CACV,MAAOF,EAAM,MAAQC,EAAIE,GAAgB,IAAMN,GAAQI,EAAE,QAAQ,GAAG,GAAK,EAC3E,EACA,OAAOb,GAAsB,CAC3B,OAAQ,CAAC,IAAMc,EAAKjB,GAAQ,OAAO,OAAOiB,EAAKjB,CAAI,CAAC,CACtD,CAAC,EAAEe,CAAK,CACV,CAEA,IAAMI,GAAiB,WACjBC,GAAkB,IAClBC,GAAgB,KAClBC,GAAW,IAAI,IAGdC,GACH,YAAY,IAAM,CAChB,IAAMC,EAAM,KAAK,IAAI,EACrB,OAAS,CAACC,EAAGpC,CAAC,IAAKiC,GAAS,QAAQ,EAC9B,CAACjC,EAAE,CAAC,EAAE,OAASmC,EAAMnC,EAAE,CAAC,EAAIgC,IAC9BC,GAAS,OAAOG,CAAC,CAGvB,EAAG,GAAM,EAEX,SAASC,IAAW,CAClB,GAAI,CAACH,EAAU,OAAOD,GACtB,IAAMK,EAAMT,GAAgB,EAC5B,GAAI,CAACS,EAAK,MAAM,IAAI,MAAM,2BAA2B,EACrD,OAAQA,EAAI,SAAWA,EAAI,OAAS,CAAC,IAAI,QAAUA,EAAI,OAAO,MAAQ,IAAI,IAC5E,CAgBA,SAASC,GAAMC,EAAIC,EAAM,CAEnBD,EAAG,MAAKA,EAAKA,EAAG,KACpB,IAAME,EAAW,IAAIC,IAAS,CAC5B,IAAMJ,EAAQK,GAAS,EACjBC,EAASC,GAAU,EACnBC,EAAcC,GAAe,EAE7BC,EADQC,GAAS,EACEC,GAAY,EAAI,OACnCC,EAAM,KAAK,IAAI,EACfC,EAAMZ,EAAOa,GAAQX,CAAI,EAC3BY,EAAShB,EAAM,IAAIc,CAAG,EACtBG,EACJ,GAAIC,EAAU,CACZ,IAAMC,EAAIC,GAAgB,EAC1B,GAAID,EAAG,CACL,IAAME,GAAYF,EAAE,SAAWA,EAAE,OAAS,CAAC,IAAI,SAC/C,GAAIE,EAAU,CACZ,IAAMC,EAAOH,IAAMA,EAAE,OAAO,OAASA,EAAE,OAAO,KAAO,CAAC,IACtD,GAAIG,GAAQR,KAAOQ,EAAM,OAAOA,EAAKR,CAAG,EACxC,GAAI,MAAM,QAAQO,CAAQ,GAAK,CAACA,EAAS,SAASP,CAAG,EACnD,OAAAQ,EAAKR,CAAG,EAAI,OACL,QAAQ,QAAQ,CAE3B,CACF,CACF,CAKA,GAJIS,GAAY,GAAK,CAACL,IACpBD,EAAW,GACXO,GAAU,IAAMR,EAAO,CAAC,EAAE,OAAO,GAE/BA,GAAUA,EAAO,CAAC,IAAME,GAAYZ,IAAW,UAAYU,EAAO,CAAC,EAAE,OAAS,KAAK,IAAI,EAAIA,EAAO,CAAC,EAAIS,IAAkB,CACvHR,IACFD,EAAO,CAAC,EAAE,QACVA,EAAO,CAAC,EAAE,CAAC,EAAE,GAEXA,EAAO,CAAC,IAAM,WAAaV,IAAW,YACxCU,EAAO,CAAC,EAAIH,GAEd,IAAIa,EAAMV,EAAO,CAAC,EAClB,OAAIV,IAAW,YACboB,EAAM,SAAUV,EAAO,CAAC,EAAIA,EAAO,CAAC,EAAE,KAAKW,EAAe,EAAK,EAAGA,EAAe,EAAI,CAAC,EAAIA,EAAe,EAAK,EAAEX,EAAO,CAAC,CAAC,EACzH,CAACE,GAAYZ,IAAW,YAAcsB,GAAgB,IAAMZ,EAAO,CAAC,EAAE,CAAC,EAAEA,EAAO,CAAC,CAAC,CAAC,GAErFR,GAAe,SAAUkB,GAAOA,EAAI,MAAM,IAAM,CAAC,CAAC,EAC3CA,CACT,CACA,IAAIA,EAAM,CAACR,GAAYW,EAAa,SAAWA,EAAa,IAAIf,CAAG,EAAIe,EAAa,KAAKf,CAAG,EAC1Fb,EAAG,GAAGG,CAAI,EAcZ,GAbIY,GACFA,EAAO,CAAC,EAAIH,EACZG,EAAO,CAAC,EAAIU,EACZV,EAAO,CAAC,EAAIV,EACZ,CAACY,GAAYZ,IAAW,YAAcsB,GAAgB,IAAMZ,EAAO,CAAC,EAAE,CAAC,EAAEA,EAAO,CAAC,CAAC,CAAC,IAEnFhB,EAAM,IAAIc,EAAKE,EAAS,CAACH,EAAKa,EAAKpB,EAAQwB,EAAajB,CAAG,CAAC,CAAC,EAC7DG,EAAO,CAAC,EAAE,MAAQ,GAEhBC,IACFD,EAAO,CAAC,EAAE,QACVA,EAAO,CAAC,EAAE,CAAC,EAAE,GAEXE,EAAU,CACZ,IAAMC,EAAIC,GAAgB,EAC1B,GAAID,GAAKA,EAAE,OAAO,SAAU,OAAOA,EAAE,OAAO,KAAKL,CAAG,EAAIY,CAC1D,CAMA,GALIpB,IAAW,YACboB,EAAM,SAAUA,EAAMA,EAAI,KAAKC,EAAe,EAAK,EAAGA,EAAe,EAAI,CAAC,EAAIA,EAAe,EAAK,EAAED,CAAG,GAEzGlB,GAAe,SAAUkB,GAAOA,EAAI,MAAM,IAAM,CAAC,CAAC,EAE9CR,GAAYW,EAAa,SAAWA,EAAa,QAAQ,OAAS,CAACA,EAAa,QAAQ,UAAW,CACrG,IAAMV,EAAIC,GAAgB,GACzB,CAACD,GAAK,CAACA,EAAE,aAAeU,EAAa,QAAQ,UAAUf,EAAKY,CAAG,CAClE,CACA,OAAOA,EACP,SAASC,EAAeI,EAAO,CAC7B,MAAO,OAAMC,GAAK,CAChB,GAAIA,aAAa,SAAU,CACzB,IAAMC,EAAMD,EAAE,QAAQ,IAAIE,EAAc,EACxC,GAAID,IAAQ,KAAM,CAEhB,GAAIvB,GAAYuB,EAAI,WAAW,GAAG,EAAGL,GAAgB,IAAM,CACzDlB,EAASuB,EAAK,CACZ,QAAS,EACX,CAAC,CACH,CAAC,UAAW,CAACf,EAAU,OAAO,SAAS,KAAOe,UAAaf,EAAU,CACnE,IAAMC,EAAIC,GAAgB,EACtBD,IAAGA,EAAE,SAAW,CAClB,OAAQ,IACR,QAAS,IAAI,QAAQ,CACnB,SAAUc,CACZ,CAAC,CACH,EACF,CACA,MACF,CACID,EAAE,aAAYA,EAAI,MAAMA,EAAE,WAAW,EAC3C,CACA,GAAID,EAAO,MAAMC,EACjB,OAAOA,CACT,CACF,CACF,EACA,OAAA7B,EAAS,OAAS,IAAIC,IAASF,EAAOa,GAAQX,CAAI,EAClDD,EAAS,IAAMD,EACRC,CACT,CACAH,GAAM,IAAM,CAACc,EAAKqB,IAAU,CAC1B,IAAMnC,EAAQK,GAAS,EACjBQ,EAAM,KAAK,IAAI,EACjBG,EAAShB,EAAM,IAAIc,CAAG,EACtBE,GACFA,EAAO,CAAC,EAAIH,EACZG,EAAO,CAAC,EAAImB,EACZnB,EAAO,CAAC,EAAI,YAEZhB,EAAM,IAAIc,EAAKE,EAAS,CAACH,EAAKsB,EAAM,CAAEL,EAAajB,CAAG,CAAC,CAAC,EACxDG,EAAO,CAAC,EAAE,MAAQ,EAEtB,EACAhB,GAAM,MAAQ,IAAMK,GAAS,EAAE,MAAM,EAUrC,SAAS+B,GAAQC,EAAM,CACrB,OAAO,KAAK,UAAUA,EAAM,CAACC,EAAGC,IAAQC,GAAcD,CAAG,EAAI,OAAO,KAAKA,CAAG,EAAE,KAAK,EAAE,OAAO,CAACE,EAAQC,KACnGD,EAAOC,CAAG,EAAIH,EAAIG,CAAG,EACdD,GACN,CAAC,CAAC,EAAIF,CAAG,CACd,CACA,SAASC,GAAcG,EAAK,CAC1B,IAAIC,EACJ,OAAOD,GAAO,MAAQ,OAAOA,GAAQ,WAAa,EAAEC,EAAQ,OAAO,eAAeD,CAAG,IAAMC,IAAU,OAAO,UAC9G,CAEA,IAAMC,GAAyB,IAAI,IAmInC,SAASC,GAAkBC,EAAU,GAAMC,EAAgB,GAAOC,EAAa,WAAYC,EAAc,CACvG,OAAOC,GAAU,CACf,IAAMC,EAAWD,EAAO,KAAK,KAAK,EAC5BE,EAAoBF,EAAO,iBAAiBA,EAAO,IAAI,EACzDG,EAAiB,CAAC,EACtB,SAASC,EAAMC,EAAI,CACjB,OAAOA,EAAG,eAAiB,4BAC7B,CACA,SAASC,EAAaC,EAAK,CACzB,GAAIA,EAAI,kBAAoBA,EAAI,SAAW,GAAKA,EAAI,SAAWA,EAAI,QAAUA,EAAI,SAAWA,EAAI,SAAU,OAC1G,IAAMC,EAAID,EAAI,aAAa,EAAE,KAAKF,GAAMA,aAAc,MAAQA,EAAG,SAAS,YAAY,IAAM,GAAG,EAC/F,GAAI,CAACG,GAAKX,GAAiB,CAACW,EAAE,aAAa,MAAM,EAAG,OACpD,IAAMC,EAAML,EAAMI,CAAC,EACbE,EAAOD,EAAMD,EAAE,KAAK,QAAUA,EAAE,KAEtC,IADeC,EAAMD,EAAE,OAAO,QAAUA,EAAE,SAC5B,CAACE,GAAQ,CAACF,EAAE,aAAa,OAAO,EAAG,OACjD,IAAMG,GAAOH,EAAE,aAAa,KAAK,GAAK,IAAI,MAAM,KAAK,EACrD,GAAIA,EAAE,aAAa,UAAU,GAAKG,GAAOA,EAAI,SAAS,UAAU,EAAG,OACnE,IAAMC,EAAMH,EAAM,IAAI,IAAIC,EAAM,SAAS,OAAO,EAAI,IAAI,IAAIA,CAAI,EAChE,GAAI,EAAAE,EAAI,SAAW,OAAO,SAAS,QAAUX,GAAYW,EAAI,UAAY,CAACA,EAAI,SAAS,YAAY,EAAE,WAAWX,EAAS,YAAY,CAAC,GACtI,MAAO,CAACO,EAAGI,CAAG,CAChB,CACA,SAASC,EAAkBN,EAAK,CAC9B,IAAMO,EAAMR,EAAaC,CAAG,EAC5B,GAAI,CAACO,EAAK,OACV,GAAM,CAACN,EAAGI,CAAG,EAAIE,EACXC,EAAKf,EAAO,UAAUY,EAAI,SAAWA,EAAI,OAASA,EAAI,IAAI,EAC1DI,EAAQR,EAAE,aAAa,OAAO,EACpCD,EAAI,eAAe,EACnBL,EAAkBa,EAAI,CACpB,QAAS,GACT,QAASP,EAAE,aAAa,SAAS,EACjC,OAAQ,CAACA,EAAE,aAAa,UAAU,EAClC,MAAOQ,GAAS,KAAK,MAAMA,CAAK,CAClC,CAAC,CACH,CACA,SAASC,EAAoBV,EAAK,CAChC,IAAMO,EAAMR,EAAaC,CAAG,EAC5B,GAAI,CAACO,EAAK,OACV,GAAM,CAACN,EAAGI,CAAG,EAAIE,EACb,OAAOf,GAAiB,aAC1Ba,EAAI,SAAWb,EAAaa,EAAI,QAAQ,GAErCT,EAAeS,EAAI,QAAQ,GAAGZ,EAAO,aAAaY,EAAK,CAC1D,YAAaJ,EAAE,aAAa,SAAS,IAAM,OAC7C,CAAC,CACH,CACA,SAASU,EAAeX,EAAK,CAC3B,IAAMO,EAAMR,EAAaC,CAAG,EAC5B,GAAI,CAACO,EAAK,OACV,GAAM,CAACN,EAAGI,CAAG,EAAIE,EACb,OAAOf,GAAiB,aAC1Ba,EAAI,SAAWb,EAAaa,EAAI,QAAQ,GAEtC,CAAAT,EAAeS,EAAI,QAAQ,IAC/BT,EAAeS,EAAI,QAAQ,EAAI,WAAW,IAAM,CAC9CZ,EAAO,aAAaY,EAAK,CACvB,YAAaJ,EAAE,aAAa,SAAS,IAAM,OAC7C,CAAC,EACD,OAAOL,EAAeS,EAAI,QAAQ,CACpC,EAAG,GAAG,EACR,CACA,SAASO,EAAgBZ,EAAK,CAC5B,IAAMO,EAAMR,EAAaC,CAAG,EAC5B,GAAI,CAACO,EAAK,OACV,GAAM,CAAC,CAAEF,CAAG,EAAIE,EACZ,OAAOf,GAAiB,aAC1Ba,EAAI,SAAWb,EAAaa,EAAI,QAAQ,GAEtCT,EAAeS,EAAI,QAAQ,IAC7B,aAAaT,EAAeS,EAAI,QAAQ,CAAC,EACzC,OAAOT,EAAeS,EAAI,QAAQ,EAEtC,CACA,SAASQ,EAAiBb,EAAK,CAC7B,GAAIA,EAAI,iBAAkB,OAC1B,IAAIc,EAAYd,EAAI,WAAaA,EAAI,UAAU,aAAa,YAAY,EAAIA,EAAI,UAAU,aAAa,YAAY,EAAIA,EAAI,OAAO,aAAa,QAAQ,EACvJ,GAAI,CAACc,EAAW,OAChB,GAAI,CAACA,EAAU,WAAW,iBAAiB,EAAG,CAE5C,IAAMT,EAAM,IAAI,IAAIS,EAAWC,EAAQ,EAEvC,GADAD,EAAYrB,EAAO,UAAUY,EAAI,SAAWA,EAAI,MAAM,EAClD,CAACS,EAAU,WAAWvB,CAAU,EAAG,MACzC,CACA,GAAIS,EAAI,OAAO,OAAO,YAAY,IAAM,OAAQ,MAAM,IAAI,MAAM,2CAA2C,EAC3G,IAAMgB,EAAUC,GAAQ,IAAIH,CAAS,EACrC,GAAIE,EAAS,CACXhB,EAAI,eAAe,EACnB,IAAMkB,EAAO,IAAI,SAASlB,EAAI,OAAQA,EAAI,SAAS,EACnDgB,EAAQ,KAAK,CACX,EAAGvB,EACH,EAAGO,EAAI,MACT,EAAGA,EAAI,OAAO,UAAY,sBAAwBkB,EAAO,IAAI,gBAAgBA,CAAI,CAAC,CACpF,CACF,CAGAC,GAAe,CAAC,QAAS,QAAQ,CAAC,EAClC,SAAS,iBAAiB,QAASb,CAAiB,EAChDjB,IACF,SAAS,iBAAiB,YAAasB,CAAc,EACrD,SAAS,iBAAiB,WAAYC,CAAe,EACrD,SAAS,iBAAiB,UAAWF,CAAmB,EACxD,SAAS,iBAAiB,aAAcA,CAAmB,GAE7D,SAAS,iBAAiB,SAAUG,CAAgB,EACpDO,GAAU,IAAM,CACd,SAAS,oBAAoB,QAASd,CAAiB,EACnDjB,IACF,SAAS,oBAAoB,YAAasB,CAAc,EACxD,SAAS,oBAAoB,WAAYC,CAAe,EACxD,SAAS,oBAAoB,UAAWF,CAAmB,EAC3D,SAAS,oBAAoB,aAAcA,CAAmB,GAEhE,SAAS,oBAAoB,SAAUG,CAAgB,CACzD,CAAC,CACH,CACF,CAEA,SAASQ,GAAOC,EAAO,CACrB,GAAIC,EAAU,OAAOC,GAAaF,CAAK,EACvC,IAAMG,EAAY,KAET,CACL,MAFU,OAAO,SAAS,SAAS,QAAQ,OAAQ,GAAG,EAAI,OAAO,SAAS,OAE7D,OAAO,SAAS,KAC7B,MAAO,OAAO,QAAQ,KACxB,GAEIC,EAAcC,GAAkB,EACtC,OAAOC,GAAa,CAClB,IAAKH,EACL,IAAI,CACF,MAAAI,EACA,QAAAC,EACA,OAAAC,EACA,MAAAtB,CACF,EAAG,CACGqB,EACF,OAAO,QAAQ,aAAaE,GAAUvB,CAAK,EAAG,GAAIoB,CAAK,EAEvD,OAAO,QAAQ,UAAUpB,EAAO,GAAIoB,CAAK,EAE3CI,GAAa,mBAAmB,OAAO,SAAS,KAAK,MAAM,CAAC,CAAC,EAAGF,CAAM,EACtEG,GAAiB,CACnB,EACA,KAAMC,GAAUC,GAAU,OAAQ,WAAYC,GAAmBF,EAAQG,GAAS,CAChF,GAAIA,GAASA,EAAQ,EACnB,MAAO,CAACZ,EAAY,QAAQY,CAAK,EAC5B,CACL,IAAMC,EAAId,EAAU,EACpB,MAAO,CAACC,EAAY,QAAQa,EAAE,MAAO,CACnC,MAAOA,EAAE,KACX,CAAC,CACH,CACF,CAAC,CAAC,EACF,OAAQnD,GAAkBkC,EAAM,QAASA,EAAM,cAAeA,EAAM,WAAYA,EAAM,YAAY,EAClG,MAAO,CACL,GAAIgB,GAAS,OAAO,QAAQ,GAAGA,CAAK,EACpC,YAAAZ,CACF,CACF,CAAC,EAAEJ,CAAK,CACV,CC10CA,IAAMkB,GAAeC,GAAc,EAM5B,SAASC,GAAcC,EAA2B,CACvD,OAAAC,EACGJ,GAAaK,SAAQ,CAAA,IAACC,OAAK,CAAA,OAAEH,EAAMI,KAAK,EAAA,IAAAC,UAAA,CAAA,OACtCL,EAAMK,QAAQ,CAAA,CAAA,CAGrB,CCPO,SAASC,EAAuBC,EAAc,CACnD,MAAO,yBAAyBA,CAAI,4CAA4CA,CAAI,iFACtF,CCJA,IAAMC,GAAqC,OAAO,QAAW,YAAc,OAAO,YAAc,eACzFC,GAAQD,GCCTE,GAAe,IAAM,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,CAAC,EAAE,MAAM,EAAE,EAAE,KAAK,GAAG,EAC/EC,GAAc,CAClB,KAAM,eAA8BD,GAAa,CAAC,GAClD,QAAS,kBAAiCA,GAAa,CAAC,GACxD,qBAAsB,IAAM,+BAA+BA,GAAa,CAAC,EAC3E,EACOE,GAAQD,GCTA,SAARE,GAA+BC,EAAyB,CAC7D,GAAI,OAAOA,GAAQ,UAAYA,IAAQ,KAAM,MAAO,GACpD,IAAIC,EAAQD,EACZ,KAAO,OAAO,eAAeC,CAAK,IAAM,MACtCA,EAAQ,OAAO,eAAeA,CAAK,EAErC,OAAO,OAAO,eAAeD,CAAG,IAAMC,GAAS,OAAO,eAAeD,CAAG,IAAM,IAChF,CE8DO,SAASE,GAAoGC,EAAwCC,EAA4EC,EAA4F,CAClU,GAAI,OAAOF,GAAY,WACrB,MAAM,IAAI,MAA8CG,EAAwB,CAAC,CAAyF,EAE5K,GAAI,OAAOF,GAAmB,YAAc,OAAOC,GAAa,YAAc,OAAOA,GAAa,YAAc,OAAO,UAAU,CAAC,GAAM,WACtI,MAAM,IAAI,MAA8CC,EAAyB,CAAC,CAAgR,EAMpW,GAJI,OAAOF,GAAmB,YAAc,OAAOC,EAAa,MAC9DA,EAAYD,EACZA,EAAiB,QAEf,OAAOC,EAAa,IAAa,CACnC,GAAI,OAAOA,GAAa,WACtB,MAAM,IAAI,MAA8CC,EAAyB,CAAC,CAAsF,EAE1K,OAAOD,EAASH,EAAW,EAAEC,EAAUC,CAA6C,CACtF,CACA,IAAIG,EAAiBJ,EACjBK,EAAgDJ,EAChDK,EAAyD,IAAI,IAC7DC,EAAgBD,EAChBE,EAAoB,EACpBC,EAAgB,GASpB,SAASC,GAA+B,CAClCH,IAAkBD,IACpBC,EAAgB,IAAI,IACpBD,EAAiB,QAAQ,CAACK,EAAUC,IAAQ,CAC1CL,EAAc,IAAIK,EAAKD,CAAQ,CACjC,CAAC,EAEL,CAOA,SAASE,GAAc,CACrB,GAAIJ,EACF,MAAM,IAAI,MAA8CN,EAAyB,CAAC,CAAoN,EAExS,OAAQE,CACV,CAyBA,SAASS,EAAUH,EAAsB,CACvC,GAAI,OAAOA,GAAa,WACtB,MAAM,IAAI,MAA8CR,EAAyB,CAAC,CAAsF,EAE1K,GAAIM,EACF,MAAM,IAAI,MAA8CN,EAAyB,CAAC,CAAoU,EAExZ,IAAIY,EAAe,GACnBL,EAA6B,EAC7B,IAAMM,EAAaR,IACnB,OAAAD,EAAc,IAAIS,EAAYL,CAAQ,EAC/B,UAAuB,CAC5B,GAAKI,EAGL,IAAIN,EACF,MAAM,IAAI,MAA8CN,EAAyB,CAAC,CAA+J,EAEnPY,EAAe,GACfL,EAA6B,EAC7BH,EAAc,OAAOS,CAAU,EAC/BV,EAAmB,KACrB,CACF,CA2BA,SAASW,EAASC,EAAW,CAC3B,GAAI,CAACC,GAAcD,CAAM,EACvB,MAAM,IAAI,MAA8Cf,EAAyB,CAAC,CAA+Z,EAEnf,GAAI,OAAOe,EAAO,KAAS,IACzB,MAAM,IAAI,MAA8Cf,EAAyB,CAAC,CAAgH,EAEpM,GAAI,OAAOe,EAAO,MAAS,SACzB,MAAM,IAAI,MAA8Cf,EAA0B,EAAE,CAAgJ,EAEtO,GAAIM,EACF,MAAM,IAAI,MAA8CN,EAA0B,CAAC,CAAwC,EAE7H,GAAI,CACFM,EAAgB,GAChBJ,EAAeD,EAAeC,EAAca,CAAM,CACpD,QAAA,CACET,EAAgB,EAClB,CAEA,OADkBH,EAAmBC,GAC3B,QAAQI,GAAY,CAC5BA,EAAS,CACX,CAAC,EACMO,CACT,CAWA,SAASE,EAAeC,EAAkC,CACxD,GAAI,OAAOA,GAAgB,WACzB,MAAM,IAAI,MAA8ClB,EAA0B,EAAE,CAA2F,EAEjLC,EAAmBiB,EAMnBJ,EAAU,CACR,KAAMK,GAAY,OACpB,CAAO,CACT,CAQA,SAASC,GAAa,CACpB,IAAMC,EAAiBV,EACvB,MAAO,CASL,UAAUW,EAAmB,CAC3B,GAAI,OAAOA,GAAa,UAAYA,IAAa,KAC/C,MAAM,IAAI,MAA8CtB,EAA0B,EAAE,CAAqF,EAE3K,SAASuB,GAAe,CACtB,IAAMC,EAAsBF,EACxBE,EAAmB,MACrBA,EAAmB,KAAKd,EAAS,CAAC,CAEtC,CACA,OAAAa,EAAa,EAEN,CACL,YAFkBF,EAAeE,CAAY,CAG/C,CACF,EACA,CAACE,EAAY,GAAI,CACf,OAAO,IACT,CACF,CACF,CAKA,OAAAX,EAAU,CACR,KAAMK,GAAY,IACpB,CAAO,EACS,CACd,SAAAL,EACA,UAAAH,EACA,SAAAD,EACA,eAAAO,EACA,CAACQ,EAAY,EAAGL,CAClB,CAEF,CE9QA,SAASM,GAAmBC,EAEzB,CACD,OAAO,KAAKA,CAAQ,EAAE,QAAQC,GAAO,CACnC,IAAMC,EAAUF,EAASC,CAAG,EAI5B,GAAI,OAHiBC,EAAQ,OAAW,CACtC,KAAMC,GAAY,IACpB,CAAC,EAC2B,IAC1B,MAAM,IAAI,MAA8CC,EAAwB,EAAE,CAAuU,EAE3Z,GAAI,OAAOF,EAAQ,OAAW,CAC5B,KAAMC,GAAY,qBAAqB,CACzC,CAAC,EAAM,IACL,MAAM,IAAI,MAA8CC,EAAyB,EAAE,CAAyc,CAEhiB,CAAC,CACH,CAqBe,SAARC,GAAiCL,EAErC,CACD,IAAMM,EAAc,OAAO,KAAKN,CAAQ,EAClCO,EAEF,CAAC,EACL,QAASC,EAAI,EAAGA,EAAIF,EAAY,OAAQE,IAAK,CAC3C,IAAMP,EAAMK,EAAYE,CAAC,EAMrB,OAAOR,EAASC,CAAG,GAAM,aAC3BM,EAAcN,CAAG,EAAID,EAASC,CAAG,EAErC,CACA,IAAMQ,EAAmB,OAAO,KAAKF,CAAa,EAI9CG,EAMAC,EACJ,GAAI,CACFZ,GAAmBQ,CAAa,CAClC,OAASK,EAAG,CACVD,EAAsBC,CACxB,CACA,OAAO,SAAqBC,EAAqD,CAAC,EAAGC,EAAgB,CACnG,GAAIH,EACF,MAAMA,EAQR,IAAII,EAAa,GACXC,EAAyD,CAAC,EAChE,QAASR,EAAI,EAAGA,EAAIC,EAAiB,OAAQD,IAAK,CAChD,IAAMP,EAAMQ,EAAiBD,CAAC,EACxBN,EAAUK,EAAcN,CAAG,EAC3BgB,EAAsBJ,EAAMZ,CAAG,EAC/BiB,EAAkBhB,EAAQe,EAAqBH,CAAM,EAC3D,GAAI,OAAOI,EAAoB,IAAa,CAC1C,IAAMC,EAAaL,GAAUA,EAAO,KACpC,MAAM,IAAI,MAA8CV,EAAyB,EAAE,CAAgU,CACrZ,CACAY,EAAUf,CAAG,EAAIiB,EACjBH,EAAaA,GAAcG,IAAoBD,CACjD,CACA,OAAAF,EAAaA,GAAcN,EAAiB,SAAW,OAAO,KAAKI,CAAK,EAAE,OACnEE,EAAaC,EAAYH,CAClC,CACF,CEvGe,SAARO,MAA4BC,EAAmB,CACpD,OAAIA,EAAM,SAAW,EAEPC,GAAWA,EAErBD,EAAM,SAAW,EACZA,EAAM,CAAC,EAETA,EAAM,OAAO,CAACE,EAAGC,IAAM,IAAIC,IAAcF,EAAEC,EAAE,GAAGC,CAAI,CAAC,CAAC,CAC/D,CCOe,SAARC,MAAoCC,EAA+C,CACxF,OAAOC,GAAe,CAACC,EAASC,IAAmB,CACjD,IAAMC,EAAQH,EAAYC,EAASC,CAAc,EAC7CE,EAAqB,IAAM,CAC7B,MAAM,IAAI,MAA8CC,EAAwB,EAAE,CAAiI,CACrN,EACMC,EAA+B,CACnC,SAAUH,EAAM,SAChB,SAAU,CAACI,KAAWV,IAASO,EAASG,EAAQ,GAAGV,CAAI,CACzD,EACMW,EAAQT,EAAY,IAAIU,GAAcA,EAAWH,CAAa,CAAC,EACrE,OAAAF,EAAWZ,GAAyB,GAAGgB,CAAK,EAAEL,EAAM,QAAQ,EACrD,CACL,GAAGA,EACH,SAAAC,CACF,CACF,CACF,CC1De,SAARM,GAA0BH,EAA2C,CAC1E,OAAOI,GAAcJ,CAAM,GAAK,SAAUA,GAAU,OAAQA,EAAmC,MAAS,QAC1G,CCCO,IAAMK,GAAyB,OAAO,IAAI,eAAe,EAUnDC,GAA2B,OAAO,IAAI,iBAAiB,EAEvDC,EAA6B,OAAO,IAAI,aAAa,ECqB3D,SAASC,EAAIC,KAAkBC,EAAoB,CAMzD,MAAM,IAAI,MACT,8BAA8BD,CAAA,yCAC/B,CACD,CCjCO,IAAME,GAAiB,OAAO,eAI9B,SAASC,GAAQC,EAAqB,CAC5C,MAAO,CAAC,CAACA,GAAS,CAAC,CAACA,EAAMC,CAAW,CACtC,CAIO,SAASC,GAAYF,EAAqB,CAChD,OAAKA,EAEJG,GAAcH,CAAK,GACnB,MAAM,QAAQA,CAAK,GACnB,CAAC,CAACA,EAAMI,EAAS,GACjB,CAAC,CAACJ,EAAM,cAAcI,EAAS,GAC/BC,GAAML,CAAK,GACXM,GAAMN,CAAK,EAPO,EASpB,CAEA,IAAMO,GAAmB,OAAO,UAAU,YAAY,SAAS,EAExD,SAASJ,GAAcH,EAAqB,CAClD,GAAI,CAACA,GAAS,OAAOA,GAAU,SAAU,MAAO,GAChD,IAAMQ,EAAQV,GAAeE,CAAK,EAClC,GAAIQ,IAAU,KACb,MAAO,GAER,IAAMC,EACL,OAAO,eAAe,KAAKD,EAAO,aAAa,GAAKA,EAAM,YAE3D,OAAIC,IAAS,OAAe,GAG3B,OAAOA,GAAQ,YACf,SAAS,SAAS,KAAKA,CAAI,IAAMF,EAEnC,CAmBO,SAASG,GAAKC,EAAUC,EAAW,CACrCC,GAAYF,CAAG,IAAA,EAClB,QAAQ,QAAQA,CAAG,EAAE,QAAQG,GAAO,CACnCF,EAAKE,EAAKH,EAAIG,CAAG,EAAGH,CAAG,CACxB,CAAC,EAEDA,EAAI,QAAQ,CAACI,EAAYC,IAAeJ,EAAKI,EAAOD,EAAOJ,CAAG,CAAC,CAEjE,CAGO,SAASE,GAAYI,EAAsB,CACjD,IAAMC,EAAgCD,EAAME,CAAW,EACvD,OAAOD,EACJA,EAAM,MACN,MAAM,QAAQD,CAAK,EAAA,EAEnBG,GAAMH,CAAK,EAAA,EAEXI,GAAMJ,CAAK,EAAA,EAAA,CAGf,CAGO,SAASK,GAAIL,EAAYM,EAA4B,CAC3D,OAAOV,GAAYI,CAAK,IAAA,EACrBA,EAAM,IAAIM,CAAI,EACd,OAAO,UAAU,eAAe,KAAKN,EAAOM,CAAI,CACpD,CASO,SAASC,GAAIC,EAAYC,EAA6BC,EAAY,CACxE,IAAMC,EAAIC,GAAYJ,CAAK,EACvBG,IAAA,EAAoBH,EAAM,IAAIC,EAAgBC,CAAK,EAC9CC,IAAA,EACRH,EAAM,IAAIE,CAAK,EACTF,EAAMC,CAAc,EAAIC,CAChC,CAGO,SAASG,GAAGC,EAAQC,EAAiB,CAE3C,OAAID,IAAMC,EACFD,IAAM,GAAK,EAAIA,IAAM,EAAIC,EAEzBD,IAAMA,GAAKC,IAAMA,CAE1B,CAGO,SAASC,GAAMC,EAA+B,CACpD,OAAOA,aAAkB,GAC1B,CAGO,SAASC,GAAMD,EAA+B,CACpD,OAAOA,aAAkB,GAC1B,CAEO,SAASE,GAAOC,EAAwB,CAC9C,OAAOA,EAAM,OAASA,EAAM,KAC7B,CAGO,SAASC,GAAYC,EAAWC,EAAoB,CAC1D,GAAIP,GAAMM,CAAI,EACb,OAAO,IAAI,IAAIA,CAAI,EAEpB,GAAIJ,GAAMI,CAAI,EACb,OAAO,IAAI,IAAIA,CAAI,EAEpB,GAAI,MAAM,QAAQA,CAAI,EAAG,OAAO,MAAM,UAAU,MAAM,KAAKA,CAAI,EAE/D,IAAME,EAAUC,GAAcH,CAAI,EAElC,GAAIC,IAAW,IAASA,IAAW,cAAgB,CAACC,EAAU,CAE7D,IAAME,EAAc,OAAO,0BAA0BJ,CAAI,EACzD,OAAOI,EAAYC,CAAkB,EACrC,IAAIC,EAAO,QAAQ,QAAQF,CAAW,EACtC,QAAS,EAAI,EAAG,EAAIE,EAAK,OAAQ,IAAK,CACrC,IAAMC,EAAWD,EAAK,CAAC,EACjBE,EAAOJ,EAAYG,CAAG,EACxBC,EAAK,WAAa,KACrBA,EAAK,SAAW,GAChBA,EAAK,aAAe,KAKjBA,EAAK,KAAOA,EAAK,OACpBJ,EAAYG,CAAG,EAAI,CAClB,aAAc,GACd,SAAU,GACV,WAAYC,EAAK,WACjB,MAAOR,EAAKO,CAAG,CAChB,EACF,CACA,OAAO,OAAO,OAAOE,GAAeT,CAAI,EAAGI,CAAW,CACvD,KAAO,CAEN,IAAMM,EAAQD,GAAeT,CAAI,EACjC,GAAIU,IAAU,MAAQR,EACrB,MAAO,CAAC,GAAGF,CAAI,EAEhB,IAAMW,EAAM,OAAO,OAAOD,CAAK,EAC/B,OAAO,OAAO,OAAOC,EAAKX,CAAI,CAC/B,CACD,CAUO,SAASY,GAAUD,EAAUE,EAAgB,GAAU,CAC7D,OAAIC,GAASH,CAAG,GAAKI,GAAQJ,CAAG,GAAK,CAACK,GAAYL,CAAG,IACjDrB,GAAYqB,CAAG,EAAI,IACtBA,EAAI,IAAMA,EAAI,IAAMA,EAAI,MAAQA,EAAI,OAASM,IAE9C,OAAO,OAAON,CAAG,EACbE,GAGH,OAAO,QAAQF,CAAG,EAAE,QAAQ,CAAC,CAACJ,EAAKnB,CAAK,IAAMwB,GAAOxB,EAAO,EAAI,CAAC,GAC3DuB,CACR,CAEA,SAASM,IAA8B,CACtCC,EAAI,CAAC,CACN,CAEO,SAASJ,GAASH,EAAmB,CAC3C,OAAO,OAAO,SAASA,CAAG,CAC3B,CC5MA,IAAMQ,GAoBF,CAAC,EAIE,SAASC,GACfC,EACiC,CACjC,IAAMC,EAASH,GAAQE,CAAS,EAChC,OAAKC,GACJJ,EAAI,EAAGG,CAAS,EAGVC,CACR,CCrBA,IAAIC,GAEG,SAASC,IAAkB,CACjC,OAAOD,EACR,CAEA,SAASE,GACRC,EACAC,EACa,CACb,MAAO,CACN,QAAS,CAAC,EACV,QAAAD,EACA,OAAAC,EAGA,eAAgB,GAChB,mBAAoB,CACrB,CACD,CAEO,SAASC,GACfC,EACAC,EACC,CACGA,IACHC,GAAU,SAAS,EACnBF,EAAM,SAAW,CAAC,EAClBA,EAAM,gBAAkB,CAAC,EACzBA,EAAM,eAAiBC,EAEzB,CAEO,SAASE,GAAYH,EAAmB,CAC9CI,GAAWJ,CAAK,EAChBA,EAAM,QAAQ,QAAQK,EAAW,EAEjCL,EAAM,QAAU,IACjB,CAEO,SAASI,GAAWJ,EAAmB,CACzCA,IAAUN,KACbA,GAAeM,EAAM,QAEvB,CAEO,SAASM,GAAWC,EAAc,CACxC,OAAQb,GAAeE,GAAYF,GAAca,CAAK,CACvD,CAEA,SAASF,GAAYG,EAAgB,CACpC,IAAMC,EAAoBD,EAAME,CAAW,EACvCD,EAAM,QAAA,GAA6BA,EAAM,QAAA,EAC5CA,EAAM,QAAQ,EACVA,EAAM,SAAW,EACvB,CC3DO,SAASE,GAAcC,EAAaZ,EAAmB,CAC7DA,EAAM,mBAAqBA,EAAM,QAAQ,OACzC,IAAMa,EAAYb,EAAM,QAAS,CAAC,EAElC,OADmBY,IAAW,QAAaA,IAAWC,GAEjDA,EAAUH,CAAW,EAAE,YAC1BP,GAAYH,CAAK,EACjBc,EAAI,CAAC,GAEFC,GAAYH,CAAM,IAErBA,EAASI,GAAShB,EAAOY,CAAM,EAC1BZ,EAAM,SAASiB,GAAYjB,EAAOY,CAAM,GAE1CZ,EAAM,UACTE,GAAU,SAAS,EAAE,4BACpBW,EAAUH,CAAW,EAAE,MACvBE,EACAZ,EAAM,SACNA,EAAM,eACP,GAIDY,EAASI,GAAShB,EAAOa,EAAW,CAAC,CAAC,EAEvCV,GAAYH,CAAK,EACbA,EAAM,UACTA,EAAM,eAAgBA,EAAM,SAAUA,EAAM,eAAgB,EAEtDY,IAAWM,GAAUN,EAAS,MACtC,CAEA,SAASI,GAASG,EAAuBC,EAAYC,EAAkB,CAEtE,GAAIC,GAASF,CAAK,EAAG,OAAOA,EAE5B,IAAMX,EAAoBW,EAAMV,CAAW,EAE3C,GAAI,CAACD,EACJ,OAAAc,GAAKH,EAAO,CAACI,EAAKC,IACjBC,GAAiBP,EAAWV,EAAOW,EAAOI,EAAKC,EAAYJ,CAAI,CAChE,EACOD,EAGR,GAAIX,EAAM,SAAWU,EAAW,OAAOC,EAEvC,GAAI,CAACX,EAAM,UACV,OAAAQ,GAAYE,EAAWV,EAAM,MAAO,EAAI,EACjCA,EAAM,MAGd,GAAI,CAACA,EAAM,WAAY,CACtBA,EAAM,WAAa,GACnBA,EAAM,OAAO,qBACb,IAAMG,EAASH,EAAM,MAKjBkB,EAAaf,EACbgB,EAAQ,GACRnB,EAAM,QAAA,IACTkB,EAAa,IAAI,IAAIf,CAAM,EAC3BA,EAAO,MAAM,EACbgB,EAAQ,IAETL,GAAKI,EAAY,CAACH,EAAKC,IACtBC,GAAiBP,EAAWV,EAAOG,EAAQY,EAAKC,EAAYJ,EAAMO,CAAK,CACxE,EAEAX,GAAYE,EAAWP,EAAQ,EAAK,EAEhCS,GAAQF,EAAU,UACrBjB,GAAU,SAAS,EAAE,iBACpBO,EACAY,EACAF,EAAU,SACVA,EAAU,eACX,CAEF,CACA,OAAOV,EAAM,KACd,CAEA,SAASiB,GACRP,EACAU,EACAC,EACAC,EACAN,EACAO,EACAC,EACC,CAGD,GAAIC,GAAQT,CAAU,EAAG,CACxB,IAAMJ,EACLW,GACAH,GACAA,EAAa,QAAA,GACb,CAACM,GAAKN,EAA8C,UAAYE,CAAI,EACjEC,EAAU,OAAOD,CAAI,EACrB,OAEEK,EAAMpB,GAASG,EAAWM,EAAYJ,CAAI,EAIhD,GAHAgB,GAAIP,EAAcC,EAAMK,CAAG,EAGvBF,GAAQE,CAAG,EACdjB,EAAU,eAAiB,OACrB,OACR,MAAWc,GACVH,EAAa,IAAIL,CAAU,EAG5B,GAAIV,GAAYU,CAAU,GAAK,CAACH,GAASG,CAAU,EAAG,CACrD,GAAI,CAACN,EAAU,OAAO,aAAeA,EAAU,mBAAqB,EAMnE,OAEDH,GAASG,EAAWM,CAAU,GAK5B,CAACI,GAAe,CAACA,EAAY,OAAO,UACrC,OAAOE,GAAS,UAChB,OAAO,UAAU,qBAAqB,KAAKD,EAAcC,CAAI,GAE7Dd,GAAYE,EAAWM,CAAU,CACnC,CACD,CAEA,SAASR,GAAYjB,EAAmBoB,EAAYkB,EAAO,GAAO,CAE7D,CAACtC,EAAM,SAAWA,EAAM,OAAO,aAAeA,EAAM,gBACvDuC,GAAOnB,EAAOkB,CAAI,CAEpB,CCjHO,SAASE,GACfC,EACAC,EACyB,CACzB,IAAMC,EAAU,MAAM,QAAQF,CAAI,EAC5BhC,EAAoB,CACzB,MAAOkC,EAAA,EAAA,EAEP,OAAQD,EAASA,EAAO,OAAS/C,GAAgB,EAEjD,UAAW,GAEX,WAAY,GAEZ,UAAW,CAAC,EAEZ,QAAS+C,EAET,MAAOD,EAEP,OAAQ,KAER,MAAO,KAEP,QAAS,KACT,UAAW,EACZ,EAQIG,EAAYnC,EACZoC,EAA2CC,GAC3CH,IACHC,EAAS,CAACnC,CAAK,EACfoC,EAAQE,IAGT,GAAM,CAAC,OAAAC,EAAQ,MAAAC,CAAK,EAAI,MAAM,UAAUL,EAAQC,CAAK,EACrD,OAAApC,EAAM,OAASwC,EACfxC,EAAM,QAAUuC,EACTC,CACR,CAKO,IAAMH,GAAwC,CACpD,IAAIrC,EAAOsB,EAAM,CAChB,GAAIA,IAASrB,EAAa,OAAOD,EAEjC,IAAMyC,EAASC,GAAO1C,CAAK,EAC3B,GAAI,CAAC0B,GAAIe,EAAQnB,CAAI,EAEpB,OAAOqB,GAAkB3C,EAAOyC,EAAQnB,CAAI,EAE7C,IAAMX,EAAQ8B,EAAOnB,CAAI,EACzB,OAAItB,EAAM,YAAc,CAACM,GAAYK,CAAK,EAClCA,EAIJA,IAAUiC,GAAK5C,EAAM,MAAOsB,CAAI,GACnCuB,GAAY7C,CAAK,EACTA,EAAM,MAAOsB,CAAW,EAAIwB,GAAYnC,EAAOX,CAAK,GAEtDW,CACR,EACA,IAAIX,EAAOsB,EAAM,CAChB,OAAOA,KAAQoB,GAAO1C,CAAK,CAC5B,EACA,QAAQA,EAAO,CACd,OAAO,QAAQ,QAAQ0C,GAAO1C,CAAK,CAAC,CACrC,EACA,IACCA,EACAsB,EACAX,EACC,CACD,IAAMoC,EAAOC,GAAuBN,GAAO1C,CAAK,EAAGsB,CAAI,EACvD,GAAIyB,GAAM,IAGT,OAAAA,EAAK,IAAI,KAAK/C,EAAM,OAAQW,CAAK,EAC1B,GAER,GAAI,CAACX,EAAM,UAAW,CAGrB,IAAMiD,EAAUL,GAAKF,GAAO1C,CAAK,EAAGsB,CAAI,EAElC4B,EAAiCD,IAAUhD,CAAW,EAC5D,GAAIiD,GAAgBA,EAAa,QAAUvC,EAC1C,OAAAX,EAAM,MAAOsB,CAAI,EAAIX,EACrBX,EAAM,UAAUsB,CAAI,EAAI,GACjB,GAER,GAAI6B,GAAGxC,EAAOsC,CAAO,IAAMtC,IAAU,QAAae,GAAI1B,EAAM,MAAOsB,CAAI,GACtE,MAAO,GACRuB,GAAY7C,CAAK,EACjBoD,GAAYpD,CAAK,CAClB,CAEA,OACEA,EAAM,MAAOsB,CAAI,IAAMX,IAEtBA,IAAU,QAAaW,KAAQtB,EAAM,QAEtC,OAAO,MAAMW,CAAK,GAAK,OAAO,MAAMX,EAAM,MAAOsB,CAAI,CAAC,IAKxDtB,EAAM,MAAOsB,CAAI,EAAIX,EACrBX,EAAM,UAAUsB,CAAI,EAAI,IACjB,EACR,EACA,eAAetB,EAAOsB,EAAc,CAEnC,OAAIsB,GAAK5C,EAAM,MAAOsB,CAAI,IAAM,QAAaA,KAAQtB,EAAM,OAC1DA,EAAM,UAAUsB,CAAI,EAAI,GACxBuB,GAAY7C,CAAK,EACjBoD,GAAYpD,CAAK,GAGjB,OAAOA,EAAM,UAAUsB,CAAI,EAExBtB,EAAM,OACT,OAAOA,EAAM,MAAMsB,CAAI,EAEjB,EACR,EAGA,yBAAyBtB,EAAOsB,EAAM,CACrC,IAAM+B,EAAQX,GAAO1C,CAAK,EACpB+C,EAAO,QAAQ,yBAAyBM,EAAO/B,CAAI,EACzD,OAAKyB,GACE,CACN,SAAU,GACV,aAAc/C,EAAM,QAAA,GAA4BsB,IAAS,SACzD,WAAYyB,EAAK,WACjB,MAAOM,EAAM/B,CAAI,CAClB,CACD,EACA,gBAAiB,CAChBjB,EAAI,EAAE,CACP,EACA,eAAeL,EAAO,CACrB,OAAOsD,GAAetD,EAAM,KAAK,CAClC,EACA,gBAAiB,CAChBK,EAAI,EAAE,CACP,CACD,EAMMiC,GAA8C,CAAC,EACrDxB,GAAKuB,GAAa,CAACtB,EAAKwC,IAAO,CAE9BjB,GAAWvB,CAAG,EAAI,UAAW,CAC5B,iBAAU,CAAC,EAAI,UAAU,CAAC,EAAE,CAAC,EACtBwC,EAAG,MAAM,KAAM,SAAS,CAChC,CACD,CAAC,EACDjB,GAAW,eAAiB,SAAStC,EAAOsB,EAAM,CAIjD,OAAOgB,GAAW,IAAK,KAAK,KAAMtC,EAAOsB,EAAM,MAAS,CACzD,EACAgB,GAAW,IAAM,SAAStC,EAAOsB,EAAMX,EAAO,CAO7C,OAAO0B,GAAY,IAAK,KAAK,KAAMrC,EAAM,CAAC,EAAGsB,EAAMX,EAAOX,EAAM,CAAC,CAAC,CACnE,EAGA,SAAS4C,GAAK7C,EAAgBuB,EAAmB,CAChD,IAAMtB,EAAQD,EAAME,CAAW,EAE/B,OADeD,EAAQ0C,GAAO1C,CAAK,EAAID,GACzBuB,CAAI,CACnB,CAEA,SAASqB,GAAkB3C,EAAmByC,EAAanB,EAAmB,CAC7E,IAAMyB,EAAOC,GAAuBP,EAAQnB,CAAI,EAChD,OAAOyB,EACJ,UAAWA,EACVA,EAAK,MAGLA,EAAK,KAAK,KAAK/C,EAAM,MAAM,EAC5B,MACJ,CAEA,SAASgD,GACRP,EACAnB,EACiC,CAEjC,GAAI,EAAEA,KAAQmB,GAAS,OACvB,IAAIe,EAAQF,GAAeb,CAAM,EACjC,KAAOe,GAAO,CACb,IAAMT,EAAO,OAAO,yBAAyBS,EAAOlC,CAAI,EACxD,GAAIyB,EAAM,OAAOA,EACjBS,EAAQF,GAAeE,CAAK,CAC7B,CAED,CAEO,SAASJ,GAAYpD,EAAmB,CACzCA,EAAM,YACVA,EAAM,UAAY,GACdA,EAAM,SACToD,GAAYpD,EAAM,OAAO,EAG5B,CAEO,SAAS6C,GAAY7C,EAIzB,CACGA,EAAM,QACVA,EAAM,MAAQyD,GACbzD,EAAM,MACNA,EAAM,OAAO,OAAO,qBACrB,EAEF,CChQO,IAAM0D,GAAN,KAAoC,CAI1C,YAAYC,EAGT,CANH,KAAA,YAAuB,GACvB,KAAA,sBAAoC,GA+BpC,KAAA,QAAoB,CAAC3B,EAAW4B,EAAcpE,IAAwB,CAErE,GAAI,OAAOwC,GAAS,YAAc,OAAO4B,GAAW,WAAY,CAC/D,IAAMC,EAAcD,EACpBA,EAAS5B,EAET,IAAM8B,EAAO,KACb,OAAO,SAEN9B,EAAO6B,KACJE,EACF,CACD,OAAOD,EAAK,QAAQ9B,EAAOjC,GAAmB6D,EAAO,KAAK,KAAM7D,EAAO,GAAGgE,CAAI,CAAC,CAChF,CACD,CAEI,OAAOH,GAAW,YAAYvD,EAAI,CAAC,EACnCb,IAAkB,QAAa,OAAOA,GAAkB,YAC3Da,EAAI,CAAC,EAEN,IAAIF,EAGJ,GAAIG,GAAY0B,CAAI,EAAG,CACtB,IAAMzC,EAAQM,GAAW,IAAI,EACvB2C,EAAQM,GAAYd,EAAM,MAAS,EACrCgC,EAAW,GACf,GAAI,CACH7D,EAASyD,EAAOpB,CAAK,EACrBwB,EAAW,EACZ,QAAA,CAEKA,EAAUtE,GAAYH,CAAK,EAC1BI,GAAWJ,CAAK,CACtB,CACA,OAAAD,GAAkBC,EAAOC,CAAa,EAC/BU,GAAcC,EAAQZ,CAAK,CACnC,SAAW,CAACyC,GAAQ,OAAOA,GAAS,SAAU,CAK7C,GAJA7B,EAASyD,EAAO5B,CAAI,EAChB7B,IAAW,SAAWA,EAAS6B,GAC/B7B,IAAWM,KAASN,EAAS,QAC7B,KAAK,aAAa2B,GAAO3B,EAAQ,EAAI,EACrCX,EAAe,CAClB,IAAMyE,EAAa,CAAC,EACdC,EAAc,CAAC,EACrBzE,GAAU,SAAS,EAAE,4BAA4BuC,EAAM7B,EAAQ8D,EAAGC,CAAE,EACpE1E,EAAcyE,EAAGC,CAAE,CACpB,CACA,OAAO/D,CACR,MAAOE,EAAI,EAAG2B,CAAI,CACnB,EAEA,KAAA,mBAA0C,CAACA,EAAW4B,IAAsB,CAE3E,GAAI,OAAO5B,GAAS,WACnB,MAAO,CAAChC,KAAe+D,IACtB,KAAK,mBAAmB/D,EAAQD,GAAeiC,EAAKjC,EAAO,GAAGgE,CAAI,CAAC,EAGrE,IAAII,EAAkBC,EAKtB,MAAO,CAJQ,KAAK,QAAQpC,EAAM4B,EAAQ,CAACK,EAAYC,IAAgB,CACtEC,EAAUF,EACVG,EAAiBF,CAClB,CAAC,EACeC,EAAUC,CAAe,CAC1C,EA1FK,OAAOT,GAAQ,YAAe,WACjC,KAAK,cAAcA,EAAQ,UAAU,EAClC,OAAOA,GAAQ,sBAAyB,WAC3C,KAAK,wBAAwBA,EAAQ,oBAAoB,CAC3D,CAwFA,YAAiC3B,EAAmB,CAC9C1B,GAAY0B,CAAI,GAAG3B,EAAI,CAAC,EACzBoB,GAAQO,CAAI,IAAGA,EAAOiB,GAAQjB,CAAI,GACtC,IAAMzC,EAAQM,GAAW,IAAI,EACvB2C,EAAQM,GAAYd,EAAM,MAAS,EACzC,OAAAQ,EAAMvC,CAAW,EAAE,UAAY,GAC/BN,GAAWJ,CAAK,EACTiD,CACR,CAEA,YACCzC,EACAP,EACuC,CACvC,IAAMQ,EAAoBD,GAAUA,EAAcE,CAAW,GACzD,CAACD,GAAS,CAACA,EAAM,YAAWK,EAAI,CAAC,EACrC,GAAM,CAAC,OAAQd,CAAK,EAAIS,EACxB,OAAAV,GAAkBC,EAAOC,CAAa,EAC/BU,GAAc,OAAWX,CAAK,CACtC,CAOA,cAAcoB,EAAgB,CAC7B,KAAK,YAAcA,CACpB,CAOA,wBAAwBA,EAAmB,CAC1C,KAAK,sBAAwBA,CAC9B,CAEA,aAAkCqB,EAASmC,EAA8B,CAGxE,IAAIE,EACJ,IAAKA,EAAIF,EAAQ,OAAS,EAAGE,GAAK,EAAGA,IAAK,CACzC,IAAMC,EAAQH,EAAQE,CAAC,EACvB,GAAIC,EAAM,KAAK,SAAW,GAAKA,EAAM,KAAO,UAAW,CACtDtC,EAAOsC,EAAM,MACb,KACD,CACD,CAGID,EAAI,KACPF,EAAUA,EAAQ,MAAME,EAAI,CAAC,GAG9B,IAAME,EAAmB9E,GAAU,SAAS,EAAE,cAC9C,OAAIgC,GAAQO,CAAI,EAERuC,EAAiBvC,EAAMmC,CAAO,EAG/B,KAAK,QAAQnC,EAAOjC,GAC1BwE,EAAiBxE,EAAOoE,CAAO,CAChC,CACD,CACD,EAEO,SAASrB,GACfnC,EACAsB,EACyB,CAEzB,IAAMlC,EAAiByE,GAAM7D,CAAK,EAC/BlB,GAAU,QAAQ,EAAE,UAAUkB,EAAOsB,CAAM,EAC3Cd,GAAMR,CAAK,EACXlB,GAAU,QAAQ,EAAE,UAAUkB,EAAOsB,CAAM,EAC3CF,GAAiBpB,EAAOsB,CAAM,EAGjC,OADcA,EAASA,EAAO,OAAS/C,GAAgB,GACjD,QAAQ,KAAKa,CAAK,EACjBA,CACR,CC3MO,SAASkD,GAAQtC,EAAiB,CACxC,OAAKc,GAAQd,CAAK,GAAGN,EAAI,GAAIM,CAAK,EAC3B8D,GAAY9D,CAAK,CACzB,CAEA,SAAS8D,GAAY9D,EAAiB,CACrC,GAAI,CAACL,GAAYK,CAAK,GAAKE,GAASF,CAAK,EAAG,OAAOA,EACnD,IAAMX,EAAgCW,EAAMV,CAAW,EACnDyE,EACJ,GAAI1E,EAAO,CACV,GAAI,CAACA,EAAM,UAAW,OAAOA,EAAM,MAEnCA,EAAM,WAAa,GACnB0E,EAAOjB,GAAY9C,EAAOX,EAAM,OAAO,OAAO,qBAAqB,CACpE,MACC0E,EAAOjB,GAAY9C,EAAO,EAAI,EAG/B,OAAAG,GAAK4D,EAAM,CAAC3D,EAAKC,IAAe,CAC/BY,GAAI8C,EAAM3D,EAAK0D,GAAYzD,CAAU,CAAC,CACvC,CAAC,EACGhB,IACHA,EAAM,WAAa,IAEb0E,CACR,CGbA,IAAMC,EAAQ,IAAIC,GAqBLC,GAAoBF,EAAM,QAM1BG,GAA0CH,EAAM,mBAAmB,KAC/EA,CACD,EAOaI,GAAgBJ,EAAM,cAAc,KAAKA,CAAK,EAO9CK,GAA0BL,EAAM,wBAAwB,KAAKA,CAAK,EAOlEM,GAAeN,EAAM,aAAa,KAAKA,CAAK,EAM5CO,GAAcP,EAAM,YAAY,KAAKA,CAAK,EAU1CQ,GAAcR,EAAM,YAAY,KAAKA,CAAK,EC3FvD,SAASS,GAAsBC,EAAe,CAO5C,MANmB,CAAC,CAAE,SAAAC,EAAU,SAAAC,CAAS,IAAOC,GAAUC,GACpD,OAAOA,GAAW,WACbA,EAAOH,EAAUC,EAAUF,CAAa,EAE1CG,EAAKC,CAAM,CAGtB,CACA,IAAIC,GAAQN,GAAsB,EAC9BO,GAAoBP,GIwMjB,IAAMQ,GAA2C,OAAO,OAAW,KAAgB,OAAe,qCAAwC,OAAe,qCAAuC,UAAY,CACjN,GAAI,UAAU,SAAW,EACzB,OAAI,OAAO,UAAU,CAAC,GAAM,SAAiBC,GACtCA,GAAQ,MAAM,KAAQ,SAAgC,CAC/D,EAKaC,GAET,OAAO,OAAW,KAAgB,OAAe,6BAAgC,OAAe,6BAA+B,UAAY,CAC7I,OAAO,SAAUC,EAAM,CACrB,OAAOA,CACT,CACF,EG3IaC,GAAwBC,GAC5BA,GAAK,OAAQA,EAA0B,OAAU,WD6GnD,SAASC,GAAaC,EAAcC,EAA+B,CACxE,SAASC,KAAiBC,EAAa,CACrC,GAAIF,EAAe,CACjB,IAAIG,EAAWH,EAAc,GAAGE,CAAI,EACpC,GAAI,CAACC,EACH,MAAM,IAAI,MAA8CC,GAAwB,CAAC,CAA4C,EAE/H,MAAO,CACL,KAAAL,EACA,QAASI,EAAS,QAClB,GAAI,SAAUA,GAAY,CACxB,KAAMA,EAAS,IACjB,EACA,GAAI,UAAWA,GAAY,CACzB,MAAOA,EAAS,KAClB,CACF,CACF,CACA,MAAO,CACL,KAAAJ,EACA,QAASG,EAAK,CAAC,CACjB,CACF,CACA,OAAAD,EAAc,SAAW,IAAM,GAAGF,CAAI,GACtCE,EAAc,KAAOF,EACrBE,EAAc,MAASI,GAA6CC,GAASD,CAAM,GAAKA,EAAO,OAASN,EACjGE,CACT,CG9LO,IAAMM,GAAN,MAAMC,WAAyD,KAAqB,CAGzF,eAAeC,EAAc,CAC3B,MAAM,GAAGA,CAAK,EACd,OAAO,eAAe,KAAMD,GAAM,SAAS,CAC7C,CACA,WAAY,OAAO,OAAO,GAAI,CAC5B,OAAQA,EACV,CAIA,UAAUE,EAAY,CACpB,OAAO,MAAM,OAAO,MAAM,KAAMA,CAAG,CACrC,CAIA,WAAWA,EAAY,CACrB,OAAIA,EAAI,SAAW,GAAK,MAAM,QAAQA,EAAI,CAAC,CAAC,EACnC,IAAIF,GAAM,GAAGE,EAAI,CAAC,EAAE,OAAO,IAAI,CAAC,EAElC,IAAIF,GAAM,GAAGE,EAAI,OAAO,IAAI,CAAC,CACtC,CACF,EACO,SAASC,GAAmBC,EAAQ,CACzC,OAAOC,GAAYD,CAAG,EAAIE,GAAgBF,EAAK,IAAM,CAAC,CAAC,EAAIA,CAC7D,CAkDO,SAASG,GAA6BC,EAAoBC,EAAQC,EAAyC,CAChH,GAAIF,EAAI,IAAIC,CAAG,EAAG,CAChB,IAAIE,EAASH,EAAI,IAAIC,CAAG,EACxB,OAAIC,EAAQ,SACVC,EAAQD,EAAQ,OAAOC,EAAOF,EAAKD,CAAG,EACtCA,EAAI,IAAIC,EAAKE,CAAK,GAEbA,CACT,CACA,GAAI,CAACD,EAAQ,OAAQ,MAAM,IAAI,MAA8CE,GAAwB,EAAE,CAAmD,EAC1J,IAAMC,EAAWH,EAAQ,OAAOD,EAAKD,CAAG,EACxC,OAAAA,EAAI,IAAIC,EAAKI,CAAQ,EACdA,CACT,CJ/GA,SAASC,GAAUC,EAAsB,CACvC,OAAO,OAAOA,GAAM,SACtB,CAuBO,IAAMC,GAA4B,IAAyC,SAA8BC,EAAS,CACvH,GAAM,CACJ,MAAAC,EAAQ,GACR,eAAAC,EAAiB,GACjB,kBAAAC,EAAoB,GACpB,mBAAAC,EAAqB,EACvB,EAAIJ,GAAW,CAAC,EACZK,EAAkB,IAAIC,GAC1B,OAAIL,IACEJ,GAAUI,CAAK,EACjBI,EAAgB,KAAKJ,EAAe,EAEpCI,EAAgB,KAAKE,GAAkBN,EAAM,aAAa,CAAC,GA4BvDI,CACV,EO/EaG,GAAmB,gBAUhC,IAAMC,GAAwBC,GACpBC,GAAuB,CAC7B,WAAWA,EAAQD,CAAO,CAC5B,EAKIE,GAAM,OAAO,OAAW,KAAe,OAAO,sBAAwB,OAAO,sBAAwBH,GAAqB,EAAE,EAmCrHI,GAAoB,CAACC,EAA4B,CAC5D,KAAM,KACR,IAAqBC,GAAQ,IAAIC,IAAS,CACxC,IAAMC,EAAQF,EAAK,GAAGC,CAAI,EACtBE,EAAY,GACZC,EAA0B,GAC1BC,EAAqB,GACnBC,EAAY,IAAI,IAChBC,EAAgBR,EAAQ,OAAS,OAAS,eAAiBA,EAAQ,OAAS,MAAQF,GAAME,EAAQ,OAAS,WAAaA,EAAQ,kBAAoBL,GAAqBK,EAAQ,OAAO,EACxLS,EAAkB,IAAM,CAG5BH,EAAqB,GACjBD,IACFA,EAA0B,GAC1BE,EAAU,QAAQG,GAAKA,EAAE,CAAC,EAE9B,EACA,OAAO,OAAO,OAAO,CAAC,EAAGP,EAAO,CAG9B,UAAUQ,EAAsB,CAK9B,IAAMC,EAAmC,IAAMR,GAAaO,EAAS,EAC/DE,EAAcV,EAAM,UAAUS,CAAe,EACnD,OAAAL,EAAU,IAAII,CAAQ,EACf,IAAM,CACXE,EAAY,EACZN,EAAU,OAAOI,CAAQ,CAC3B,CACF,EAGA,SAASG,EAAa,CACpB,GAAI,CAGF,OAAAV,EAAY,CAACU,GAAQ,OAAOC,EAAgB,EAG5CV,EAA0B,CAACD,EACvBC,IAIGC,IACHA,EAAqB,GACrBE,EAAcC,CAAe,IAS1BN,EAAM,SAASW,CAAM,CAC9B,QAAA,CAEEV,EAAY,EACd,CACF,CACF,CAAC,CACH,EC5GaY,GAAyDC,GAEvC,SAA6BjB,EAAS,CACnE,GAAM,CACJ,UAAAkB,EAAY,EACd,EAAIlB,GAAW,CAAC,EACZmB,EAAgB,IAAIC,GAAuBH,CAAkB,EACjE,OAAIC,GACFC,EAAc,KAAKpB,GAAkB,OAAOmB,GAAc,SAAWA,EAAY,MAAS,CAAC,EAErFC,CACV,EVyDO,SAASE,GAEYrB,EAAuE,CACjG,IAAMsB,EAAuBC,GAA6B,EACpD,CACJ,QAAAC,EAAU,OACV,WAAAC,EACA,SAAAC,EAAW,GACX,eAAAC,EAAiB,OACjB,UAAAC,EAAY,MACd,EAAI5B,GAAW,CAAC,EACZ6B,EACJ,GAAI,OAAOL,GAAY,WACrBK,EAAcL,UACLM,GAAcN,CAAO,EAC9BK,EAAgBE,GAAgBP,CAAO,MAEvC,OAAM,IAAI,MAA8CQ,GAAwB,CAAC,CAA8H,EAKjN,IAAIC,EACA,OAAOR,GAAe,WACxBQ,EAAkBR,EAAWH,CAAoB,EAKjDW,EAAkBX,EAAqB,EAKzC,IAAIY,EAAeC,GACfT,IACFQ,EAAeE,GAAoB,CAEjC,MAAO,GACP,GAAI,OAAOV,GAAa,UAAYA,CACtC,CAAC,GAEH,IAAMT,EAAqBoB,GAAgB,GAAGJ,CAAe,EACvDK,EAAsBtB,GAA4BC,CAAkB,EAItEsB,EAAiB,OAAOX,GAAc,WAAaA,EAAUU,CAAmB,EAAIA,EAAoB,EAUtGE,EAAuCN,EAAa,GAAGK,CAAc,EAC3E,OAAOE,GAAYZ,EAAcF,EAAsBa,CAAgB,CACzE,CYjCO,SAASE,GAAiCC,EAAmK,CAClN,IAAMC,EAAmC,CAAC,EACpCC,EAAwD,CAAC,EAC3DC,EACEC,EAAU,CACd,QAAQC,EAAuDxB,EAAyB,CActF,IAAMyB,EAAO,OAAOD,GAAwB,SAAWA,EAAsBA,EAAoB,KACjG,GAAI,CAACC,EACH,MAAM,IAAI,MAA8CjB,GAAyB,EAAE,CAAkE,EAEvJ,GAAIiB,KAAQL,EACV,MAAM,IAAI,MAA8CZ,GAAyB,EAAE,CAAkG,EAEvL,OAAAY,EAAWK,CAAI,EAAIzB,EACZuB,CACT,EACA,WAAcG,EAAuB1B,EAA4D,CAM/F,OAAAqB,EAAe,KAAK,CAClB,QAAAK,EACA,QAAA1B,CACF,CAAC,EACMuB,CACT,EACA,eAAevB,EAAiC,CAM9C,OAAAsB,EAAqBtB,EACduB,CACT,CACF,EACA,OAAAJ,EAAgBI,CAAO,EAChB,CAACH,EAAYC,EAAgBC,CAAkB,CACxD,CDzGA,SAASK,GAAmBC,EAA0B,CACpD,OAAO,OAAOA,GAAM,UACtB,CAqEO,SAASC,GAA0CC,EAA6BC,EAAiG,CAMtL,GAAI,CAACX,EAAYY,EAAqBC,CAAuB,EAAIf,GAA8Ba,CAAoB,EAG/GG,EACJ,GAAIP,GAAgBG,CAAY,EAC9BI,EAAkB,IAAMC,GAAgBL,EAAa,CAAC,MACjD,CACL,IAAMM,EAAqBD,GAAgBL,CAAY,EACvDI,EAAkB,IAAME,CAC1B,CACA,SAASpC,EAAQqC,EAAQH,EAAgB,EAAG5C,EAAgB,CAC1D,IAAIgD,EAAe,CAAClB,EAAW9B,EAAO,IAAI,EAAG,GAAG0C,EAAoB,OAAO,CAAC,CAC1E,QAAAN,CACF,IAAMA,EAAQpC,CAAM,CAAC,EAAE,IAAI,CAAC,CAC1B,QAAAU,CACF,IAAMA,CAAO,CAAC,EACd,OAAIsC,EAAa,OAAOC,GAAM,CAAC,CAACA,CAAE,EAAE,SAAW,IAC7CD,EAAe,CAACL,CAAuB,GAElCK,EAAa,OAAO,CAACE,EAAeC,IAAmB,CAC5D,GAAIA,EACF,GAAIC,GAAQF,CAAa,EAAG,CAK1B,IAAMG,EAASF,EADAD,EACmBlD,CAAM,EACxC,OAAIqD,IAAW,OACNH,EAEDG,CACV,KAAA,IAAYC,GAAYJ,CAAa,EAenC,OAAOK,GAAgBL,EAAgBM,GAC9BL,EAAYK,EAAOxD,CAAM,CACjC,EAjBqC,CAGtC,IAAMqD,EAASF,EAAaD,EAAuBlD,CAAM,EACzD,GAAIqD,IAAW,OAAW,CACxB,GAAIH,IAAkB,KACpB,OAAOA,EAET,MAAM,IAAI,MAA8ChC,GAAyB,CAAC,CAAuE,CAC3J,CACA,OAAQmC,CACV,EASF,OAAOH,CACT,EAAGH,CAAK,CACV,CACA,OAAArC,EAAQ,gBAAkBkC,EAClBlC,CACV,CElLA,IAAM+C,GAAU,CAACrB,EAAuBpC,IAClC0D,GAAiBtB,CAAO,EACnBA,EAAQ,MAAMpC,CAAM,EAEpBoC,EAAQpC,CAAM,EAalB,SAAS2D,MAA4CC,EAAoB,CAC9E,OAAQ5D,GACC4D,EAAS,KAAKxB,GAAWqB,GAAQrB,EAASpC,CAAM,CAAC,CAE5D,CC3BA,IAAI6D,GAAc,mEAMPC,GAAS,CAACC,EAAO,KAAO,CACjC,IAAIC,EAAK,GAELC,EAAIF,EACR,KAAOE,KAELD,GAAMH,GAAY,KAAK,OAAO,EAAI,GAAK,CAAC,EAE1C,OAAOG,CACT,ECSME,GAAiD,CAAC,OAAQ,UAAW,QAAS,MAAM,EACpFC,GAAN,KAA6C,CAM3C,YAA4BC,EAAkCC,EAAoB,CAAtD,KAAA,QAAAD,EAAkC,KAAA,KAAAC,CAAqB,CADlE,KAEnB,EACMC,GAAN,KAA8C,CAM5C,YAA4BF,EAAkCC,EAAqB,CAAvD,KAAA,QAAAD,EAAkC,KAAA,KAAAC,CAAsB,CADnE,KAEnB,EAQaE,GAAsBC,GAAgC,CACjE,GAAI,OAAOA,GAAU,UAAYA,IAAU,KAAM,CAC/C,IAAMC,EAA+B,CAAC,EACtC,QAAWC,KAAYR,GACjB,OAAOM,EAAME,CAAQ,GAAM,WAC7BD,EAAYC,CAAQ,EAAIF,EAAME,CAAQ,GAG1C,OAAOD,CACT,CACA,MAAO,CACL,QAAS,OAAOD,CAAK,CACvB,CACF,EA4LaG,IAAmC,IAAM,CACpD,SAASA,EAA8EC,EAAoBC,EAA8EC,EAAuG,CAK9R,IAAMC,EAAkFC,GAAaJ,EAAa,aAAc,CAACR,EAAmBa,EAAmBC,EAAeb,KAA0B,CAC9M,QAAAD,EACA,KAAM,CACJ,GAAKC,GAAgB,CAAC,EACtB,IAAAa,EACA,UAAAD,EACA,cAAgB,WAClB,CACF,EAAE,EACIE,EAAoEH,GAAaJ,EAAa,WAAY,CAACK,EAAmBC,EAAeb,KAAwB,CACzK,QAAS,OACT,KAAM,CACJ,GAAKA,GAAgB,CAAC,EACtB,IAAAa,EACA,UAAAD,EACA,cAAgB,SAClB,CACF,EAAE,EACIG,EAAsEJ,GAAaJ,EAAa,YAAa,CAACS,EAAqBJ,EAAmBC,EAAed,EAAyBC,KAAyB,CAC3N,QAAAD,EACA,OAASU,GAAWA,EAAQ,gBAAkBP,IAAoBc,GAAS,UAAU,EACrF,KAAM,CACJ,GAAKhB,GAAgB,CAAC,EACtB,IAAAa,EACA,UAAAD,EACA,kBAAmB,CAAC,CAACb,EACrB,cAAgB,WAChB,QAASiB,GAAO,OAAS,aACzB,UAAWA,GAAO,OAAS,gBAC7B,CACF,EAAE,EACF,SAASC,EAAcJ,EAA+E,CACpG,MAAO,CAACK,EAAUC,EAAUC,IAAU,CACpC,IAAMR,EAAYH,GAAS,YAAcA,EAAQ,YAAYI,CAAG,EAAIpB,GAAO,EACrE4B,EAAkB,IAAI,gBACxBC,EACAC,EACJ,SAASC,EAAMC,EAAiB,CAC9BF,EAAcE,EACdJ,EAAgB,MAAM,CACxB,CACA,IAAMK,EAAU,gBAAkB,CAChC,IAAIC,EACJ,GAAI,CACF,IAAIC,EAAkBnB,GAAS,YAAYI,EAAK,CAC9C,SAAAM,EACA,MAAAC,CACF,CAAC,EAID,GAHIS,GAAWD,CAAe,IAC5BA,EAAkB,MAAMA,GAEtBA,IAAoB,IAASP,EAAgB,OAAO,QAEtD,KAAM,CACJ,KAAM,iBACN,QAAS,oDACX,EAEF,IAAMS,EAAiB,IAAI,QAAe,CAACC,EAAGC,IAAW,CACvDV,EAAe,IAAM,CACnBU,EAAO,CACL,KAAM,aACN,QAAST,GAAe,SAC1B,CAAC,CACH,EACAF,EAAgB,OAAO,iBAAiB,QAASC,CAAY,CAC/D,CAAC,EACDJ,EAAUJ,EAAQF,EAAWC,EAAKJ,GAAS,iBAAiB,CAC1D,UAAAG,EACA,IAAAC,CACF,EAAG,CACD,SAAAM,EACA,MAAAC,CACF,CAAC,CAAC,CAAS,EACXO,EAAc,MAAM,QAAQ,KAAK,CAACG,EAAgB,QAAQ,QAAQtB,EAAeK,EAAK,CACpF,SAAAK,EACA,SAAAC,EACA,MAAAC,EACA,UAAAR,EACA,OAAQS,EAAgB,OACxB,MAAAG,EACA,gBAAmB,CAACrB,EAAsBH,IACjC,IAAIF,GAAgBK,EAAOH,CAAI,EAExC,iBAAoB,CAACG,EAAgBH,IAC5B,IAAIC,GAAgBE,EAAOH,CAAI,CAE1C,CAAC,CAAC,EAAE,KAAKiC,GAAU,CACjB,GAAIA,aAAkBnC,GACpB,MAAMmC,EAER,OAAIA,aAAkBhC,GACbS,EAAUuB,EAAO,QAASrB,EAAWC,EAAKoB,EAAO,IAAI,EAEvDvB,EAAWuB,EAAgBrB,EAAWC,CAAG,CAClD,CAAC,CAAC,CAAC,CACL,OAASqB,EAAK,CACZP,EAAcO,aAAepC,GAAkBiB,EAAS,KAAMH,EAAWC,EAAKqB,EAAI,QAASA,EAAI,IAAI,EAAInB,EAAUmB,EAAatB,EAAWC,CAAG,CAC9I,QAAA,CACMS,GACFD,EAAgB,OAAO,oBAAoB,QAASC,CAAY,CAEpE,CAOA,OADqBb,GAAW,CAACA,EAAQ,4BAA8BM,EAAS,MAAMY,CAAW,GAAMA,EAAoB,KAAK,WAE9HT,EAAUS,CAAmB,EAExBA,CACT,EAAE,EACF,OAAO,OAAO,OAAQD,EAA8B,CAClD,MAAAF,EACA,UAAAZ,EACA,IAAAC,EACA,QAAS,CACP,OAAOa,EAAQ,KAAUS,EAAY,CACvC,CACF,CAAC,CACH,CACF,CACA,OAAO,OAAO,OAAQlB,EAA+E,CACnG,QAAAH,EACA,SAAAC,EACA,UAAAL,EACA,QAAS0B,GAAQrB,EAAUL,CAAS,EACpC,WAAAH,CACF,CAAC,CACH,CACAD,OAAAA,EAAiB,UAAY,IAAMA,EAC3BA,CACV,GAAG,EAaI,SAAS6B,GAA0CE,EAAsC,CAC9F,GAAIA,EAAO,MAAQA,EAAO,KAAK,kBAC7B,MAAMA,EAAO,QAEf,GAAIA,EAAO,MACT,MAAMA,EAAO,MAEf,OAAOA,EAAO,OAChB,CAEA,SAASR,GAAW1B,EAAuC,CACzD,OAAOA,IAAU,MAAQ,OAAOA,GAAU,UAAY,OAAOA,EAAM,MAAS,UAC9E,CCnZA,IAAMmC,GAAkC,OAAO,IAAI,4BAA4B,EAElEC,GAET,CACF,CAACD,EAAgB,EAAGhC,EACtB,EA4TA,SAASkC,GAAQC,EAAeC,EAA2B,CACzD,MAAO,GAAGD,CAAK,IAAIC,CAAS,EAC9B,CAMO,SAASC,GAAiB,CAC/B,SAAAC,CACF,EAA4B,CAAC,EAAG,CAC9B,IAAMC,EAAMD,GAAU,aAAaE,EAAgB,EACnD,OAAO,SAA4KC,EAA0I,CAC3T,GAAM,CACJ,KAAAC,EACA,YAAAC,EAAgBD,CAClB,EAAID,EACJ,GAAI,CAACC,EACH,MAAM,IAAI,MAA8CE,GAAwB,EAAE,CAAiD,EAEjI,OAAO,QAAY,IAKvB,IAAMC,GAAY,OAAOJ,EAAQ,UAAa,WAAaA,EAAQ,SAASK,GAA4B,CAAC,EAAIL,EAAQ,WAAa,CAAC,EAC7HM,EAAe,OAAO,KAAKF,CAAQ,EACnCG,EAAyC,CAC7C,wBAAyB,CAAC,EAC1B,wBAAyB,CAAC,EAC1B,eAAgB,CAAC,EACjB,cAAe,CAAC,CAClB,EACMC,EAAuD,CAC3D,QAAQC,EAAuDC,EAA6B,CAC1F,IAAMC,EAAO,OAAOF,GAAwB,SAAWA,EAAsBA,EAAoB,KACjG,GAAI,CAACE,EACH,MAAM,IAAI,MAA8CR,GAAyB,EAAE,CAAkE,EAEvJ,GAAIQ,KAAQJ,EAAQ,wBAClB,MAAM,IAAI,MAA8CJ,GAAyB,EAAE,CAA4F,EAEjL,OAAAI,EAAQ,wBAAwBI,CAAI,EAAID,EACjCF,CACT,EACA,WAAWI,EAASF,EAAS,CAC3B,OAAAH,EAAQ,cAAc,KAAK,CACzB,QAAAK,EACA,QAAAF,CACF,CAAC,EACMF,CACT,EACA,aAAaP,EAAMY,EAAe,CAChC,OAAAN,EAAQ,eAAeN,CAAI,EAAIY,EACxBL,CACT,EACA,kBAAkBP,EAAMS,EAAS,CAC/B,OAAAH,EAAQ,wBAAwBN,CAAI,EAAIS,EACjCF,CACT,CACF,EACAF,EAAa,QAAQQ,GAAe,CAClC,IAAMC,EAAoBX,EAASU,CAAW,EACxCE,EAAiC,CACrC,YAAAF,EACA,KAAMrB,GAAQQ,EAAMa,CAAW,EAC/B,eAAgB,OAAOd,EAAQ,UAAa,UAC9C,EACIiB,GAA0CF,CAAiB,EAC7DG,GAAiCF,EAAgBD,EAAmBP,EAAgBV,CAAG,EAEvFqB,GAAqCH,EAAiBD,EAA2BP,CAAc,CAEnG,CAAC,EACD,SAASY,GAAe,CAMtB,GAAM,CAACC,EAAgB,CAAC,EAAGC,EAAiB,CAAC,EAAGC,EAAqB,MAAS,EAAI,OAAOvB,EAAQ,eAAkB,WAAawB,GAA8BxB,EAAQ,aAAa,EAAI,CAACA,EAAQ,aAAa,EACvMyB,EAAoB,CACxB,GAAGJ,EACH,GAAGd,EAAQ,uBACb,EACA,OAAOmB,GAAc1B,EAAQ,aAAc2B,GAAW,CACpD,QAASC,KAAOH,EACdE,EAAQ,QAAQC,EAAMH,EAAkBG,CAAG,CAAsB,EAEnE,QAASC,KAAMtB,EAAQ,cACrBoB,EAAQ,WAAWE,EAAG,QAASA,EAAG,OAAO,EAE3C,QAASC,KAAKR,EACZK,EAAQ,WAAWG,EAAE,QAASA,EAAE,OAAO,EAErCP,GACFI,EAAQ,eAAeJ,CAAkB,CAE7C,CAAC,CACH,CACA,IAAMQ,EAAcC,GAAiBA,EAC/BC,EAAwB,IAAI,IAC9BC,EACJ,SAASxB,EAAQsB,EAA0BG,EAAuB,CAChE,OAAKD,IAAUA,EAAWd,EAAa,GAChCc,EAASF,EAAOG,CAAM,CAC/B,CACA,SAASC,GAAkB,CACzB,OAAKF,IAAUA,EAAWd,EAAa,GAChCc,EAAS,gBAAgB,CAClC,CACA,SAASG,EAAmEnC,EAAiCoC,EAAW,GAA4I,CAClQ,SAASC,EAAYP,EAA6C,CAChE,IAAIQ,EAAaR,EAAM9B,CAAW,EAClC,OAAI,OAAOsC,EAAe,KACpBF,IACFE,EAAaJ,EAAgB,GAK1BI,CACT,CACA,SAASC,EAAaC,EAAyCX,EAAY,CACzE,IAAMY,EAAgBC,GAAQX,EAAuBK,EAAU,CAC7D,OAAQ,IAAM,IAAI,OACpB,CAAC,EACD,OAAQM,GAAQD,EAAeD,EAAa,CAC1C,OAAQ,IAAM,CACZ,IAAMG,GAA0C,CAAC,EACjD,OAAW,CAAC5C,GAAM6C,EAAQ,IAAK,OAAO,QAAQ9C,EAAQ,WAAa,CAAC,CAAC,EACnE6C,GAAI5C,EAAI,EAAI8C,GAAaD,GAAUJ,EAAaN,EAAiBE,CAAQ,EAE3E,OAAOO,EACT,CACF,CAAC,CACH,CACA,MAAO,CACL,YAAA3C,EACA,aAAAuC,EACA,IAAI,WAAY,CACd,OAAOA,EAAaF,CAAW,CACjC,EACA,YAAAA,CACF,CACF,CACA,IAAM7C,EAAkE,CACtE,KAAAO,EACA,QAAAS,EACA,QAAUH,EAAQ,eAClB,aAAeA,EAAQ,wBACvB,gBAAA6B,EACA,GAAGC,EAAkBnC,CAAW,EAChC,WAAW8C,EAAY,CACrB,YAAaC,EACb,GAAGC,CACL,EAAI,CAAC,EAAG,CACN,IAAMC,EAAiBF,GAAW/C,EAClC,OAAA8C,EAAW,OAAO,CAChB,YAAaG,EACb,QAAAzC,CACF,EAAGwC,CAAM,EACD,CACN,GAAGxD,EACH,GAAG2C,EAAkBc,EAAgB,EAAI,CAC3C,CACF,CACF,EACA,OAAOzD,CACT,CACF,CACA,SAASqD,GAAyDD,EAAaJ,EAAwCN,EAA8BE,EAAoB,CACvK,SAASc,EAAQC,KAAwBC,EAAa,CACpD,IAAId,EAAaE,EAAYW,CAAS,EACtC,OAAI,OAAOb,EAAe,KACpBF,IACFE,EAAaJ,EAAgB,GAK1BU,EAASN,EAAY,GAAGc,CAAI,CACrC,CACA,OAAAF,EAAQ,UAAYN,EACZM,CACV,CAUO,IAAMG,GAA6B3D,GAAiB,EAkE3D,SAASS,IAAsD,CAC7D,SAASmD,EAAWC,EAAoDP,EAAgG,CACtK,MAAO,CACL,uBAAwB,aACxB,eAAAO,EACA,GAAGP,CACL,CACF,CACA,OAAAM,EAAW,UAAY,IAAMA,EACtB,CACL,QAAQE,EAAsC,CAC5C,OAAO,OAAO,OAAO,CAGnB,CAACA,EAAY,IAAI,KAAKJ,EAAsC,CAC1D,OAAOI,EAAY,GAAGJ,CAAI,CAC5B,CACF,EAAEI,EAAY,IAAI,EAAI,CACpB,uBAAwB,SAC1B,CAAW,CACb,EACA,gBAAgBC,EAASjD,EAAS,CAChC,MAAO,CACL,uBAAwB,qBACxB,QAAAiD,EACA,QAAAjD,CACF,CACF,EACA,WAAA8C,CACF,CACF,CACA,SAASrC,GAAqC,CAC5C,KAAAR,EACA,YAAAG,EACA,eAAA8C,CACF,EAAmBC,EAGuDtD,EAA+C,CACvH,IAAImD,EACAI,EACJ,GAAI,YAAaD,EAAyB,CACxC,GAAID,GAAkB,CAACG,GAAmCF,CAAuB,EAC/E,MAAM,IAAI,MAA8C1D,GAAyB,EAAE,CAA+G,EAEpMuD,EAAcG,EAAwB,QACtCC,EAAkBD,EAAwB,OAC5C,MACEH,EAAcG,EAEhBtD,EAAQ,QAAQI,EAAM+C,CAAW,EAAE,kBAAkB5C,EAAa4C,CAAW,EAAE,aAAa5C,EAAagD,EAAkBE,GAAarD,EAAMmD,CAAe,EAAIE,GAAarD,CAAI,CAAC,CACrL,CACA,SAASM,GAA0CF,EAAqG,CACtJ,OAAOA,EAAkB,yBAA2B,YACtD,CACA,SAASgD,GAA0ChD,EAA2F,CAC5I,OAAOA,EAAkB,yBAA2B,oBACtD,CACA,SAASG,GAAwC,CAC/C,KAAAP,EACA,YAAAG,CACF,EAAmBC,EAA2ER,EAA+CT,EAA2C,CACtL,GAAI,CAACA,EACH,MAAM,IAAI,MAA8CK,GAAyB,EAAE,CAAiM,EAEtR,GAAM,CACJ,eAAAsD,EACA,UAAAQ,EACA,QAAAC,EACA,SAAAC,EACA,QAAAC,EACA,QAAApE,CACF,EAAIe,EACEsD,EAAQvE,EAAIa,EAAM8C,EAAiBzD,CAAe,EACxDO,EAAQ,aAAaO,EAAauD,CAAK,EACnCJ,GACF1D,EAAQ,QAAQ8D,EAAM,UAAWJ,CAAS,EAExCC,GACF3D,EAAQ,QAAQ8D,EAAM,QAASH,CAAO,EAEpCC,GACF5D,EAAQ,QAAQ8D,EAAM,SAAUF,CAAQ,EAEtCC,GACF7D,EAAQ,WAAW8D,EAAM,QAASD,CAAO,EAE3C7D,EAAQ,kBAAkBO,EAAa,CACrC,UAAWmD,GAAaK,GACxB,QAASJ,GAAWI,GACpB,SAAUH,GAAYG,GACtB,QAASF,GAAWE,EACtB,CAAC,CACH,CACA,SAASA,IAAO,CAAC,CSjrBjB,IAAMC,GAAW,WACXC,GAAY,YACZC,GAAY,YAGLC,GAAiB,QAAQD,EAAS,GAClCE,GAAiB,QAAQH,EAAS,GAClCI,GAAqB,GAAGL,EAAQ,IAAIE,EAAS,GAC7CI,GAAqB,GAAGN,EAAQ,IAAIC,EAAS,GDK1D,GAAM,CACJ,OAAAM,EACF,EAAI,OAKJ,IAAMC,GAAO,qBA6JN,IAAMC,GAAgCC,GAAuBC,GAAa,GAAGC,EAAG,MAAM,EAAG,CAC9F,UAAW,IAAMH,EACnB,CAAC,EAKYI,GAAmCF,GAAa,GAAGC,EAAG,YAAY,EAKlEE,GAAmCJ,GAAuBC,GAAa,GAAGC,EAAG,SAAS,EAAG,CACpG,UAAW,IAAME,EACnB,CAAC,EKwCD,IAAMC,GAAiB,OAAO,IAAI,0BAA0B,EClOrD,SAASC,GAAuBC,EAAc,CACnD,MAAO,iCAAiCA,CAAI,oDAAoDA,CAAI,iFACtG,CCKA,IAAMC,GAA0B,CAC9B,KAAM,OACN,MAAO,UACP,OAAQ,MACV,EAEaC,GAAYC,GAAY,CACnC,KAAM,OACN,aAAAF,GACA,SAAU,CACR,YAAcG,GAAU,CAAC,EACzB,WAAY,CAACA,EAAOC,IAA8C,CAChED,EAAM,KAAOC,EAAO,QACpBD,EAAM,MAAQ,OAChB,EACA,iBAAkB,CAACA,EAAOC,IAA8C,CACtED,EAAM,MAAQC,EAAO,UAAY,OAAY,QAAU,SACzD,EACA,aAAc,CAACD,EAAOC,IAA8C,CAClED,EAAM,MAAQ,QACdA,EAAM,OAASC,EAAO,OACxB,EACA,kBAAmB,CAACD,EAAOC,IAA6C,CAExE,EACA,iBAAkB,CAACD,EAAOC,IAA+B,CAEzD,CACF,CACF,CAAC,EAEY,CACX,YAAAC,GACA,WAAAC,GACA,iBAAAC,GACA,aAAAC,GACA,kBAAAC,GACA,iBAAAC,EACF,EAAIT,GAAU,QAEPU,GAAQV,GAAU,QCtCzB,IAAIW,GAAgB,SAASC,EAAGC,EAAG,CACjC,OAAAF,GAAgB,OAAO,gBAClB,CAAE,UAAW,CAAC,CAAE,YAAa,OAAS,SAAUC,EAAGC,EAAG,CAAED,EAAE,UAAYC,CAAG,GAC1E,SAAUD,EAAGC,EAAG,CAAE,QAASC,KAAKD,EAAO,OAAO,UAAU,eAAe,KAAKA,EAAGC,CAAC,IAAGF,EAAEE,CAAC,EAAID,EAAEC,CAAC,EAAG,EAC7FH,GAAcC,EAAGC,CAAC,CAC3B,EAEO,SAASE,EAAUH,EAAGC,EAAG,CAC9B,GAAI,OAAOA,GAAM,YAAcA,IAAM,KACjC,MAAM,IAAI,UAAU,uBAAyB,OAAOA,CAAC,EAAI,+BAA+B,EAC5FF,GAAcC,EAAGC,CAAC,EAClB,SAASG,GAAK,CAAE,KAAK,YAAcJ,CAAG,CACtCA,EAAE,UAAYC,IAAM,KAAO,OAAO,OAAOA,CAAC,GAAKG,EAAG,UAAYH,EAAE,UAAW,IAAIG,EACjF,CAqFO,SAASC,GAAUC,EAASC,EAAYC,EAAGC,EAAW,CAC3D,SAASC,EAAMC,EAAO,CAAE,OAAOA,aAAiBH,EAAIG,EAAQ,IAAIH,EAAE,SAAUI,EAAS,CAAEA,EAAQD,CAAK,CAAG,CAAC,CAAG,CAC3G,OAAO,IAAKH,IAAMA,EAAI,UAAU,SAAUI,EAASC,EAAQ,CACvD,SAASC,EAAUH,EAAO,CAAE,GAAI,CAAEI,EAAKN,EAAU,KAAKE,CAAK,CAAC,CAAG,OAASK,EAAG,CAAEH,EAAOG,CAAC,CAAG,CAAE,CAC1F,SAASC,EAASN,EAAO,CAAE,GAAI,CAAEI,EAAKN,EAAU,MAASE,CAAK,CAAC,CAAG,OAASK,EAAG,CAAEH,EAAOG,CAAC,CAAG,CAAE,CAC7F,SAASD,EAAKG,EAAQ,CAAEA,EAAO,KAAON,EAAQM,EAAO,KAAK,EAAIR,EAAMQ,EAAO,KAAK,EAAE,KAAKJ,EAAWG,CAAQ,CAAG,CAC7GF,GAAMN,EAAYA,EAAU,MAAMH,EAASC,GAAc,CAAC,CAAC,GAAG,KAAK,CAAC,CACxE,CAAC,CACH,CAEO,SAASY,GAAYb,EAASc,EAAM,CACzC,IAAIC,EAAI,CAAE,MAAO,EAAG,KAAM,UAAW,CAAE,GAAIC,EAAE,CAAC,EAAI,EAAG,MAAMA,EAAE,CAAC,EAAG,OAAOA,EAAE,CAAC,CAAG,EAAG,KAAM,CAAC,EAAG,IAAK,CAAC,CAAE,EAAGC,EAAGC,EAAGF,EAAGG,EAAI,OAAO,QAAQ,OAAO,UAAa,WAAa,SAAW,QAAQ,SAAS,EAC/L,OAAOA,EAAE,KAAOC,EAAK,CAAC,EAAGD,EAAE,MAAWC,EAAK,CAAC,EAAGD,EAAE,OAAYC,EAAK,CAAC,EAAG,OAAO,QAAW,aAAeD,EAAE,OAAO,QAAQ,EAAI,UAAW,CAAE,OAAO,IAAM,GAAIA,EAC1J,SAASC,EAAKC,EAAG,CAAE,OAAO,SAAUC,EAAG,CAAE,OAAOb,EAAK,CAACY,EAAGC,CAAC,CAAC,CAAG,CAAG,CACjE,SAASb,EAAKc,EAAI,CACd,GAAIN,EAAG,MAAM,IAAI,UAAU,iCAAiC,EAC5D,KAAOE,IAAMA,EAAI,EAAGI,EAAG,CAAC,IAAMR,EAAI,IAAKA,GAAG,GAAI,CAC1C,GAAIE,EAAI,EAAGC,IAAMF,EAAIO,EAAG,CAAC,EAAI,EAAIL,EAAE,OAAYK,EAAG,CAAC,EAAIL,EAAE,SAAcF,EAAIE,EAAE,SAAcF,EAAE,KAAKE,CAAC,EAAG,GAAKA,EAAE,OAAS,EAAEF,EAAIA,EAAE,KAAKE,EAAGK,EAAG,CAAC,CAAC,GAAG,KAAM,OAAOP,EAE3J,OADIE,EAAI,EAAGF,IAAGO,EAAK,CAACA,EAAG,CAAC,EAAI,EAAGP,EAAE,KAAK,GAC9BO,EAAG,CAAC,EAAG,CACX,IAAK,GAAG,IAAK,GAAGP,EAAIO,EAAI,MACxB,IAAK,GAAG,OAAAR,EAAE,QAAgB,CAAE,MAAOQ,EAAG,CAAC,EAAG,KAAM,EAAM,EACtD,IAAK,GAAGR,EAAE,QAASG,EAAIK,EAAG,CAAC,EAAGA,EAAK,CAAC,CAAC,EAAG,SACxC,IAAK,GAAGA,EAAKR,EAAE,IAAI,IAAI,EAAGA,EAAE,KAAK,IAAI,EAAG,SACxC,QACI,GAAMC,EAAID,EAAE,KAAM,EAAAC,EAAIA,EAAE,OAAS,GAAKA,EAAEA,EAAE,OAAS,CAAC,KAAOO,EAAG,CAAC,IAAM,GAAKA,EAAG,CAAC,IAAM,GAAI,CAAER,EAAI,EAAG,QAAU,CAC3G,GAAIQ,EAAG,CAAC,IAAM,IAAM,CAACP,GAAMO,EAAG,CAAC,EAAIP,EAAE,CAAC,GAAKO,EAAG,CAAC,EAAIP,EAAE,CAAC,GAAK,CAAED,EAAE,MAAQQ,EAAG,CAAC,EAAG,KAAO,CACrF,GAAIA,EAAG,CAAC,IAAM,GAAKR,EAAE,MAAQC,EAAE,CAAC,EAAG,CAAED,EAAE,MAAQC,EAAE,CAAC,EAAGA,EAAIO,EAAI,KAAO,CACpE,GAAIP,GAAKD,EAAE,MAAQC,EAAE,CAAC,EAAG,CAAED,EAAE,MAAQC,EAAE,CAAC,EAAGD,EAAE,IAAI,KAAKQ,CAAE,EAAG,KAAO,CAC9DP,EAAE,CAAC,GAAGD,EAAE,IAAI,IAAI,EACpBA,EAAE,KAAK,IAAI,EAAG,QACtB,CACAQ,EAAKT,EAAK,KAAKd,EAASe,CAAC,CAC7B,OAASL,EAAG,CAAEa,EAAK,CAAC,EAAGb,CAAC,EAAGQ,EAAI,CAAG,QAAE,CAAUD,EAAID,EAAI,CAAG,CACzD,GAAIO,EAAG,CAAC,EAAI,EAAG,MAAMA,EAAG,CAAC,EAAG,MAAO,CAAE,MAAOA,EAAG,CAAC,EAAIA,EAAG,CAAC,EAAI,OAAQ,KAAM,EAAK,CACnF,CACF,CAkBO,SAASC,GAASC,EAAG,CAC1B,IAAIC,EAAI,OAAO,QAAW,YAAc,OAAO,SAAUC,EAAID,GAAKD,EAAEC,CAAC,EAAGE,EAAI,EAC5E,GAAID,EAAG,OAAOA,EAAE,KAAKF,CAAC,EACtB,GAAIA,GAAK,OAAOA,EAAE,QAAW,SAAU,MAAO,CAC1C,KAAM,UAAY,CACd,OAAIA,GAAKG,GAAKH,EAAE,SAAQA,EAAI,QACrB,CAAE,MAAOA,GAAKA,EAAEG,GAAG,EAAG,KAAM,CAACH,CAAE,CAC1C,CACJ,EACA,MAAM,IAAI,UAAUC,EAAI,0BAA4B,iCAAiC,CACvF,CAEO,SAASG,GAAOJ,EAAGK,EAAG,CAC3B,IAAIH,EAAI,OAAO,QAAW,YAAcF,EAAE,OAAO,QAAQ,EACzD,GAAI,CAACE,EAAG,OAAOF,EACf,IAAIG,EAAID,EAAE,KAAKF,CAAC,EAAGM,EAAGC,EAAK,CAAC,EAAGC,EAC/B,GAAI,CACA,MAAQH,IAAM,QAAUA,KAAM,IAAM,EAAEC,EAAIH,EAAE,KAAK,GAAG,MAAMI,EAAG,KAAKD,EAAE,KAAK,CAC7E,OACOG,EAAO,CAAED,EAAI,CAAE,MAAOC,CAAM,CAAG,QACtC,CACI,GAAI,CACIH,GAAK,CAACA,EAAE,OAASJ,EAAIC,EAAE,SAAYD,EAAE,KAAKC,CAAC,CACnD,QACA,CAAU,GAAIK,EAAG,MAAMA,EAAE,KAAO,CACpC,CACA,OAAOD,CACT,CAkBO,SAASG,GAAcC,EAAIC,EAAMC,EAAM,CAC5C,GAAIA,GAAQ,UAAU,SAAW,EAAG,QAASC,EAAI,EAAGC,EAAIH,EAAK,OAAQI,EAAIF,EAAIC,EAAGD,KACxEE,GAAM,EAAEF,KAAKF,MACRI,IAAIA,EAAK,MAAM,UAAU,MAAM,KAAKJ,EAAM,EAAGE,CAAC,GACnDE,EAAGF,CAAC,EAAIF,EAAKE,CAAC,GAGtB,OAAOH,EAAG,OAAOK,GAAM,MAAM,UAAU,MAAM,KAAKJ,CAAI,CAAC,CACzD,CAEO,SAASK,GAAQC,EAAG,CACzB,OAAO,gBAAgBD,IAAW,KAAK,EAAIC,EAAG,MAAQ,IAAID,GAAQC,CAAC,CACrE,CAEO,SAASC,GAAiBC,EAASC,EAAYC,EAAW,CAC/D,GAAI,CAAC,OAAO,cAAe,MAAM,IAAI,UAAU,sCAAsC,EACrF,IAAIC,EAAID,EAAU,MAAMF,EAASC,GAAc,CAAC,CAAC,EAAGP,EAAGU,EAAI,CAAC,EAC5D,OAAOV,EAAI,OAAO,QAAQ,OAAO,eAAkB,WAAa,cAAgB,QAAQ,SAAS,EAAGW,EAAK,MAAM,EAAGA,EAAK,OAAO,EAAGA,EAAK,SAAUC,CAAW,EAAGZ,EAAE,OAAO,aAAa,EAAI,UAAY,CAAE,OAAO,IAAM,EAAGA,EACtN,SAASY,EAAYC,EAAG,CAAE,OAAO,SAAUT,EAAG,CAAE,OAAO,QAAQ,QAAQA,CAAC,EAAE,KAAKS,EAAGC,CAAM,CAAG,CAAG,CAC9F,SAASH,EAAKI,EAAGF,EAAG,CAAMJ,EAAEM,CAAC,IAAKf,EAAEe,CAAC,EAAI,SAAUX,EAAG,CAAE,OAAO,IAAI,QAAQ,SAAUY,EAAGC,EAAG,CAAEP,EAAE,KAAK,CAACK,EAAGX,EAAGY,EAAGC,CAAC,CAAC,EAAI,GAAKC,EAAOH,EAAGX,CAAC,CAAG,CAAC,CAAG,EAAOS,IAAGb,EAAEe,CAAC,EAAIF,EAAEb,EAAEe,CAAC,CAAC,GAAK,CACvK,SAASG,EAAOH,EAAGX,EAAG,CAAE,GAAI,CAAEe,EAAKV,EAAEM,CAAC,EAAEX,CAAC,CAAC,CAAG,OAASgB,EAAG,CAAEC,EAAOX,EAAE,CAAC,EAAE,CAAC,EAAGU,CAAC,CAAG,CAAE,CACjF,SAASD,EAAKG,EAAG,CAAEA,EAAE,iBAAiBnB,GAAU,QAAQ,QAAQmB,EAAE,MAAM,CAAC,EAAE,KAAKC,EAAST,CAAM,EAAIO,EAAOX,EAAE,CAAC,EAAE,CAAC,EAAGY,CAAC,CAAG,CACvH,SAASC,EAAQC,EAAO,CAAEN,EAAO,OAAQM,CAAK,CAAG,CACjD,SAASV,EAAOU,EAAO,CAAEN,EAAO,QAASM,CAAK,CAAG,CACjD,SAASH,EAAOR,EAAGT,EAAG,CAAMS,EAAET,CAAC,EAAGM,EAAE,MAAM,EAAGA,EAAE,QAAQQ,EAAOR,EAAE,CAAC,EAAE,CAAC,EAAGA,EAAE,CAAC,EAAE,CAAC,CAAC,CAAG,CACnF,CAQO,SAASe,GAAcC,EAAG,CAC/B,GAAI,CAAC,OAAO,cAAe,MAAM,IAAI,UAAU,sCAAsC,EACrF,IAAIC,EAAID,EAAE,OAAO,aAAa,EAAGE,EACjC,OAAOD,EAAIA,EAAE,KAAKD,CAAC,GAAKA,EAAI,OAAOG,IAAa,WAAaA,GAASH,CAAC,EAAIA,EAAE,OAAO,QAAQ,EAAE,EAAGE,EAAI,CAAC,EAAGE,EAAK,MAAM,EAAGA,EAAK,OAAO,EAAGA,EAAK,QAAQ,EAAGF,EAAE,OAAO,aAAa,EAAI,UAAY,CAAE,OAAO,IAAM,EAAGA,GAC9M,SAASE,EAAKC,EAAG,CAAEH,EAAEG,CAAC,EAAIL,EAAEK,CAAC,GAAK,SAAUC,EAAG,CAAE,OAAO,IAAI,QAAQ,SAAUC,EAASC,EAAQ,CAAEF,EAAIN,EAAEK,CAAC,EAAEC,CAAC,EAAGG,EAAOF,EAASC,EAAQF,EAAE,KAAMA,EAAE,KAAK,CAAG,CAAC,CAAG,CAAG,CAC/J,SAASG,EAAOF,EAASC,EAAQE,EAAGJ,EAAG,CAAE,QAAQ,QAAQA,CAAC,EAAE,KAAK,SAASA,EAAG,CAAEC,EAAQ,CAAE,MAAOD,EAAG,KAAMI,CAAE,CAAC,CAAG,EAAGF,CAAM,CAAG,CAC7H,CCxPM,SAAUG,EAAWC,EAAU,CACnC,OAAO,OAAOA,GAAU,UAC1B,CCGM,SAAUC,GAAoBC,EAAgC,CAClE,IAAMC,EAAS,SAACC,EAAa,CAC3B,MAAM,KAAKA,CAAQ,EACnBA,EAAS,MAAQ,IAAI,MAAK,EAAG,KAC/B,EAEMC,EAAWH,EAAWC,CAAM,EAClC,OAAAE,EAAS,UAAY,OAAO,OAAO,MAAM,SAAS,EAClDA,EAAS,UAAU,YAAcA,EAC1BA,CACT,CCDO,IAAMC,GAA+CC,GAC1D,SAACC,EAAM,CACL,OAAA,SAA4CC,EAA0B,CACpED,EAAO,IAAI,EACX,KAAK,QAAUC,EACRA,EAAO,OAAM;EACxBA,EAAO,IAAI,SAACC,EAAKC,EAAC,CAAK,OAAGA,EAAI,EAAC,KAAKD,EAAI,SAAQ,CAAzB,CAA6B,EAAE,KAAK;GAAM,EACzD,GACJ,KAAK,KAAO,sBACZ,KAAK,OAASD,CAChB,CARA,CAQC,ECvBC,SAAUG,GAAaC,EAA6BC,EAAO,CAC/D,GAAID,EAAK,CACP,IAAME,EAAQF,EAAI,QAAQC,CAAI,EAC9B,GAAKC,GAASF,EAAI,OAAOE,EAAO,CAAC,EAErC,CCOA,IAAAC,GAAA,UAAA,CAyBE,SAAAA,EAAoBC,EAA4B,CAA5B,KAAA,gBAAAA,EAdb,KAAA,OAAS,GAER,KAAA,WAAmD,KAMnD,KAAA,YAAqD,IAMV,CAQnD,OAAAD,EAAA,UAAA,YAAA,UAAA,aACME,EAEJ,GAAI,CAAC,KAAK,OAAQ,CAChB,KAAK,OAAS,GAGN,IAAAC,EAAe,KAAI,WAC3B,GAAIA,EAEF,GADA,KAAK,WAAa,KACd,MAAM,QAAQA,CAAU,MAC1B,QAAqBC,EAAAC,GAAAF,CAAU,EAAAG,EAAAF,EAAA,KAAA,EAAA,CAAAE,EAAA,KAAAA,EAAAF,EAAA,KAAA,EAAE,CAA5B,IAAMG,EAAMD,EAAA,MACfC,EAAO,OAAO,IAAI,yGAGpBJ,EAAW,OAAO,IAAI,EAIlB,IAAiBK,EAAqB,KAAI,gBAClD,GAAIC,EAAWD,CAAgB,EAC7B,GAAI,CACFA,EAAgB,QACTE,EAAG,CACVR,EAASQ,aAAaC,GAAsBD,EAAE,OAAS,CAACA,CAAC,EAIrD,IAAAE,EAAgB,KAAI,YAC5B,GAAIA,EAAa,CACf,KAAK,YAAc,SACnB,QAAwBC,EAAAR,GAAAO,CAAW,EAAAE,EAAAD,EAAA,KAAA,EAAA,CAAAC,EAAA,KAAAA,EAAAD,EAAA,KAAA,EAAE,CAAhC,IAAME,EAASD,EAAA,MAClB,GAAI,CACFE,GAAcD,CAAS,QAChBE,EAAK,CACZf,EAASA,GAAU,CAAA,EACfe,aAAeN,GACjBT,EAAMgB,GAAAA,GAAA,CAAA,EAAAC,GAAOjB,CAAM,CAAA,EAAAiB,GAAKF,EAAI,MAAM,CAAA,EAElCf,EAAO,KAAKe,CAAG,sGAMvB,GAAIf,EACF,MAAM,IAAIS,GAAoBT,CAAM,EAG1C,EAoBAF,EAAA,UAAA,IAAA,SAAIoB,EAAuB,OAGzB,GAAIA,GAAYA,IAAa,KAC3B,GAAI,KAAK,OAGPJ,GAAcI,CAAQ,MACjB,CACL,GAAIA,aAAoBpB,EAAc,CAGpC,GAAIoB,EAAS,QAAUA,EAAS,WAAW,IAAI,EAC7C,OAEFA,EAAS,WAAW,IAAI,GAEzB,KAAK,aAAcC,EAAA,KAAK,eAAW,MAAAA,IAAA,OAAAA,EAAI,CAAA,GAAI,KAAKD,CAAQ,EAG/D,EAOQpB,EAAA,UAAA,WAAR,SAAmBsB,EAAoB,CAC7B,IAAAnB,EAAe,KAAI,WAC3B,OAAOA,IAAemB,GAAW,MAAM,QAAQnB,CAAU,GAAKA,EAAW,SAASmB,CAAM,CAC1F,EASQtB,EAAA,UAAA,WAAR,SAAmBsB,EAAoB,CAC7B,IAAAnB,EAAe,KAAI,WAC3B,KAAK,WAAa,MAAM,QAAQA,CAAU,GAAKA,EAAW,KAAKmB,CAAM,EAAGnB,GAAcA,EAAa,CAACA,EAAYmB,CAAM,EAAIA,CAC5H,EAMQtB,EAAA,UAAA,cAAR,SAAsBsB,EAAoB,CAChC,IAAAnB,EAAe,KAAI,WACvBA,IAAemB,EACjB,KAAK,WAAa,KACT,MAAM,QAAQnB,CAAU,GACjCoB,GAAUpB,EAAYmB,CAAM,CAEhC,EAgBAtB,EAAA,UAAA,OAAA,SAAOoB,EAAsC,CACnC,IAAAR,EAAgB,KAAI,YAC5BA,GAAeW,GAAUX,EAAaQ,CAAQ,EAE1CA,aAAoBpB,GACtBoB,EAAS,cAAc,IAAI,CAE/B,EAlLcpB,EAAA,MAAS,UAAA,CACrB,IAAMwB,EAAQ,IAAIxB,EAClB,OAAAwB,EAAM,OAAS,GACRA,CACT,EAAE,EA+KJxB,GArLA,EAuLO,IAAMyB,GAAqBC,GAAa,MAEzC,SAAUC,GAAeC,EAAU,CACvC,OACEA,aAAiBF,IAChBE,GAAS,WAAYA,GAASC,EAAWD,EAAM,MAAM,GAAKC,EAAWD,EAAM,GAAG,GAAKC,EAAWD,EAAM,WAAW,CAEpH,CAEA,SAASE,GAAcC,EAAwC,CACzDF,EAAWE,CAAS,EACtBA,EAAS,EAETA,EAAU,YAAW,CAEzB,CChNO,IAAMC,GAAuB,CAClC,iBAAkB,KAClB,sBAAuB,KACvB,QAAS,OACT,sCAAuC,GACvC,yBAA0B,ICGrB,IAAMC,GAAmC,CAG9C,WAAA,SAAWC,EAAqBC,EAAgB,SAAEC,EAAA,CAAA,EAAAC,EAAA,EAAAA,EAAA,UAAA,OAAAA,IAAAD,EAAAC,EAAA,CAAA,EAAA,UAAAA,CAAA,EACxC,IAAAC,EAAaL,GAAe,SACpC,OAAIK,GAAU,WACLA,EAAS,WAAU,MAAnBA,EAAQC,GAAA,CAAYL,EAASC,CAAO,EAAAK,GAAKJ,CAAI,CAAA,CAAA,EAE/C,WAAU,MAAA,OAAAG,GAAA,CAACL,EAASC,CAAO,EAAAK,GAAKJ,CAAI,CAAA,CAAA,CAC7C,EACA,aAAA,SAAaK,EAAM,CACT,IAAAH,EAAaL,GAAe,SACpC,OAAQK,GAAU,cAAgB,cAAcG,CAAa,CAC/D,EACA,SAAU,QCjBN,SAAUC,GAAqBC,EAAQ,CAC3CC,GAAgB,WAAW,UAAA,CACjB,IAAAC,EAAqBC,GAAM,iBACnC,GAAID,EAEFA,EAAiBF,CAAG,MAGpB,OAAMA,CAEV,CAAC,CACH,CCtBM,SAAUI,IAAI,CAAK,CCMlB,IAAMC,GAAyB,UAAA,CAAM,OAAAC,GAAmB,IAAK,OAAW,MAAS,CAA5C,EAAsE,EAO5G,SAAUC,GAAkBC,EAAU,CAC1C,OAAOF,GAAmB,IAAK,OAAWE,CAAK,CACjD,CAOM,SAAUC,GAAoBC,EAAQ,CAC1C,OAAOJ,GAAmB,IAAKI,EAAO,MAAS,CACjD,CAQM,SAAUJ,GAAmBK,EAAuBD,EAAYF,EAAU,CAC9E,MAAO,CACL,KAAIG,EACJ,MAAKD,EACL,MAAKF,EAET,CCrCA,IAAII,GAAuD,KASrD,SAAUC,GAAaC,EAAc,CACzC,GAAIC,GAAO,sCAAuC,CAChD,IAAMC,EAAS,CAACJ,GAKhB,GAJII,IACFJ,GAAU,CAAE,YAAa,GAAO,MAAO,IAAI,GAE7CE,EAAE,EACEE,EAAQ,CACJ,IAAAC,EAAyBL,GAAvBM,EAAWD,EAAA,YAAEE,EAAKF,EAAA,MAE1B,GADAL,GAAU,KACNM,EACF,MAAMC,QAMVL,EAAE,CAEN,CAMM,SAAUM,GAAaC,EAAQ,CAC/BN,GAAO,uCAAyCH,KAClDA,GAAQ,YAAc,GACtBA,GAAQ,MAAQS,EAEpB,CCrBA,IAAAC,GAAA,SAAAC,EAAA,CAAmCC,EAAAF,EAAAC,CAAA,EA6BjC,SAAAD,EAAYG,EAA6C,CAAzD,IAAAC,EACEH,EAAA,KAAA,IAAA,GAAO,KATC,OAAAG,EAAA,UAAqB,GAUzBD,GACFC,EAAK,YAAcD,EAGfE,GAAeF,CAAW,GAC5BA,EAAY,IAAIC,CAAI,GAGtBA,EAAK,YAAcE,IAEvB,CAzBO,OAAAN,EAAA,OAAP,SAAiBO,EAAwBC,EAA2BC,EAAqB,CACvF,OAAO,IAAIC,GAAeH,EAAMC,EAAOC,CAAQ,CACjD,EAgCAT,EAAA,UAAA,KAAA,SAAKW,EAAS,CACR,KAAK,UACPC,GAA0BC,GAAiBF,CAAK,EAAG,IAAI,EAEvD,KAAK,MAAMA,CAAM,CAErB,EASAX,EAAA,UAAA,MAAA,SAAMc,EAAS,CACT,KAAK,UACPF,GAA0BG,GAAkBD,CAAG,EAAG,IAAI,GAEtD,KAAK,UAAY,GACjB,KAAK,OAAOA,CAAG,EAEnB,EAQAd,EAAA,UAAA,SAAA,UAAA,CACM,KAAK,UACPY,GAA0BI,GAAuB,IAAI,GAErD,KAAK,UAAY,GACjB,KAAK,UAAS,EAElB,EAEAhB,EAAA,UAAA,YAAA,UAAA,CACO,KAAK,SACR,KAAK,UAAY,GACjBC,EAAA,UAAM,YAAW,KAAA,IAAA,EACjB,KAAK,YAAc,KAEvB,EAEUD,EAAA,UAAA,MAAV,SAAgBW,EAAQ,CACtB,KAAK,YAAY,KAAKA,CAAK,CAC7B,EAEUX,EAAA,UAAA,OAAV,SAAiBc,EAAQ,CACvB,GAAI,CACF,KAAK,YAAY,MAAMA,CAAG,UAE1B,KAAK,YAAW,EAEpB,EAEUd,EAAA,UAAA,UAAV,UAAA,CACE,GAAI,CACF,KAAK,YAAY,SAAQ,UAEzB,KAAK,YAAW,EAEpB,EACFA,CAAA,EApHmCiB,EAAY,EA2H/C,IAAMC,GAAQ,SAAS,UAAU,KAEjC,SAASC,GAAyCC,EAAQC,EAAY,CACpE,OAAOH,GAAM,KAAKE,EAAIC,CAAO,CAC/B,CAMA,IAAAC,GAAA,UAAA,CACE,SAAAA,EAAoBC,EAAqC,CAArC,KAAA,gBAAAA,CAAwC,CAE5D,OAAAD,EAAA,UAAA,KAAA,SAAKE,EAAQ,CACH,IAAAD,EAAoB,KAAI,gBAChC,GAAIA,EAAgB,KAClB,GAAI,CACFA,EAAgB,KAAKC,CAAK,QACnBC,EAAO,CACdC,GAAqBD,CAAK,EAGhC,EAEAH,EAAA,UAAA,MAAA,SAAMK,EAAQ,CACJ,IAAAJ,EAAoB,KAAI,gBAChC,GAAIA,EAAgB,MAClB,GAAI,CACFA,EAAgB,MAAMI,CAAG,QAClBF,EAAO,CACdC,GAAqBD,CAAK,OAG5BC,GAAqBC,CAAG,CAE5B,EAEAL,EAAA,UAAA,SAAA,UAAA,CACU,IAAAC,EAAoB,KAAI,gBAChC,GAAIA,EAAgB,SAClB,GAAI,CACFA,EAAgB,SAAQ,QACjBE,EAAO,CACdC,GAAqBD,CAAK,EAGhC,EACFH,CAAA,EArCA,EAuCAM,GAAA,SAAAC,EAAA,CAAuCC,EAAAF,EAAAC,CAAA,EACrC,SAAAD,EACEG,EACAN,EACAO,EAA8B,CAHhC,IAAAC,EAKEJ,EAAA,KAAA,IAAA,GAAO,KAEHN,EACJ,GAAIW,EAAWH,CAAc,GAAK,CAACA,EAGjCR,EAAkB,CAChB,KAAOQ,GAAkB,OACzB,MAAON,GAAS,OAChB,SAAUO,GAAY,YAEnB,CAEL,IAAIG,EACAF,GAAQG,GAAO,0BAIjBD,EAAU,OAAO,OAAOJ,CAAc,EACtCI,EAAQ,YAAc,UAAA,CAAM,OAAAF,EAAK,YAAW,CAAhB,EAC5BV,EAAkB,CAChB,KAAMQ,EAAe,MAAQZ,GAAKY,EAAe,KAAMI,CAAO,EAC9D,MAAOJ,EAAe,OAASZ,GAAKY,EAAe,MAAOI,CAAO,EACjE,SAAUJ,EAAe,UAAYZ,GAAKY,EAAe,SAAUI,CAAO,IAI5EZ,EAAkBQ,EAMtB,OAAAE,EAAK,YAAc,IAAIX,GAAiBC,CAAe,GACzD,CACF,OAAAK,CAAA,EAzCuCS,EAAU,EA2CjD,SAASC,GAAqBC,EAAU,CAClCC,GAAO,sCACTC,GAAaF,CAAK,EAIlBG,GAAqBH,CAAK,CAE9B,CAQA,SAASI,GAAoBC,EAAQ,CACnC,MAAMA,CACR,CAOA,SAASC,GAA0BC,EAA2CC,EAA2B,CAC/F,IAAAC,EAA0BR,GAAM,sBACxCQ,GAAyBC,GAAgB,WAAW,UAAA,CAAM,OAAAD,EAAsBF,EAAcC,CAAU,CAA9C,CAA+C,CAC3G,CAOO,IAAMG,GAA6D,CACxE,OAAQ,GACR,KAAMC,GACN,MAAOR,GACP,SAAUQ,IC5QL,IAAMC,GAA+B,UAAA,CAAM,OAAC,OAAO,QAAW,YAAc,OAAO,YAAe,cAAvD,EAAsE,ECoClH,SAAUC,GAAYC,EAAI,CAC9B,OAAOA,CACT,CCsCM,SAAUC,GAAoBC,EAA+B,CACjE,OAAIA,EAAI,SAAW,EACVC,GAGLD,EAAI,SAAW,EACVA,EAAI,CAAC,EAGP,SAAeE,EAAQ,CAC5B,OAAOF,EAAI,OAAO,SAACG,EAAWC,EAAuB,CAAK,OAAAA,EAAGD,CAAI,CAAP,EAAUD,CAAY,CAClF,CACF,CC9EA,IAAAG,EAAA,UAAA,CAkBE,SAAAA,EAAYC,EAA6E,CACnFA,IACF,KAAK,WAAaA,EAEtB,CA4BA,OAAAD,EAAA,UAAA,KAAA,SAAQE,EAAyB,CAC/B,IAAMC,EAAa,IAAIH,EACvB,OAAAG,EAAW,OAAS,KACpBA,EAAW,SAAWD,EACfC,CACT,EA6IAH,EAAA,UAAA,UAAA,SACEI,EACAC,EACAC,EAA8B,CAHhC,IAAAC,EAAA,KAKQC,EAAaC,GAAaL,CAAc,EAAIA,EAAiB,IAAIM,GAAeN,EAAgBC,EAAOC,CAAQ,EAErH,OAAAK,GAAa,UAAA,CACL,IAAAC,EAAuBL,EAArBL,EAAQU,EAAA,SAAEC,EAAMD,EAAA,OACxBJ,EAAW,IACTN,EAGIA,EAAS,KAAKM,EAAYK,CAAM,EAChCA,EAIAN,EAAK,WAAWC,CAAU,EAG1BD,EAAK,cAAcC,CAAU,CAAC,CAEtC,CAAC,EAEMA,CACT,EAGUR,EAAA,UAAA,cAAV,SAAwBc,EAAmB,CACzC,GAAI,CACF,OAAO,KAAK,WAAWA,CAAI,QACpBC,EAAK,CAIZD,EAAK,MAAMC,CAAG,EAElB,EA6DAf,EAAA,UAAA,QAAA,SAAQgB,EAA0BC,EAAoC,CAAtE,IAAAV,EAAA,KACE,OAAAU,EAAcC,GAAeD,CAAW,EAEjC,IAAIA,EAAkB,SAACE,EAASC,EAAM,CAC3C,IAAMZ,EAAa,IAAIE,GAAkB,CACvC,KAAM,SAACW,EAAK,CACV,GAAI,CACFL,EAAKK,CAAK,QACHN,EAAK,CACZK,EAAOL,CAAG,EACVP,EAAW,YAAW,EAE1B,EACA,MAAOY,EACP,SAAUD,EACX,EACDZ,EAAK,UAAUC,CAAU,CAC3B,CAAC,CACH,EAGUR,EAAA,UAAA,WAAV,SAAqBQ,EAA2B,OAC9C,OAAOI,EAAA,KAAK,UAAM,MAAAA,IAAA,OAAA,OAAAA,EAAE,UAAUJ,CAAU,CAC1C,EAOAR,EAAA,UAACG,EAAiB,EAAlB,UAAA,CACE,OAAO,IACT,EA4FAH,EAAA,UAAA,KAAA,UAAA,SAAKsB,EAAA,CAAA,EAAAC,EAAA,EAAAA,EAAA,UAAA,OAAAA,IAAAD,EAAAC,CAAA,EAAA,UAAAA,CAAA,EACH,OAAOC,GAAcF,CAAU,EAAE,IAAI,CACvC,EA6BAtB,EAAA,UAAA,UAAA,SAAUiB,EAAoC,CAA9C,IAAAV,EAAA,KACE,OAAAU,EAAcC,GAAeD,CAAW,EAEjC,IAAIA,EAAY,SAACE,EAASC,EAAM,CACrC,IAAIC,EACJd,EAAK,UACH,SAACkB,EAAI,CAAK,OAACJ,EAAQI,CAAT,EACV,SAACV,EAAQ,CAAK,OAAAK,EAAOL,CAAG,CAAV,EACd,UAAA,CAAM,OAAAI,EAAQE,CAAK,CAAb,CAAc,CAExB,CAAC,CACH,EA1aOrB,EAAA,OAAkC,SAAIC,EAAwD,CACnG,OAAO,IAAID,EAAcC,CAAS,CACpC,EAyaFD,GA9cA,EAudA,SAAS0B,GAAeC,EAA+C,OACrE,OAAOC,EAAAD,GAAeE,GAAO,WAAO,MAAAD,IAAA,OAAAA,EAAI,OAC1C,CAEA,SAASE,GAAcC,EAAU,CAC/B,OAAOA,GAASC,EAAWD,EAAM,IAAI,GAAKC,EAAWD,EAAM,KAAK,GAAKC,EAAWD,EAAM,QAAQ,CAChG,CAEA,SAASE,GAAgBF,EAAU,CACjC,OAAQA,GAASA,aAAiBG,IAAgBJ,GAAWC,CAAK,GAAKI,GAAeJ,CAAK,CAC7F,CCzeM,SAAUK,GAAQC,EAAW,CACjC,OAAOC,EAAWD,GAAQ,IAAI,CAChC,CAMM,SAAUE,EACdC,EAAqF,CAErF,OAAO,SAACH,EAAqB,CAC3B,GAAID,GAAQC,CAAM,EAChB,OAAOA,EAAO,KAAK,SAA+BI,EAA2B,CAC3E,GAAI,CACF,OAAOD,EAAKC,EAAc,IAAI,QACvBC,EAAK,CACZ,KAAK,MAAMA,CAAG,EAElB,CAAC,EAEH,MAAM,IAAI,UAAU,wCAAwC,CAC9D,CACF,CCjBM,SAAUC,GACdC,EACAC,EACAC,EACAC,EACAC,EAAuB,CAEvB,OAAO,IAAIC,GAAmBL,EAAaC,EAAQC,EAAYC,EAASC,CAAU,CACpF,CAMA,IAAAC,GAAA,SAAAC,EAAA,CAA2CC,EAAAF,EAAAC,CAAA,EAiBzC,SAAAD,EACEL,EACAC,EACAC,EACAC,EACQC,EACAI,EAAiC,CAN3C,IAAAC,EAoBEH,EAAA,KAAA,KAAMN,CAAW,GAAC,KAfV,OAAAS,EAAA,WAAAL,EACAK,EAAA,kBAAAD,EAeRC,EAAK,MAAQR,EACT,SAAuCS,EAAQ,CAC7C,GAAI,CACFT,EAAOS,CAAK,QACLC,EAAK,CACZX,EAAY,MAAMW,CAAG,EAEzB,EACAL,EAAA,UAAM,MACVG,EAAK,OAASN,EACV,SAAuCQ,EAAQ,CAC7C,GAAI,CACFR,EAAQQ,CAAG,QACJA,EAAK,CAEZX,EAAY,MAAMW,CAAG,UAGrB,KAAK,YAAW,EAEpB,EACAL,EAAA,UAAM,OACVG,EAAK,UAAYP,EACb,UAAA,CACE,GAAI,CACFA,EAAU,QACHS,EAAK,CAEZX,EAAY,MAAMW,CAAG,UAGrB,KAAK,YAAW,EAEpB,EACAL,EAAA,UAAM,WACZ,CAEA,OAAAD,EAAA,UAAA,YAAA,UAAA,OACE,GAAI,CAAC,KAAK,mBAAqB,KAAK,kBAAiB,EAAI,CAC/C,IAAAO,EAAW,KAAI,OACvBN,EAAA,UAAM,YAAW,KAAA,IAAA,EAEjB,CAACM,KAAUC,EAAA,KAAK,cAAU,MAAAA,IAAA,QAAAA,EAAA,KAAf,IAAI,GAEnB,EACFR,CAAA,EAnF2CS,EAAU,ECP9C,IAAMC,GAAuDC,GAClE,SAACC,EAAM,CACL,OAAA,UAAoC,CAClCA,EAAO,IAAI,EACX,KAAK,KAAO,0BACZ,KAAK,QAAU,qBACjB,CAJA,CAIC,ECXL,IAAAC,GAAA,SAAAC,EAAA,CAAgCC,EAAAF,EAAAC,CAAA,EAwB9B,SAAAD,GAAA,CAAA,IAAAG,EAEEF,EAAA,KAAA,IAAA,GAAO,KAzBT,OAAAE,EAAA,OAAS,GAEDA,EAAA,iBAAyC,KAGjDA,EAAA,UAA2B,CAAA,EAE3BA,EAAA,UAAY,GAEZA,EAAA,SAAW,GAEXA,EAAA,YAAmB,MAenB,CAGA,OAAAH,EAAA,UAAA,KAAA,SAAQI,EAAwB,CAC9B,IAAMC,EAAU,IAAIC,GAAiB,KAAM,IAAI,EAC/C,OAAAD,EAAQ,SAAWD,EACZC,CACT,EAGUL,EAAA,UAAA,eAAV,UAAA,CACE,GAAI,KAAK,OACP,MAAM,IAAIO,EAEd,EAEAP,EAAA,UAAA,KAAA,SAAKQ,EAAQ,CAAb,IAAAL,EAAA,KACEM,GAAa,UAAA,SAEX,GADAN,EAAK,eAAc,EACf,CAACA,EAAK,UAAW,CACdA,EAAK,mBACRA,EAAK,iBAAmB,MAAM,KAAKA,EAAK,SAAS,OAEnD,QAAuBO,EAAAC,GAAAR,EAAK,gBAAgB,EAAAS,EAAAF,EAAA,KAAA,EAAA,CAAAE,EAAA,KAAAA,EAAAF,EAAA,KAAA,EAAE,CAAzC,IAAMG,EAAQD,EAAA,MACjBC,EAAS,KAAKL,CAAK,qGAGzB,CAAC,CACH,EAEAR,EAAA,UAAA,MAAA,SAAMc,EAAQ,CAAd,IAAAX,EAAA,KACEM,GAAa,UAAA,CAEX,GADAN,EAAK,eAAc,EACf,CAACA,EAAK,UAAW,CACnBA,EAAK,SAAWA,EAAK,UAAY,GACjCA,EAAK,YAAcW,EAEnB,QADQC,EAAcZ,EAAI,UACnBY,EAAU,QACfA,EAAU,MAAK,EAAI,MAAMD,CAAG,EAGlC,CAAC,CACH,EAEAd,EAAA,UAAA,SAAA,UAAA,CAAA,IAAAG,EAAA,KACEM,GAAa,UAAA,CAEX,GADAN,EAAK,eAAc,EACf,CAACA,EAAK,UAAW,CACnBA,EAAK,UAAY,GAEjB,QADQY,EAAcZ,EAAI,UACnBY,EAAU,QACfA,EAAU,MAAK,EAAI,SAAQ,EAGjC,CAAC,CACH,EAEAf,EAAA,UAAA,YAAA,UAAA,CACE,KAAK,UAAY,KAAK,OAAS,GAC/B,KAAK,UAAY,KAAK,iBAAmB,IAC3C,EAEA,OAAA,eAAIA,EAAA,UAAA,WAAQ,KAAZ,UAAA,OACE,QAAOgB,EAAA,KAAK,aAAS,MAAAA,IAAA,OAAA,OAAAA,EAAE,QAAS,CAClC,kCAGUhB,EAAA,UAAA,cAAV,SAAwBiB,EAAyB,CAC/C,YAAK,eAAc,EACZhB,EAAA,UAAM,cAAa,KAAA,KAACgB,CAAU,CACvC,EAGUjB,EAAA,UAAA,WAAV,SAAqBiB,EAAyB,CAC5C,YAAK,eAAc,EACnB,KAAK,wBAAwBA,CAAU,EAChC,KAAK,gBAAgBA,CAAU,CACxC,EAGUjB,EAAA,UAAA,gBAAV,SAA0BiB,EAA2B,CAArD,IAAAd,EAAA,KACQa,EAAqC,KAAnCE,EAAQF,EAAA,SAAEG,EAASH,EAAA,UAAED,EAASC,EAAA,UACtC,OAAIE,GAAYC,EACPC,IAET,KAAK,iBAAmB,KACxBL,EAAU,KAAKE,CAAU,EAClB,IAAII,GAAa,UAAA,CACtBlB,EAAK,iBAAmB,KACxBmB,GAAUP,EAAWE,CAAU,CACjC,CAAC,EACH,EAGUjB,EAAA,UAAA,wBAAV,SAAkCiB,EAA2B,CACrD,IAAAD,EAAuC,KAArCE,EAAQF,EAAA,SAAEO,EAAWP,EAAA,YAAEG,EAASH,EAAA,UACpCE,EACFD,EAAW,MAAMM,CAAW,EACnBJ,GACTF,EAAW,SAAQ,CAEvB,EAQAjB,EAAA,UAAA,aAAA,UAAA,CACE,IAAMwB,EAAkB,IAAIC,EAC5B,OAAAD,EAAW,OAAS,KACbA,CACT,EAxHOxB,EAAA,OAAkC,SAAI0B,EAA0BC,EAAqB,CAC1F,OAAO,IAAIrB,GAAoBoB,EAAaC,CAAM,CACpD,EAuHF3B,GA7IgCyB,CAAU,EAkJ1C,IAAAG,GAAA,SAAAC,EAAA,CAAyCC,EAAAF,EAAAC,CAAA,EACvC,SAAAD,EAESG,EACPC,EAAsB,CAHxB,IAAAC,EAKEJ,EAAA,KAAA,IAAA,GAAO,KAHA,OAAAI,EAAA,YAAAF,EAIPE,EAAK,OAASD,GAChB,CAEA,OAAAJ,EAAA,UAAA,KAAA,SAAKM,EAAQ,UACXC,GAAAC,EAAA,KAAK,eAAW,MAAAA,IAAA,OAAA,OAAAA,EAAE,QAAI,MAAAD,IAAA,QAAAA,EAAA,KAAAC,EAAGF,CAAK,CAChC,EAEAN,EAAA,UAAA,MAAA,SAAMS,EAAQ,UACZF,GAAAC,EAAA,KAAK,eAAW,MAAAA,IAAA,OAAA,OAAAA,EAAE,SAAK,MAAAD,IAAA,QAAAA,EAAA,KAAAC,EAAGC,CAAG,CAC/B,EAEAT,EAAA,UAAA,SAAA,UAAA,UACEO,GAAAC,EAAA,KAAK,eAAW,MAAAA,IAAA,OAAA,OAAAA,EAAE,YAAQ,MAAAD,IAAA,QAAAA,EAAA,KAAAC,CAAA,CAC5B,EAGUR,EAAA,UAAA,WAAV,SAAqBU,EAAyB,SAC5C,OAAOH,GAAAC,EAAA,KAAK,UAAM,MAAAA,IAAA,OAAA,OAAAA,EAAE,UAAUE,CAAU,KAAC,MAAAH,IAAA,OAAAA,EAAII,EAC/C,EACFX,CAAA,EA1ByCY,EAAO,EC5JzC,IAAMC,GAA+C,CAC1D,IAAG,UAAA,CAGD,OAAQA,GAAsB,UAAY,MAAM,IAAG,CACrD,EACA,SAAU,QCMZ,IAAAC,GAAA,SAAAC,EAAA,CAA+BC,EAAAF,EAAAC,CAAA,EAC7B,SAAAD,EAAYG,EAAsBC,EAAmD,QACnFH,EAAA,KAAA,IAAA,GAAO,IACT,CAWO,OAAAD,EAAA,UAAA,SAAP,SAAgBK,EAAWC,EAAiB,CAAjB,OAAAA,IAAA,SAAAA,EAAA,GAClB,IACT,EACFN,CAAA,EAjB+BO,EAAY,ECHpC,IAAMC,GAAqC,CAGhD,YAAA,SAAYC,EAAqBC,EAAgB,SAAEC,EAAA,CAAA,EAAAC,EAAA,EAAAA,EAAA,UAAA,OAAAA,IAAAD,EAAAC,EAAA,CAAA,EAAA,UAAAA,CAAA,EACzC,IAAAC,EAAaL,GAAgB,SACrC,OAAIK,GAAU,YACLA,EAAS,YAAW,MAApBA,EAAQC,GAAA,CAAaL,EAASC,CAAO,EAAAK,GAAKJ,CAAI,CAAA,CAAA,EAEhD,YAAW,MAAA,OAAAG,GAAA,CAACL,EAASC,CAAO,EAAAK,GAAKJ,CAAI,CAAA,CAAA,CAC9C,EACA,cAAA,SAAcK,EAAM,CACV,IAAAH,EAAaL,GAAgB,SACrC,OAAQK,GAAU,eAAiB,eAAeG,CAAa,CACjE,EACA,SAAU,QCrBZ,IAAAC,GAAA,SAAAC,EAAA,CAAoCC,EAAAF,EAAAC,CAAA,EAOlC,SAAAD,EAAsBG,EAAqCC,EAAmD,CAA9G,IAAAC,EACEJ,EAAA,KAAA,KAAME,EAAWC,CAAI,GAAC,KADF,OAAAC,EAAA,UAAAF,EAAqCE,EAAA,KAAAD,EAFjDC,EAAA,QAAmB,IAI7B,CAEO,OAAAL,EAAA,UAAA,SAAP,SAAgBM,EAAWC,EAAiB,OAC1C,GADyBA,IAAA,SAAAA,EAAA,GACrB,KAAK,OACP,OAAO,KAIT,KAAK,MAAQD,EAEb,IAAME,EAAK,KAAK,GACVL,EAAY,KAAK,UAuBvB,OAAIK,GAAM,OACR,KAAK,GAAK,KAAK,eAAeL,EAAWK,EAAID,CAAK,GAKpD,KAAK,QAAU,GAEf,KAAK,MAAQA,EAEb,KAAK,IAAKE,EAAA,KAAK,MAAE,MAAAA,IAAA,OAAAA,EAAI,KAAK,eAAeN,EAAW,KAAK,GAAII,CAAK,EAE3D,IACT,EAEUP,EAAA,UAAA,eAAV,SAAyBG,EAA2BO,EAAmBH,EAAiB,CAAjB,OAAAA,IAAA,SAAAA,EAAA,GAC9DI,GAAiB,YAAYR,EAAU,MAAM,KAAKA,EAAW,IAAI,EAAGI,CAAK,CAClF,EAEUP,EAAA,UAAA,eAAV,SAAyBY,EAA4BJ,EAAkBD,EAAwB,CAE7F,GAFqEA,IAAA,SAAAA,EAAA,GAEjEA,GAAS,MAAQ,KAAK,QAAUA,GAAS,KAAK,UAAY,GAC5D,OAAOC,EAILA,GAAM,MACRG,GAAiB,cAAcH,CAAE,CAIrC,EAMOR,EAAA,UAAA,QAAP,SAAeM,EAAUC,EAAa,CACpC,GAAI,KAAK,OACP,OAAO,IAAI,MAAM,8BAA8B,EAGjD,KAAK,QAAU,GACf,IAAMM,EAAQ,KAAK,SAASP,EAAOC,CAAK,EACxC,GAAIM,EACF,OAAOA,EACE,KAAK,UAAY,IAAS,KAAK,IAAM,OAc9C,KAAK,GAAK,KAAK,eAAe,KAAK,UAAW,KAAK,GAAI,IAAI,EAE/D,EAEUb,EAAA,UAAA,SAAV,SAAmBM,EAAUQ,EAAc,CACzC,IAAIC,EAAmB,GACnBC,EACJ,GAAI,CACF,KAAK,KAAKV,CAAK,QACRW,EAAG,CACVF,EAAU,GAIVC,EAAaC,GAAQ,IAAI,MAAM,oCAAoC,EAErE,GAAIF,EACF,YAAK,YAAW,EACTC,CAEX,EAEAhB,EAAA,UAAA,YAAA,UAAA,CACE,GAAI,CAAC,KAAK,OAAQ,CACV,IAAAS,EAAoB,KAAlBD,EAAEC,EAAA,GAAEN,EAASM,EAAA,UACbS,EAAYf,EAAS,QAE7B,KAAK,KAAO,KAAK,MAAQ,KAAK,UAAY,KAC1C,KAAK,QAAU,GAEfgB,GAAUD,EAAS,IAAI,EACnBV,GAAM,OACR,KAAK,GAAK,KAAK,eAAeL,EAAWK,EAAI,IAAI,GAGnD,KAAK,MAAQ,KACbP,EAAA,UAAM,YAAW,KAAA,IAAA,EAErB,EACFD,CAAA,EA9IoCoB,EAAM,ECgB1C,IAAAC,GAAA,UAAA,CAGE,SAAAA,EAAoBC,EAAoCC,EAAiC,CAAjCA,IAAA,SAAAA,EAAoBF,EAAU,KAAlE,KAAA,oBAAAC,EAClB,KAAK,IAAMC,CACb,CA6BO,OAAAF,EAAA,UAAA,SAAP,SAAmBG,EAAqDC,EAAmBC,EAAS,CAA5B,OAAAD,IAAA,SAAAA,EAAA,GAC/D,IAAI,KAAK,oBAAuB,KAAMD,CAAI,EAAE,SAASE,EAAOD,CAAK,CAC1E,EAnCcJ,EAAA,IAAoBM,GAAsB,IAoC1DN,GArCA,ECnBA,IAAAO,GAAA,SAAAC,EAAA,CAAoCC,EAAAF,EAAAC,CAAA,EAkBlC,SAAAD,EAAYG,EAAgCC,EAAiC,CAAjCA,IAAA,SAAAA,EAAoBC,GAAU,KAA1E,IAAAC,EACEL,EAAA,KAAA,KAAME,EAAiBC,CAAG,GAAC,KAlBtB,OAAAE,EAAA,QAAmC,CAAA,EAOnCA,EAAA,QAAmB,IAY1B,CAEO,OAAAN,EAAA,UAAA,MAAP,SAAaO,EAAwB,CAC3B,IAAAC,EAAY,KAAI,QAExB,GAAI,KAAK,QAAS,CAChBA,EAAQ,KAAKD,CAAM,EACnB,OAGF,IAAIE,EACJ,KAAK,QAAU,GAEf,EACE,IAAKA,EAAQF,EAAO,QAAQA,EAAO,MAAOA,EAAO,KAAK,EACpD,YAEMA,EAASC,EAAQ,MAAK,GAIhC,GAFA,KAAK,QAAU,GAEXC,EAAO,CACT,KAAQF,EAASC,EAAQ,MAAK,GAC5BD,EAAO,YAAW,EAEpB,MAAME,EAEV,EACFT,CAAA,EAhDoCK,EAAS,ECC7C,IAAAK,GAAA,SAAAC,EAAA,CAAoCC,EAAAF,EAAAC,CAAA,EAClC,SAAAD,EAAsBG,EAAqCC,EAAmD,CAA9G,IAAAC,EACEJ,EAAA,KAAA,KAAME,EAAWC,CAAI,GAAC,KADF,OAAAC,EAAA,UAAAF,EAAqCE,EAAA,KAAAD,GAE3D,CAEO,OAAAJ,EAAA,UAAA,SAAP,SAAgBM,EAAWC,EAAiB,CAC1C,OADyBA,IAAA,SAAAA,EAAA,GACrBA,EAAQ,EACHN,EAAA,UAAM,SAAQ,KAAA,KAACK,EAAOC,CAAK,GAEpC,KAAK,MAAQA,EACb,KAAK,MAAQD,EACb,KAAK,UAAU,MAAM,IAAI,EAClB,KACT,EAEON,EAAA,UAAA,QAAP,SAAeM,EAAUC,EAAa,CACpC,OAAOA,EAAQ,GAAK,KAAK,OAASN,EAAA,UAAM,QAAO,KAAA,KAACK,EAAOC,CAAK,EAAI,KAAK,SAASD,EAAOC,CAAK,CAC5F,EAEUP,EAAA,UAAA,eAAV,SAAyBG,EAA2BK,EAAkBD,EAAiB,CAKrF,OALoEA,IAAA,SAAAA,EAAA,GAK/DA,GAAS,MAAQA,EAAQ,GAAOA,GAAS,MAAQ,KAAK,MAAQ,EAC1DN,EAAA,UAAM,eAAc,KAAA,KAACE,EAAWK,EAAID,CAAK,GAIlDJ,EAAU,MAAM,IAAI,EAMb,EACT,EACFH,CAAA,EArCoCS,EAAW,ECJ/C,IAAAC,GAAA,SAAAC,EAAA,CAAoCC,EAAAF,EAAAC,CAAA,EAApC,SAAAD,GAAA,+CACA,CAAA,OAAAA,CAAA,EADoCG,EAAc,ECgE3C,IAAMC,GAAiB,IAAIC,GAAeC,EAAW,ECDrD,IAAMC,GAAQ,IAAIC,EAAkB,SAACC,EAAU,CAAK,OAAAA,EAAW,SAAQ,CAAnB,CAAqB,EC9D1E,SAAUC,GAAYC,EAAU,CACpC,OAAOA,GAASC,EAAWD,EAAM,QAAQ,CAC3C,CCDA,SAASE,GAAQC,EAAQ,CACvB,OAAOA,EAAIA,EAAI,OAAS,CAAC,CAC3B,CAMM,SAAUC,GAAaC,EAAW,CACtC,OAAOC,GAAYC,GAAKF,CAAI,CAAC,EAAIA,EAAK,IAAG,EAAK,MAChD,CAEM,SAAUG,GAAUH,EAAaI,EAAoB,CACzD,OAAO,OAAOF,GAAKF,CAAI,GAAM,SAAWA,EAAK,IAAG,EAAMI,CACxD,CClBO,IAAMC,GAAe,SAAIC,EAAM,CAAwB,OAAAA,GAAK,OAAOA,EAAE,QAAW,UAAY,OAAOA,GAAM,UAAlD,ECMxD,SAAUC,GAAUC,EAAU,CAClC,OAAOC,EAAWD,GAAO,IAAI,CAC/B,CCHM,SAAUE,GAAoBC,EAAU,CAC5C,OAAOC,EAAWD,EAAME,EAAiB,CAAC,CAC5C,CCLM,SAAUC,GAAmBC,EAAQ,CACzC,OAAO,OAAO,eAAiBC,EAAWD,IAAM,OAAO,aAAa,CAAC,CACvE,CCAM,SAAUE,GAAiCC,EAAU,CAEzD,OAAO,IAAI,UACT,iBACEA,IAAU,MAAQ,OAAOA,GAAU,SAAW,oBAAsB,IAAIA,EAAK,KAAG,0HACwC,CAE9H,CCXM,SAAUC,IAAiB,CAC/B,OAAI,OAAO,QAAW,YAAc,CAAC,OAAO,SACnC,aAGF,OAAO,QAChB,CAEO,IAAMC,GAAWD,GAAiB,ECJnC,SAAUE,GAAWC,EAAU,CACnC,OAAOC,EAAWD,IAAQE,EAAe,CAAC,CAC5C,CCHM,SAAiBC,GAAsCC,EAAqC,mGAC1FC,EAASD,EAAe,UAAS,2DAGX,MAAA,CAAA,EAAAE,GAAMD,EAAO,KAAI,CAAE,CAAA,gBAArCE,EAAkBC,EAAA,KAAA,EAAhBC,EAAKF,EAAA,MAAEG,EAAIH,EAAA,KACfG,iBAAA,CAAA,EAAA,CAAA,SACF,MAAA,CAAA,EAAAF,EAAA,KAAA,CAAA,qBAEIC,CAAM,CAAA,SAAZ,MAAA,CAAA,EAAAD,EAAA,KAAA,CAAA,SAAA,OAAAA,EAAA,KAAA,mCAGF,OAAAH,EAAO,YAAW,6BAIhB,SAAUM,GAAwBC,EAAQ,CAG9C,OAAOC,EAAWD,GAAK,SAAS,CAClC,CCPM,SAAUE,EAAaC,EAAyB,CACpD,GAAIA,aAAiBC,EACnB,OAAOD,EAET,GAAIA,GAAS,KAAM,CACjB,GAAIE,GAAoBF,CAAK,EAC3B,OAAOG,GAAsBH,CAAK,EAEpC,GAAII,GAAYJ,CAAK,EACnB,OAAOK,GAAcL,CAAK,EAE5B,GAAIM,GAAUN,CAAK,EACjB,OAAOO,GAAYP,CAAK,EAE1B,GAAIQ,GAAgBR,CAAK,EACvB,OAAOS,GAAkBT,CAAK,EAEhC,GAAIU,GAAWV,CAAK,EAClB,OAAOW,GAAaX,CAAK,EAE3B,GAAIY,GAAqBZ,CAAK,EAC5B,OAAOa,GAAuBb,CAAK,EAIvC,MAAMc,GAAiCd,CAAK,CAC9C,CAMM,SAAUG,GAAyBY,EAAQ,CAC/C,OAAO,IAAId,EAAW,SAACe,EAAyB,CAC9C,IAAMC,EAAMF,EAAIG,EAAiB,EAAC,EAClC,GAAIC,EAAWF,EAAI,SAAS,EAC1B,OAAOA,EAAI,UAAUD,CAAU,EAGjC,MAAM,IAAI,UAAU,gEAAgE,CACtF,CAAC,CACH,CASM,SAAUX,GAAiBe,EAAmB,CAClD,OAAO,IAAInB,EAAW,SAACe,EAAyB,CAU9C,QAASK,EAAI,EAAGA,EAAID,EAAM,QAAU,CAACJ,EAAW,OAAQK,IACtDL,EAAW,KAAKI,EAAMC,CAAC,CAAC,EAE1BL,EAAW,SAAQ,CACrB,CAAC,CACH,CAEM,SAAUT,GAAee,EAAuB,CACpD,OAAO,IAAIrB,EAAW,SAACe,EAAyB,CAC9CM,EACG,KACC,SAACC,EAAK,CACCP,EAAW,SACdA,EAAW,KAAKO,CAAK,EACrBP,EAAW,SAAQ,EAEvB,EACA,SAACQ,EAAQ,CAAK,OAAAR,EAAW,MAAMQ,CAAG,CAApB,CAAqB,EAEpC,KAAK,KAAMC,EAAoB,CACpC,CAAC,CACH,CAEM,SAAUd,GAAgBe,EAAqB,CACnD,OAAO,IAAIzB,EAAW,SAACe,EAAyB,aAC9C,QAAoBW,EAAAC,GAAAF,CAAQ,EAAAG,EAAAF,EAAA,KAAA,EAAA,CAAAE,EAAA,KAAAA,EAAAF,EAAA,KAAA,EAAE,CAAzB,IAAMJ,EAAKM,EAAA,MAEd,GADAb,EAAW,KAAKO,CAAK,EACjBP,EAAW,OACb,yGAGJA,EAAW,SAAQ,CACrB,CAAC,CACH,CAEM,SAAUP,GAAqBqB,EAA+B,CAClE,OAAO,IAAI7B,EAAW,SAACe,EAAyB,CAC9Ce,GAAQD,EAAed,CAAU,EAAE,MAAM,SAACQ,EAAG,CAAK,OAAAR,EAAW,MAAMQ,CAAG,CAApB,CAAqB,CACzE,CAAC,CACH,CAEM,SAAUX,GAA0BmB,EAAqC,CAC7E,OAAOvB,GAAkBwB,GAAmCD,CAAc,CAAC,CAC7E,CAEA,SAAeD,GAAWD,EAAiCd,EAAyB,uIACxDkB,EAAAC,GAAAL,CAAa,gFAIrC,GAJeP,EAAKa,EAAA,MACpBpB,EAAW,KAAKO,CAAK,EAGjBP,EAAW,OACb,MAAA,CAAA,CAAA,6RAGJ,OAAAA,EAAW,SAAQ,WChHf,SAAUqB,EACdC,EACAC,EACAC,EACAC,EACAC,EAAc,CADdD,IAAA,SAAAA,EAAA,GACAC,IAAA,SAAAA,EAAA,IAEA,IAAMC,EAAuBJ,EAAU,SAAS,UAAA,CAC9CC,EAAI,EACAE,EACFJ,EAAmB,IAAI,KAAK,SAAS,KAAMG,CAAK,CAAC,EAEjD,KAAK,YAAW,CAEpB,EAAGA,CAAK,EAIR,GAFAH,EAAmB,IAAIK,CAAoB,EAEvC,CAACD,EAKH,OAAOC,CAEX,CCeM,SAAUC,GAAaC,EAA0BC,EAAS,CAAT,OAAAA,IAAA,SAAAA,EAAA,GAC9CC,EAAQ,SAACC,EAAQC,EAAU,CAChCD,EAAO,UACLE,GACED,EACA,SAACE,EAAK,CAAK,OAAAC,EAAgBH,EAAYJ,EAAW,UAAA,CAAM,OAAAI,EAAW,KAAKE,CAAK,CAArB,EAAwBL,CAAK,CAA1E,EACX,UAAA,CAAM,OAAAM,EAAgBH,EAAYJ,EAAW,UAAA,CAAM,OAAAI,EAAW,SAAQ,CAAnB,EAAuBH,CAAK,CAAzE,EACN,SAACO,EAAG,CAAK,OAAAD,EAAgBH,EAAYJ,EAAW,UAAA,CAAM,OAAAI,EAAW,MAAMI,CAAG,CAApB,EAAuBP,CAAK,CAAzE,CAA0E,CACpF,CAEL,CAAC,CACH,CCPM,SAAUQ,GAAeC,EAA0BC,EAAiB,CAAjB,OAAAA,IAAA,SAAAA,EAAA,GAChDC,EAAQ,SAACC,EAAQC,EAAU,CAChCA,EAAW,IAAIJ,EAAU,SAAS,UAAA,CAAM,OAAAG,EAAO,UAAUC,CAAU,CAA3B,EAA8BH,CAAK,CAAC,CAC9E,CAAC,CACH,CC7DM,SAAUI,GAAsBC,EAA6BC,EAAwB,CACzF,OAAOC,EAAUF,CAAK,EAAE,KAAKG,GAAYF,CAAS,EAAGG,GAAUH,CAAS,CAAC,CAC3E,CCFM,SAAUI,GAAmBC,EAAuBC,EAAwB,CAChF,OAAOC,EAAUF,CAAK,EAAE,KAAKG,GAAYF,CAAS,EAAGG,GAAUH,CAAS,CAAC,CAC3E,CCJM,SAAUI,GAAiBC,EAAqBC,EAAwB,CAC5E,OAAO,IAAIC,EAAc,SAACC,EAAU,CAElC,IAAIC,EAAI,EAER,OAAOH,EAAU,SAAS,UAAA,CACpBG,IAAMJ,EAAM,OAGdG,EAAW,SAAQ,GAInBA,EAAW,KAAKH,EAAMI,GAAG,CAAC,EAIrBD,EAAW,QACd,KAAK,SAAQ,EAGnB,CAAC,CACH,CAAC,CACH,CCfM,SAAUE,GAAoBC,EAAoBC,EAAwB,CAC9E,OAAO,IAAIC,EAAc,SAACC,EAAU,CAClC,IAAIC,EAKJ,OAAAC,EAAgBF,EAAYF,EAAW,UAAA,CAErCG,EAAYJ,EAAcI,EAAe,EAAC,EAE1CC,EACEF,EACAF,EACA,UAAA,OACMK,EACAC,EACJ,GAAI,CAEDC,EAAkBJ,EAAS,KAAI,EAA7BE,EAAKE,EAAA,MAAED,EAAIC,EAAA,WACPC,EAAK,CAEZN,EAAW,MAAMM,CAAG,EACpB,OAGEF,EAKFJ,EAAW,SAAQ,EAGnBA,EAAW,KAAKG,CAAK,CAEzB,EACA,EACA,EAAI,CAER,CAAC,EAMM,UAAA,CAAM,OAAAI,EAAWN,GAAU,MAAM,GAAKA,EAAS,OAAM,CAA/C,CACf,CAAC,CACH,CCvDM,SAAUO,GAAyBC,EAAyBC,EAAwB,CACxF,GAAI,CAACD,EACH,MAAM,IAAI,MAAM,yBAAyB,EAE3C,OAAO,IAAIE,EAAc,SAACC,EAAU,CAClCC,EAAgBD,EAAYF,EAAW,UAAA,CACrC,IAAMI,EAAWL,EAAM,OAAO,aAAa,EAAC,EAC5CI,EACED,EACAF,EACA,UAAA,CACEI,EAAS,KAAI,EAAG,KAAK,SAACC,EAAM,CACtBA,EAAO,KAGTH,EAAW,SAAQ,EAEnBA,EAAW,KAAKG,EAAO,KAAK,CAEhC,CAAC,CACH,EACA,EACA,EAAI,CAER,CAAC,CACH,CAAC,CACH,CCzBM,SAAUC,GAA8BC,EAA8BC,EAAwB,CAClG,OAAOC,GAAsBC,GAAmCH,CAAK,EAAGC,CAAS,CACnF,CCoBM,SAAUG,GAAaC,EAA2BC,EAAwB,CAC9E,GAAID,GAAS,KAAM,CACjB,GAAIE,GAAoBF,CAAK,EAC3B,OAAOG,GAAmBH,EAAOC,CAAS,EAE5C,GAAIG,GAAYJ,CAAK,EACnB,OAAOK,GAAcL,EAAOC,CAAS,EAEvC,GAAIK,GAAUN,CAAK,EACjB,OAAOO,GAAgBP,EAAOC,CAAS,EAEzC,GAAIO,GAAgBR,CAAK,EACvB,OAAOS,GAAsBT,EAAOC,CAAS,EAE/C,GAAIS,GAAWV,CAAK,EAClB,OAAOW,GAAiBX,EAAOC,CAAS,EAE1C,GAAIW,GAAqBZ,CAAK,EAC5B,OAAOa,GAA2Bb,EAAOC,CAAS,EAGtD,MAAMa,GAAiCd,CAAK,CAC9C,CCoDM,SAAUe,GAAQC,EAA2BC,EAAyB,CAC1E,OAAOA,EAAYC,GAAUF,EAAOC,CAAS,EAAIE,EAAUH,CAAK,CAClE,CCxBM,SAAUI,IAAE,SAAIC,EAAA,CAAA,EAAAC,EAAA,EAAAA,EAAA,UAAA,OAAAA,IAAAD,EAAAC,CAAA,EAAA,UAAAA,CAAA,EACpB,IAAMC,EAAYC,GAAaH,CAAI,EACnC,OAAOI,GAAKJ,EAAaE,CAAS,CACpC,CCnCM,SAAUG,GAAUC,EAAyCC,EAAa,CAC9E,OAAOC,EAAQ,SAACC,EAAQC,EAAU,CAEhC,IAAIC,EAAQ,EAGZF,EAAO,UACLG,GAAyBF,EAAY,SAACG,EAAQ,CAG5CH,EAAW,KAAKJ,EAAQ,KAAKC,EAASM,EAAOF,GAAO,CAAC,CACvD,CAAC,CAAC,CAEN,CAAC,CACH,CCzCM,SAAUG,GACdC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAAgC,CAGhC,IAAMC,EAAc,CAAA,EAEhBC,EAAS,EAETC,EAAQ,EAERC,EAAa,GAKXC,EAAgB,UAAA,CAIhBD,GAAc,CAACH,EAAO,QAAU,CAACC,GACnCR,EAAW,SAAQ,CAEvB,EAGMY,EAAY,SAACC,EAAQ,CAAK,OAACL,EAASN,EAAaY,EAAWD,CAAK,EAAIN,EAAO,KAAKM,CAAK,CAA5D,EAE1BC,EAAa,SAACD,EAAQ,CAI1BT,GAAUJ,EAAW,KAAKa,CAAY,EAItCL,IAKA,IAAIO,EAAgB,GAGpBC,EAAUf,EAAQY,EAAOJ,GAAO,CAAC,EAAE,UACjCQ,GACEjB,EACA,SAACkB,EAAU,CAGTf,IAAee,CAAU,EAErBd,EAGFQ,EAAUM,CAAiB,EAG3BlB,EAAW,KAAKkB,CAAU,CAE9B,EACA,UAAA,CAGEH,EAAgB,EAClB,EAEA,OACA,UAAA,CAIE,GAAIA,EAKF,GAAI,CAIFP,IAKA,qBACE,IAAMW,EAAgBZ,EAAO,MAAK,EAI9BF,EACFe,EAAgBpB,EAAYK,EAAmB,UAAA,CAAM,OAAAS,EAAWK,CAAa,CAAxB,CAAyB,EAE9EL,EAAWK,CAAa,GARrBZ,EAAO,QAAUC,EAASN,OAYjCS,EAAa,QACNU,EAAK,CACZrB,EAAW,MAAMqB,CAAG,EAG1B,CAAC,CACF,CAEL,EAGA,OAAAtB,EAAO,UACLkB,GAAyBjB,EAAYY,EAAW,UAAA,CAE9CF,EAAa,GACbC,EAAa,CACf,CAAC,CAAC,EAKG,UAAA,CACLL,IAAmB,CACrB,CACF,CClEM,SAAUgB,EACdC,EACAC,EACAC,EAA6B,CAE7B,OAFAA,IAAA,SAAAA,EAAA,KAEIC,EAAWF,CAAc,EAEpBF,EAAS,SAACK,EAAGC,EAAC,CAAK,OAAAC,GAAI,SAACC,EAAQC,EAAU,CAAK,OAAAP,EAAeG,EAAGG,EAAGF,EAAGG,CAAE,CAA1B,CAA2B,EAAEC,EAAUT,EAAQI,EAAGC,CAAC,CAAC,CAAC,CAAjF,EAAoFH,CAAU,GAC/G,OAAOD,GAAmB,WACnCC,EAAaD,GAGRS,EAAQ,SAACC,EAAQC,EAAU,CAAK,OAAAC,GAAeF,EAAQC,EAAYZ,EAASE,CAAU,CAAtD,CAAuD,EAChG,CChCM,SAAUY,GAAyCC,EAA6B,CAA7B,OAAAA,IAAA,SAAAA,EAAA,KAChDC,EAASC,GAAUF,CAAU,CACtC,CCwBM,SAAUG,IAAK,SAACC,EAAA,CAAA,EAAAC,EAAA,EAAAA,EAAA,UAAA,OAAAA,IAAAD,EAAAC,CAAA,EAAA,UAAAA,CAAA,EACpB,IAAMC,EAAYC,GAAaH,CAAI,EAC7BI,EAAaC,GAAUL,EAAM,GAAQ,EACrCM,EAAUN,EAChB,OAAQM,EAAQ,OAGZA,EAAQ,SAAW,EAEnBC,EAAUD,EAAQ,CAAC,CAAC,EAEpBE,GAASJ,CAAU,EAAEK,GAAKH,EAASJ,CAAS,CAAC,EAL7CQ,EAMN,CCzCM,SAAUC,GAAUC,EAAiDC,EAAa,CACtF,OAAOC,EAAQ,SAACC,EAAQC,EAAU,CAEhC,IAAIC,EAAQ,EAIZF,EAAO,UAILG,GAAyBF,EAAY,SAACG,EAAK,CAAK,OAAAP,EAAU,KAAKC,EAASM,EAAOF,GAAO,GAAKD,EAAW,KAAKG,CAAK,CAAhE,CAAiE,CAAC,CAEtH,CAAC,CACH,CCgCM,SAAUC,GACdC,EAAgD,CAEhD,OAAOC,EAAQ,SAACC,EAAQC,EAAU,CAChC,IAAIC,EAAgC,KAChCC,EAAY,GACZC,EAEJF,EAAWF,EAAO,UAChBK,GAAyBJ,EAAY,OAAW,OAAW,SAACK,EAAG,CAC7DF,EAAgBG,EAAUT,EAASQ,EAAKT,GAAWC,CAAQ,EAAEE,CAAM,CAAC,CAAC,EACjEE,GACFA,EAAS,YAAW,EACpBA,EAAW,KACXE,EAAc,UAAUH,CAAU,GAIlCE,EAAY,EAEhB,CAAC,CAAC,EAGAA,IAMFD,EAAS,YAAW,EACpBA,EAAW,KACXE,EAAe,UAAUH,CAAU,EAEvC,CAAC,CACH,CC1IO,IAAMO,GAAN,cAAiCC,CAAc,CACpD,MACQ,WAAa,IAAIC,GAEzB,YAAYC,EAAuBC,EAAiB,CAClD,MAAOC,GAAe,CACpB,IAAMC,EAAe,KAAK,WAAW,UAAUD,CAAU,EACzD,OAAIC,GAAgB,CAACA,EAAa,QAChCD,EAAW,KAAK,KAAK,KAAK,EAErBC,CACT,CAAC,EAED,KAAK,MAAQF,EACbD,EAAO,UAAWI,GAAU,CAKtBA,IAAU,KAAK,QACjB,KAAK,MAAQA,EACb,KAAK,WAAW,KAAKA,CAAK,EAE9B,CAAC,CACH,CACF,ECrBO,SAASC,MAMXC,EACuC,CAC1C,IAAMC,EAAmD,IAAIC,IAC3DC,GACE,GAAGH,EAAM,IAAKI,GAAS,CACrB,IAAMC,EAAUD,EAAK,GAAGF,CAAI,EAC5B,GAAI,CAACG,EACH,MAAM,IAAI,UACR,4CACED,EAAK,MAAQ,aACf,iFACF,EAEF,OAAOC,CACT,CAAC,CACH,EAKF,GAAI,CACF,OAAO,eAAeJ,EAAQ,OAAQ,CACpC,MAAO,gBAAgBD,EACpB,IAAKI,GAASA,EAAK,MAAQ,aAAa,EACxC,KAAK,IAAI,CAAC,GACf,CAAC,CACH,MAAY,CAEZ,CAEA,OAAOH,CACT,CEtCA,IAAMK,GACJ,OAAO,SAAY,UAAY,OAAO,QAAQ,MAAS,WACnD,QAAQ,KAAK,KAAK,OAAO,EACzB,IAAM,CAAC,EDaN,SAASC,GAMdC,EAAiC,CAAC,EACkB,CAKpD,IAAMC,EAAsBC,GAAe,YAErCC,EAA8C,IAAIF,EAErDC,GAAuB,mBAC1B,EAQME,EAAQ,IAAIC,GACdC,EAEEC,EACJC,GACG,CAOHF,EAAQE,EACR,IAAMC,EAAiB,IAAIJ,GACrBK,EAAgB,IAAIL,GACpBM,EAAUF,EACb,aAAa,EACb,KAAKG,GAAUT,CAAoB,CAAC,EACjCU,EAAS,IAAIC,GACjBJ,EAAc,KAAKE,GAAUT,CAAoB,CAAC,EAClDG,EAAM,SAAS,CACjB,EAwBA,OAtBgBF,EAAM,KACpBW,GAAKC,GAAS,CACZ,IAAMC,EAAUD,EAAKL,EAASE,EAAQb,EAAQ,YAAa,EAE3D,GAAI,CAACiB,EACH,MAAM,IAAI,UACR,mBACED,EAAK,MAAQ,aACf,iFACF,EAGF,OAAOC,CACT,CAAC,EACDC,EAAUD,GACRE,GAAKF,CAAO,EAAE,KACZG,GAAYjB,CAAoB,EAChCS,GAAUT,CAAoB,CAChC,CACF,CACF,EAEQ,UAAUG,EAAM,QAAQ,EAExBe,GACEC,GAAW,CAIjB,IAAMC,EAASF,EAAKC,CAAM,EAI1B,OAAAZ,EAAc,KAAKJ,EAAM,SAAS,CAAC,EACnCG,EAAe,KAAKa,CAAe,EAE5BC,CACT,CAEJ,EAEA,OAAAhB,EAAe,IAAOiB,GAAa,CAMjCpB,EAAM,KAAKoB,CAAQ,CACrB,EAEOjB,CACT,CGpHO,IAAMkB,GAAoCC,GAC/CA,EAAQ,KACNC,GAAQC,GAAWA,GAAQ,OAAS,cAAc,EAClDC,GAAI,IAAMC,GAAY,CAAC,CACzB,EC6DK,SAASC,EAAUC,EAASC,EAAYC,EAAGC,EAAW,CACzD,SAASC,EAAMC,EAAO,CAAE,OAAOA,aAAiBH,EAAIG,EAAQ,IAAIH,EAAE,SAAUI,EAAS,CAAEA,EAAQD,CAAK,CAAE,CAAE,CAAE,CAC1G,OAAO,IAAKH,IAAMA,EAAI,UAAU,SAAUI,EAASC,EAAQ,CACvD,SAASC,EAAUH,EAAO,CAAE,GAAI,CAAEI,EAAKN,EAAU,KAAKE,CAAK,CAAC,CAAE,OAAUK,EAAG,CAAEH,EAAOG,CAAC,CAAE,CAAE,CACzF,SAASC,EAASN,EAAO,CAAE,GAAI,CAAEI,EAAKN,EAAU,MAASE,CAAK,CAAC,CAAE,OAAUK,EAAG,CAAEH,EAAOG,CAAC,CAAE,CAAE,CAC5F,SAASD,EAAKG,EAAQ,CAAEA,EAAO,KAAON,EAAQM,EAAO,KAAK,EAAIR,EAAMQ,EAAO,KAAK,EAAE,KAAKJ,EAAWG,CAAQ,CAAE,CAC5GF,GAAMN,EAAYA,EAAU,MAAMH,EAASC,GAAc,CAAA,CAAE,GAAG,KAAI,CAAE,CAC5E,CAAK,CACL,CA0JO,SAASY,GAAuBC,EAAUC,EAAOC,EAAMC,EAAG,CAC7D,GAAID,IAAS,KAAO,CAACC,EAAG,MAAM,IAAI,UAAU,+CAA+C,EAC3F,GAAI,OAAOF,GAAU,WAAaD,IAAaC,GAAS,CAACE,EAAI,CAACF,EAAM,IAAID,CAAQ,EAAG,MAAM,IAAI,UAAU,0EAA0E,EACjL,OAAOE,IAAS,IAAMC,EAAID,IAAS,IAAMC,EAAE,KAAKH,CAAQ,EAAIG,EAAIA,EAAE,MAAQF,EAAM,IAAID,CAAQ,CAChG,KCxOaI,SAAAC,CAAO,CAKhB,YAAYC,EAAc,CACtB,KAAK,OAASA,EAGlB,OAAO,QAAQC,EAAeC,EAAS,GAAE,CACrC,IAAIC,EAAkB,CAAA,EAEtB,OAAW,CAACC,EAAKnB,CAAK,IAAK,OAAO,QAAQgB,CAAI,EAAG,CAC7C,IAAII,EAAWH,EAASA,EAAS,IAAME,EAAK,IAAMA,EAC9C,MAAM,QAAQnB,CAAK,EACnBkB,EAAc,OAAA,OAAA,OAAA,OAAA,CAAA,EAAAA,CAAM,EAAKJ,EAAQ,QAAQd,EAAOoB,CAAQ,CAAC,EAEzDF,EAAOE,CAAQ,EAAIpB,CAE1B,CAED,OAAOkB,IApBJL,GAAU,WAAG,EAAE,KAAK,SCClBQ,OAAK,CAKhB,YACEC,EACAC,EACAC,EAAmB,CAEnB,KAAK,OAASF,EACd,KAAK,UAAYC,EAEbC,IAAW,SACT,MAAM,QAAQA,CAAM,EACtB,KAAK,OAASA,EAEd,KAAK,OAAS,CAACA,CAAM,GAK3B,UAAQ,CACN,OAAO,KAAK,UAAU,CACpB,OAAQ,KAAK,OACb,UAAW,KAAK,UAChB,OAAQ,KAAK,MACd,CAAA,IAGIH,EAAK,MAAG,CAACE,EAAmBvB,IACjC,IAAIqB,EAAM,QAASE,EAAWvB,CAAK,EAAE,SAAQ,EAExCqB,EAAQ,SAAG,CAACE,EAAmBvB,IACpC,IAAIqB,EAAM,WAAYE,EAAWvB,CAAK,EAAE,SAAQ,EAE3CqB,EAAQ,SAAG,CAACE,EAAmBvB,IACpC,IAAIqB,EAAM,WAAYE,EAAWvB,CAAK,EAAE,SAAQ,EAE3CqB,EAAa,cAAG,CAACE,EAAmBvB,IACzC,IAAIqB,EAAM,gBAAiBE,EAAWvB,CAAK,EAAE,SAAQ,EAEhDqB,EAAW,YAAG,CAACE,EAAmBvB,IACvC,IAAIqB,EAAM,cAAeE,EAAWvB,CAAK,EAAE,SAAQ,EAE9CqB,EAAgB,iBAAG,CAACE,EAAmBvB,IAC5C,IAAIqB,EAAM,mBAAoBE,EAAWvB,CAAK,EAAE,SAAQ,EAEnDqB,EAAA,OAAUE,GACf,IAAIF,EAAM,SAAUE,CAAS,EAAE,SAAQ,EAElCF,EAAA,UAAaE,GAClB,IAAIF,EAAM,YAAaE,CAAS,EAAE,SAAQ,EAErCF,EAAO,QAAG,CAACE,EAAmBE,EAAwBC,IAC3D,IAAIL,EAAM,UAAWE,EAAW,CAACE,EAAOC,CAAG,CAAmB,EAAE,SAAQ,EAEnEL,EAAU,WAAG,CAACE,EAAmBvB,IACtC,IAAIqB,EAAM,aAAcE,EAAWvB,CAAK,EAAE,SAAQ,EAE7CqB,EAAQ,SAAG,CAACE,EAAmBvB,IACpC,IAAIqB,EAAM,WAAYE,EAAWvB,CAAK,EAAE,SAAQ,EAE3CqB,EAAA,OAAUM,GACf,IAAIN,EAAM,SAAU,OAAWM,CAAU,EAAE,SAAQ,EAE9CN,EAAM,OAAG,CAACE,EAAmBvB,IAClC,IAAIqB,EAAM,SAAUE,EAAWvB,CAAK,EAAE,SAAQ,EAEzCqB,EAAA,UAAaE,GAClB,IAAIF,EAAM,YAAaE,CAAS,EAAE,SAAQ,EAErCF,EAAA,SAAYE,GACjB,IAAIF,EAAM,WAAYE,CAAS,EAAE,SAAQ,EAEpCF,EAAA,YAAeO,GACpB,IAAIP,EAAM,cAAe,OAAWO,CAAU,EAAE,SAAQ,EAEnDP,EAAA,aAAgBO,GACrB,IAAIP,EAAM,eAAgB,OAAWO,CAAU,EAAE,SAAQ,EAEpDP,EAAA,MAASQ,GACd,IAAIR,EAAM,QAAS,OAAWQ,CAAK,EAAE,SAAQ,EAExCR,EAAA,OAAUS,GACf,IAAIT,EAAM,SAAU,OAAWS,CAAM,EAAE,SAAQ,EAE1CT,EAAQ,SAAG,CAACE,EAAmBvB,IACpC,IAAIqB,EAAM,WAAYE,EAAWvB,CAAK,EAAE,SAAQ,EAE3CqB,EAAA,GAAMU,GACX,IAAIV,EAAM,KAAM,OAAWU,EAAQ,IAAKC,GAAU,KAAK,MAAMA,CAAK,CAAC,CAAC,EAAE,SAAQ,EAEzEX,EAAA,IAAOU,GACZ,IAAIV,EAAM,MAAO,OAAWU,EAAQ,IAAKC,GAAU,KAAK,MAAMA,CAAK,CAAC,CAAC,EAAE,SAAQ,ECvBnF,IAAMC,EAAN,cAAgC,KAAK,CAIjC,YAAYC,EAAiBC,EAAe,EAAGC,EAAe,GAAIC,EAAmB,GAAE,CACnF,MAAMH,CAAO,EACb,KAAK,KAAO,oBACZ,KAAK,QAAUA,EACf,KAAK,KAAOC,EACZ,KAAK,KAAOC,EACZ,KAAK,SAAWC,EAEvB,EAEKC,GAAN,KAAY,CAAZ,aAAA,CACI,KAAA,OAAS,CACL,SAAU,+BACV,iBAAkB,GAClB,QAAS,GACT,IAAK,GACL,OAAQ,GACR,QAAS,IAEb,KAAA,QAAmB,CACf,aAAc,MACd,iBAAkB,SAClB,iBAAkB,MAClB,gBAAiB,SACjB,6BAA8B,SA2F1B,KAAA,SAAqB,CACzB,OAAQ,OACR,QAAS,OACT,IAAK,GACL,SAAU,IAAI,IACd,cAAe,IAAI,IACnB,qBAAsB,EACtB,UAAW,GACX,kBAAmB,EACnB,YAAa,OACb,QAAS,IAAK,CACV,aAAa,KAAK,SAAS,OAAO,EAClC,KAAK,SAAS,QAAU,QAAQ,WAAW,IAAK,CAC5C,KAAK,SAAS,aAAY,GAC3B,EAAE,GAET,WAAY,IAAK,CACb,OAAQ,GAAI,CACR,KAAK,KAAK,SAAS,kBAAoB,EACnC,MAAO,KACX,KAAK,KAAK,SAAS,kBAAoB,GACnC,MAAO,KACX,KAAK,KAAK,SAAS,kBAAoB,IACnC,MAAO,KACX,QACI,MAAO,IACd,GAEL,aAAc,IAAK,WACf,GAAI,KAAK,SAAS,SAAS,KAAO,EAAG,CACjC,KAAK,SAAS,UAAY,IAC1BC,EAAA,KAAK,SAAS,UAAQ,MAAAA,IAAA,QAAAA,EAAA,MAAK,EAC3B,MACH,CAED,IAAMC,EAAW,IAAI,gBACrBA,EAAS,IAAI,UAAW,KAAK,OAAO,OAAO,EAC3C,KAAK,SAAS,SAAS,QAAQC,GAAU,CACrCD,EAAS,OAAO,aAAcC,CAAO,CACzC,CAAC,EAED,IAAMC,EAAM,KAAK,OAAO,iBAAmB,aAAeF,EAAS,SAAQ,GAGvEE,IAAQ,KAAK,SAAS,KACtB,CAAC,KAAK,SAAS,UACfC,EAAA,KAAK,SAAS,UAAQ,MAAAA,IAAA,OAAA,OAAAA,EAAA,YAAa,UAAU,QAGzC,KAAK,SAAS,UACdC,EAAA,KAAK,SAAS,UAAQ,MAAAA,IAAA,OAAA,OAAAA,EAAA,YAAa,UAAU,UAE7C,KAAK,SAAS,UAAY,GAC1B,KAAK,SAAS,OAAO,MAAK,GAG9B,KAAK,SAAS,IAAMF,EACpB,KAAK,SAAS,OAAS,IAAI,UAAUA,CAAG,EACxC,KAAK,SAAS,OAAO,iBAAiB,UAAW,KAAK,SAAS,SAAS,EACxE,KAAK,SAAS,OAAO,iBAAiB,OAAQG,GAAS,CACnD,KAAK,SAAS,kBAAoB,CACtC,CAAC,EACD,KAAK,SAAS,OAAO,iBAAiB,QAASC,GAAQ,WACnD,GACI,CAAC,KAAK,SAAS,aAEXH,GAAAJ,EAAA,KAAK,YAAU,MAAAA,IAAA,OAAA,OAAAA,EAAA,eAAa,MAAAI,IAAA,OAAA,OAAAA,EAAA,QAAS,WACbC,EAAA,KAAK,YAAQ,MAAAA,IAAA,OAAA,OAAAA,EAAE,YAAY,MAAM,OAAS,KAExE,CACE,KAAK,SAAS,UAAY,GAC1B,MACH,CAED,IAAMG,EAAU,KAAK,SAAS,WAAU,EACxC,QAAQ,MAAM,6DAA6DA,EAAU,GAAI,YAAaD,EAAM,MAAM,EAElH,WAAW,IAAK,CACZ,KAAK,SAAS,oBACd,KAAK,SAAS,aAAY,GAC3BC,CAAO,CACd,CAAC,IAGT,UAAYD,GAAS,SACjB,GAAI,CACA,IAAMZ,EAA4B,KAAK,MAAMY,EAAM,IAAI,EAEvD,OADA,KAAK,SAAS,YAAcZ,EACpBA,EAAQ,KAAI,CAChB,IAAK,YACD,IAAMc,EAAS,KAAK,OAAMT,EAAA,OAAO,aAAa,QAAQ,gBAAgB,KAAK,MAAAA,IAAA,OAAAA,EAAA,IAAI,EACzEU,EAAUD,IAAS,aAAa,KAAK,OAAO,OAAO,EAAE,EACrDE,EAAyChB,EAAQ,KAEnDe,GAAW,CAACC,EAAY,QACxBP,EAAA,KAAK,SAAS,UAAQ,MAAAA,IAAA,QAAAA,EAAA,KAAK,KAAK,UAA2B,CACvD,KAAM,iBACN,KAAM,CACF,QAAAM,CACH,CACJ,CAAA,CAAC,GAEN,MACJ,IAAK,QACD,IAAIjC,EAAuCkB,EAAQ,KACnD,GAAIlB,GAAM,SAAU,CAEhB,GAAI,CADiBA,EAAK,SAAS,KAAKyB,GAAW,KAAK,SAAS,SAAS,IAAIA,CAAO,CAAC,EACnE,OACnB,KAAK,SAAS,cAAc,QAAQU,GAAe,CAC3CnC,EAAK,SAAS,KAAKyB,GAAWU,EAAa,SAAS,SAASV,CAAO,CAAC,GACrE,WAAW,IAAMU,EAAa,SAASnC,CAAI,CAAC,CAEpD,CAAC,CACJ,CACD,MACJ,IAAK,QACD,MAAMkB,EAAQ,KAClB,QACI,KACP,CACJ,OAAQ7B,EAAG,CACR,QAAQ,MAAMA,CAAC,CAClB,GAEL,QAASmC,GAAW,CAChB,KAAK,SAAS,SAAS,QAAQC,GAAU,CACjCD,EAAS,SAASC,CAAO,IACb,MAAM,KAAK,KAAK,SAAS,aAAa,EAAE,KAAK,CAAC,CAACW,EAAMD,CAAY,IAClEA,EAAa,SAAS,SAASV,CAAO,CAChD,GAGG,KAAK,SAAS,SAAS,OAAOA,CAAO,EAGjD,CAAC,IAtNT,YAAYY,EAAgB,CACxB,YAAK,OAAO,SAAWA,EACvB,KAAK,OAAO,iBAAmB,KAAK,OAAO,kBAAoB,KAAK,OAAO,SAAS,QAAQ,WAAY,QAAQ,EAAE,QAAQ,UAAW,OAAO,EAErI,KAUX,oBAAoBC,EAAwB,CACxC,YAAK,OAAO,iBAAmBA,EAExB,KAYX,WAAWtD,EAAa,CACpB,YAAK,QAAQ,oBAAoB,EAAIA,EACrC,KAAK,OAAO,QAAUA,EACf,KAYX,OAAOA,EAAa,CAChB,YAAK,QAAQ,gBAAgB,EAAIA,EACjC,KAAK,OAAO,IAAMA,EACX,KAUX,UAAUA,EAAa,CACnB,YAAK,QAAQ,mBAAmB,EAAIA,EACpC,KAAK,OAAO,OAASA,EACd,KAYX,WAAWA,EAAa,CACpB,YAAK,QAAQ,oBAAoB,EAAIA,EACrC,KAAK,OAAO,QAAUA,EACf,KAwKX,UAA6BwC,EAA6Be,EAAqD,CAC3G,IAAIC,EAAe,OAAOhB,GAAa,SAAW,CAACA,CAAQ,EAAIA,EAC/DgB,EAAa,QAAQf,GAAW,KAAK,SAAS,SAAS,IAAIA,CAAO,CAAC,EAEnE,IAAMgB,EAAU,KAAK,SAAS,uBAC9B,YAAK,SAAS,cAAc,IAAIA,EAAS,CACrC,SAAUD,EACV,SAAAD,CACH,CAAA,EAED,KAAK,SAAS,QAAO,EAEd,IAAK,CACR,KAAK,SAAS,cAAc,OAAOE,CAAO,EAC1C,KAAK,SAAS,QAAQD,CAAY,EAClC,KAAK,SAAS,QAAO,CACzB,EAGE,KAAKlC,EAAgBoB,EAAUgB,EAAmB,CAAA,EAAIC,EAAkB,CAAA,EAAE,+CAC5ErC,EAASA,EAAO,YAAW,EAG3BoC,EAAU,OAAO,OAAO,CAAA,EAAI,KAAK,QAASA,CAAO,EAEjD,IAAIE,EAAuB,CACvB,OAAAtC,EACA,QAAAoC,EACA,YAAa,WAGjB,GAAI,OAAO,OAAW,KAAe,OAAO,aAAc,CACtD,IAAMG,EAAiB,OAAO,aAAa,QAAQ,gBAAgB,EAC/DA,IACAH,EAAQ,oBAAoB,EAAIG,EAEvC,CAED,GAAIvC,IAAW,MACX,OAAW,CAACH,EAAKnB,CAAK,IAAK,OAAO,QAAQa,GAAQ,QAAQ8C,CAAM,CAAC,EAC7DjB,EAAI,aAAa,OAAOvB,EAAKnB,CAAK,MAGtC,QAAQ0D,EAAQ,cAAc,EAAC,CAC3B,IAAK,mBACDE,EAAQ,KAAO,KAAK,UAAUD,CAAM,EACpC,MAEJ,IAAK,sBACD,IAAIG,EAAW,IAAI,SAEnB,QAAW3C,KAAOwC,EACV,MAAM,QAAQA,EAAOxC,CAAG,CAAC,EACzBwC,EAAOxC,CAAG,EAAE,QAASnB,GAAc,CAC/B8D,EAAS,OAAO3C,EAAM,KAAMnB,CAAK,CACrC,CAAC,EAED8D,EAAS,OAAO3C,EAAKwC,EAAOxC,CAAG,CAAC,EAIxCyC,EAAQ,KAAOE,EACf,OAAOJ,EAAQ,cAAc,EAC7B,KACP,CAGL,GAAI,CACA,IAAI1C,EAAO,KACLqB,EAAW,MAAM,MAAMK,EAAI,SAAQ,EAAIkB,CAAO,EAUpD,GARI,GAAArB,EAAAF,EAAS,QAAQ,IAAI,cAAc,KAAG,MAAAE,IAAA,SAAAA,EAAA,SAAS,kBAAkB,EACjEvB,EAAO,MAAMqB,EAAS,KAAI,EAE1BrB,EAAO,CACH,QAAS,MAAMqB,EAAS,KAAI,GAIhC,KAAOA,EAAS,OAChB,MAAM,IAAIJ,EAAkBjB,GAAM,QAASqB,EAAS,OAAQrB,GAAM,KAAMA,CAAI,EAGhF,IAAM6C,EAAiBxB,EAAS,QAAQ,IAAI,oBAAoB,EAEhE,OAAI,OAAO,OAAW,KAAe,OAAO,cAAgBwB,IACxD,OAAO,QAAQ,KAAK,+HAA+H,EACnJ,OAAO,aAAa,QAAQ,iBAAkBA,CAAc,GAGzD7C,CACV,OAAQX,EAAG,CACR,MAAIA,aAAa4B,EACP5B,EAEJ,IAAI4B,EAA0B5B,EAAG,OAAO,CACjD,GACJ,CACJ,ECjcY0D,GAAP,cAAuBlD,EAAO,CAE/B,YAAYE,EAAc,CAEvB,MAAMA,CAAM,EAWV,KAAG,yCACL,IAAMiD,EAAU,WACVC,EAAmB,CAAA,EAEnBC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,MAAOE,EAAK,CACtC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAoBK,OAA+CE,EAAgBC,EAAeC,EAAkBC,EAAa,yCAC/G,GAAI,OAAOH,EAAW,IAClB,MAAM,IAAIlC,EAAkB,sCAAsC,EAGtE,GAAI,OAAOmC,EAAU,IACjB,MAAM,IAAInC,EAAkB,qCAAqC,EAGrE,GAAI,OAAOoC,EAAa,IACpB,MAAM,IAAIpC,EAAkB,wCAAwC,EAGxE,IAAM+B,EAAU,WACVC,EAAmB,CAAA,EAErB,OAAOE,EAAW,MAClBF,EAAQ,OAAYE,GAGpB,OAAOC,EAAU,MACjBH,EAAQ,MAAWG,GAGnB,OAAOC,EAAa,MACpBJ,EAAQ,SAAcI,GAGtB,OAAOC,EAAS,MAChBL,EAAQ,KAAUK,GAGtB,IAAMJ,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,OAAQE,EAAK,CACvC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAmBK,YAAoDG,EAAeC,EAAgB,yCACrF,GAAI,OAAOD,EAAU,IACjB,MAAM,IAAInC,EAAkB,qCAAqC,EAGrE,GAAI,OAAOoC,EAAa,IACpB,MAAM,IAAIpC,EAAkB,wCAAwC,EAGxE,IAAM+B,EAAU,iBACVC,EAAmB,CAAA,EAErB,OAAOG,EAAU,MACjBH,EAAQ,MAAWG,GAGnB,OAAOC,EAAa,MACpBJ,EAAQ,SAAcI,GAG1B,IAAMH,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,QAASE,EAAK,CACxC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAWK,eAAelC,EAAkB,yCACnC,IAAMiC,EAAU,sBACVC,EAAmB,CAAA,EAErB,OAAOlC,EAAY,MACnBkC,EAAQ,QAAalC,GAGzB,IAAMmC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,MAAOE,EAAK,CACtC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAWK,eAAeM,EAAkB,yCACnC,GAAI,OAAOA,EAAe,IACtB,MAAM,IAAItC,EAAkB,0CAA0C,EAG1E,IAAM+B,EAAU,mCAAmC,QAAQ,eAAgBO,CAAU,EAC/EN,EAAmB,CAAA,EAEnBC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,SAAUE,EAAK,CACzC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAcK,WAAS,yCACX,IAAMD,EAAU,eACVC,EAAmB,CAAA,EAEnBC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,OAAQE,EAAK,CACvC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAYK,SAASlC,EAAkB,yCAC7B,IAAMiC,EAAU,gBACVC,EAAmB,CAAA,EAErB,OAAOlC,EAAY,MACnBkC,EAAQ,QAAalC,GAGzB,IAAMmC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,MAAOE,EAAK,CACtC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAWK,UAAkDO,EAAY,yCAChE,GAAI,OAAOA,EAAQ,IACf,MAAM,IAAIvC,EAAkB,mCAAmC,EAGnE,IAAM+B,EAAU,eACVC,EAAmB,CAAA,EAErB,OAAOO,EAAQ,MACfP,EAAQ,IAASO,GAGrB,IAAMN,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,QAASE,EAAK,CACxC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAcK,uBAAuB7B,EAAuB,yCAChD,GAAI,OAAOA,EAAS,IAChB,MAAM,IAAIH,EAAkB,oCAAoC,EAGpE,IAAM+B,EAAU,qCAAqC,QAAQ,SAAU5B,CAAI,EACrE6B,EAAmB,CAAA,EAEnBC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,OAAQE,EAAK,CACvC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAcK,uBAA+D7B,EAAyBqC,EAAW,yCACrG,GAAI,OAAOrC,EAAS,IAChB,MAAM,IAAIH,EAAkB,oCAAoC,EAGpE,GAAI,OAAOwC,EAAQ,IACf,MAAM,IAAIxC,EAAkB,mCAAmC,EAGnE,IAAM+B,EAAU,qCAAqC,QAAQ,SAAU5B,CAAI,EACrE6B,EAAmB,CAAA,EAErB,OAAOQ,EAAQ,MACfR,EAAQ,IAASQ,GAGrB,IAAMP,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,MAAOE,EAAK,CACtC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAYK,uBAAuB7B,EAAyBqC,EAAW,yCAC7D,GAAI,OAAOrC,EAAS,IAChB,MAAM,IAAIH,EAAkB,oCAAoC,EAGpE,GAAI,OAAOwC,EAAQ,IACf,MAAM,IAAIxC,EAAkB,mCAAmC,EAGnE,IAAM+B,EAAU,qCAAqC,QAAQ,SAAU5B,CAAI,EACrE6B,EAAmB,CAAA,EAErB,OAAOQ,EAAQ,MACfR,EAAQ,IAASQ,GAGrB,IAAMP,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,SAAUE,EAAK,CACzC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAaK,mBAAmBS,EAA4B,yCACjD,GAAI,OAAOA,EAAW,IAClB,MAAM,IAAIzC,EAAkB,sCAAsC,EAGtE,IAAM+B,EAAU,yBACVC,EAAmB,CAAA,EAErB,OAAOS,EAAW,MAClBT,EAAQ,OAAYS,GAGxB,IAAMR,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,OAAQE,EAAK,CACvC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAgBK,mBAAmBU,EAAqBF,EAAW,yCACrD,GAAI,OAAOE,EAAgB,IACvB,MAAM,IAAI1C,EAAkB,2CAA2C,EAG3E,GAAI,OAAOwC,EAAQ,IACf,MAAM,IAAIxC,EAAkB,mCAAmC,EAGnE,IAAM+B,EAAU,yBACVC,EAAmB,CAAA,EAErB,OAAOU,EAAgB,MACvBV,EAAQ,YAAiBU,GAGzB,OAAOF,EAAQ,MACfR,EAAQ,IAASQ,GAGrB,IAAMP,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,MAAOE,EAAK,CACtC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAUK,gBAAc,yCAChB,IAAMD,EAAU,uBACVC,EAAmB,CAAA,EAEnBC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,MAAOE,EAAK,CACtC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAaK,qBAAmB,yCACrB,IAAMD,EAAU,8BACVC,EAAmB,CAAA,EAEnBC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,MAAOE,EAAK,CACtC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAcK,wBAAsB,yCACxB,IAAMD,EAAU,8BACVC,EAAmB,CAAA,EAEnBC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,OAAQE,EAAK,CACvC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAaK,wBAAsB,yCACxB,IAAMD,EAAU,8BACVC,EAAmB,CAAA,EAEnBC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,QAASE,EAAK,CACxC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAWK,WAAmDK,EAAY,yCACjE,GAAI,OAAOA,EAAS,IAChB,MAAM,IAAIrC,EAAkB,oCAAoC,EAGpE,IAAM+B,EAAU,gBACVC,EAAmB,CAAA,EAErB,OAAOK,EAAS,MAChBL,EAAQ,KAAUK,GAGtB,IAAMJ,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,QAASE,EAAK,CACxC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAcK,eAAuDI,EAAkBO,EAAoB,yCAC/F,GAAI,OAAOP,EAAa,IACpB,MAAM,IAAIpC,EAAkB,wCAAwC,EAGxE,IAAM+B,EAAU,oBACVC,EAAmB,CAAA,EAErB,OAAOI,EAAa,MACpBJ,EAAQ,SAAcI,GAGtB,OAAOO,EAAgB,MACvBX,EAAQ,YAAiBW,GAG7B,IAAMV,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,QAASE,EAAK,CACxC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAgBK,YAAoDY,EAAeR,EAAgB,yCACrF,GAAI,OAAOQ,EAAU,IACjB,MAAM,IAAI5C,EAAkB,qCAAqC,EAGrE,GAAI,OAAOoC,EAAa,IACpB,MAAM,IAAIpC,EAAkB,wCAAwC,EAGxE,IAAM+B,EAAU,iBACVC,EAAmB,CAAA,EAErB,OAAOY,EAAU,MACjBZ,EAAQ,MAAWY,GAGnB,OAAOR,EAAa,MACpBJ,EAAQ,SAAcI,GAG1B,IAAMH,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,QAASE,EAAK,CACxC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAUK,UAAQ,yCACV,IAAMD,EAAU,iBACVC,EAAmB,CAAA,EAEnBC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,MAAOE,EAAK,CACtC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAaK,YAAoDa,EAA2B,yCACjF,GAAI,OAAOA,EAAU,IACjB,MAAM,IAAI7C,EAAkB,qCAAqC,EAGrE,IAAM+B,EAAU,iBACVC,EAAmB,CAAA,EAErB,OAAOa,EAAU,MACjBb,EAAQ,MAAWa,GAGvB,IAAMZ,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,QAASE,EAAK,CACxC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAmBK,eAAeG,EAAe1B,EAAW,yCAC3C,GAAI,OAAO0B,EAAU,IACjB,MAAM,IAAInC,EAAkB,qCAAqC,EAGrE,GAAI,OAAOS,EAAQ,IACf,MAAM,IAAIT,EAAkB,mCAAmC,EAGnE,IAAM+B,EAAU,oBACVC,EAAmB,CAAA,EAErB,OAAOG,EAAU,MACjBH,EAAQ,MAAWG,GAGnB,OAAO1B,EAAQ,MACfuB,EAAQ,IAASvB,GAGrB,IAAMwB,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,OAAQE,EAAK,CACvC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAsBK,eAAeE,EAAgBY,EAAgBV,EAAgB,yCACjE,GAAI,OAAOF,EAAW,IAClB,MAAM,IAAIlC,EAAkB,sCAAsC,EAGtE,GAAI,OAAO8C,EAAW,IAClB,MAAM,IAAI9C,EAAkB,sCAAsC,EAGtE,GAAI,OAAOoC,EAAa,IACpB,MAAM,IAAIpC,EAAkB,wCAAwC,EAGxE,IAAM+B,EAAU,oBACVC,EAAmB,CAAA,EAErB,OAAOE,EAAW,MAClBF,EAAQ,OAAYE,GAGpB,OAAOY,EAAW,MAClBd,EAAQ,OAAYc,GAGpB,OAAOV,EAAa,MACpBJ,EAAQ,SAAcI,GAG1B,IAAMH,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,MAAOE,EAAK,CACtC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAWK,cAAY,yCACd,IAAMD,EAAU,oBACVC,EAAmB,CAAA,EAEnBC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,MAAOE,EAAK,CACtC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAWK,gBAAc,yCAChB,IAAMD,EAAU,oBACVC,EAAmB,CAAA,EAEnBC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,SAAUE,EAAK,CACzC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAgBK,wBAAsB,yCACxB,IAAMD,EAAU,8BACVC,EAAmB,CAAA,EAEnBC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,OAAQE,EAAK,CACvC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAiBK,2BAA2BG,EAAeC,EAAgB,yCAC5D,GAAI,OAAOD,EAAU,IACjB,MAAM,IAAInC,EAAkB,qCAAqC,EAGrE,GAAI,OAAOoC,EAAa,IACpB,MAAM,IAAIpC,EAAkB,wCAAwC,EAGxE,IAAM+B,EAAU,0BACVC,EAAmB,CAAA,EAErB,OAAOG,EAAU,MACjBH,EAAQ,MAAWG,GAGnB,OAAOC,EAAa,MACpBJ,EAAQ,SAAcI,GAG1B,IAAMH,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,OAAQE,EAAK,CACvC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAcK,sBAAsBE,EAAgBY,EAAc,yCACtD,GAAI,OAAOZ,EAAW,IAClB,MAAM,IAAIlC,EAAkB,sCAAsC,EAGtE,GAAI,OAAO8C,EAAW,IAClB,MAAM,IAAI9C,EAAkB,sCAAsC,EAGtE,IAAM+B,EAAU,8BACVC,EAAmB,CAAA,EAErB,OAAOE,EAAW,MAClBF,EAAQ,OAAYE,GAGpB,OAAOY,EAAW,MAClBd,EAAQ,OAAYc,GAGxB,IAAMb,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,MAAOE,EAAK,CACtC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CA6BD,oBAAoBe,EAAyBC,EAAkBC,EAAkBC,EAAiB,CAC9F,GAAI,OAAOH,EAAa,IACpB,MAAM,IAAI/C,EAAkB,wCAAwC,EAGxE,IAAM+B,EAAU,sCAAsC,QAAQ,aAAcgB,CAAQ,EAC9Ef,EAAmB,CAAA,EAErB,OAAOgB,EAAY,MACnBhB,EAAQ,QAAagB,GAGrB,OAAOC,EAAY,MACnBjB,EAAQ,QAAaiB,GAGrB,OAAOC,EAAW,MAClBlB,EAAQ,OAAYkB,GAGxB,IAAMjB,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzDC,EAAQ,QAAa,KAAK,OAAO,OAAO,QAGxC,OAAW,CAAC9C,EAAKnB,CAAK,IAAK,OAAO,QAAQa,GAAQ,QAAQoD,CAAO,CAAC,EAC9DC,EAAI,aAAa,OAAO/C,EAAKnB,CAAK,EAEtC,GAAI,OAAO,OAAW,KAAe,QAAQ,SACzC,OAAO,SAAS,KAAOkE,EAAI,SAAQ,MAEnC,QAAOA,EAgBT,mBAAmBC,EAAgBY,EAAc,yCACnD,GAAI,OAAOZ,EAAW,IAClB,MAAM,IAAIlC,EAAkB,sCAAsC,EAGtE,GAAI,OAAO8C,EAAW,IAClB,MAAM,IAAI9C,EAAkB,sCAAsC,EAGtE,IAAM+B,EAAU,0BACVC,EAAmB,CAAA,EAErB,OAAOE,EAAW,MAClBF,EAAQ,OAAYE,GAGpB,OAAOY,EAAW,MAClBd,EAAQ,OAAYc,GAGxB,IAAMb,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,MAAOE,EAAK,CACtC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAcK,cAAcE,EAAgBY,EAAc,yCAC9C,GAAI,OAAOZ,EAAW,IAClB,MAAM,IAAIlC,EAAkB,sCAAsC,EAGtE,GAAI,OAAO8C,EAAW,IAClB,MAAM,IAAI9C,EAAkB,sCAAsC,EAGtE,IAAM+B,EAAU,0BACVC,EAAmB,CAAA,EAErB,OAAOE,EAAW,MAClBF,EAAQ,OAAYE,GAGpB,OAAOY,EAAW,MAClBd,EAAQ,OAAYc,GAGxB,IAAMb,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,OAAQE,EAAK,CACvC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAYK,WAAWmB,EAAiB,yCAC9B,GAAI,OAAOA,EAAc,IACrB,MAAM,IAAInD,EAAkB,yCAAyC,EAGzE,IAAM+B,EAAU,gCAAgC,QAAQ,cAAeoB,CAAS,EAC1EnB,EAAmB,CAAA,EAEnBC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,MAAOE,EAAK,CACtC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAaK,cAAcmB,EAAiB,yCACjC,GAAI,OAAOA,EAAc,IACrB,MAAM,IAAInD,EAAkB,yCAAyC,EAGzE,IAAM+B,EAAU,gCAAgC,QAAQ,cAAeoB,CAAS,EAC1EnB,EAAmB,CAAA,EAEnBC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,QAASE,EAAK,CACxC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAeK,cAAcmB,EAAiB,yCACjC,GAAI,OAAOA,EAAc,IACrB,MAAM,IAAInD,EAAkB,yCAAyC,EAGzE,IAAM+B,EAAU,gCAAgC,QAAQ,cAAeoB,CAAS,EAC1EnB,EAAmB,CAAA,EAEnBC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,SAAUE,EAAK,CACzC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAYK,cAAY,yCACd,IAAMD,EAAU,kBACVC,EAAmB,CAAA,EAEnBC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,QAASE,EAAK,CACxC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAYK,iBAAiBoB,EAAkBC,EAAoBC,EAAmB,yCAC5E,GAAI,OAAOF,EAAa,IACpB,MAAM,IAAIpD,EAAkB,wCAAwC,EAGxE,GAAI,OAAOqD,EAAe,IACtB,MAAM,IAAIrD,EAAkB,0CAA0C,EAG1E,IAAM+B,EAAU,wBACVC,EAAmB,CAAA,EAErB,OAAOoB,EAAa,MACpBpB,EAAQ,SAAcoB,GAGtB,OAAOC,EAAe,MACtBrB,EAAQ,WAAgBqB,GAGxB,OAAOC,EAAe,MACtBtB,EAAQ,WAAgBsB,GAG5B,IAAMrB,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,OAAQE,EAAK,CACvC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAWK,iBAAiBoB,EAAkBC,EAAkB,yCACvD,GAAI,OAAOD,EAAa,IACpB,MAAM,IAAIpD,EAAkB,wCAAwC,EAGxE,GAAI,OAAOqD,EAAe,IACtB,MAAM,IAAIrD,EAAkB,0CAA0C,EAG1E,IAAM+B,EAAU,mCAAmC,QAAQ,aAAcqB,CAAQ,EAC3EpB,EAAmB,CAAA,EAErB,OAAOqB,EAAe,MACtBrB,EAAQ,WAAgBqB,GAG5B,IAAMpB,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,MAAOE,EAAK,CACtC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAUK,iBAAiBoB,EAAgB,yCACnC,GAAI,OAAOA,EAAa,IACpB,MAAM,IAAIpD,EAAkB,wCAAwC,EAGxE,IAAM+B,EAAU,mCAAmC,QAAQ,aAAcqB,CAAQ,EAC3EpB,EAAmB,CAAA,EAEnBC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,SAAUE,EAAK,CACzC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAsBK,iBAAiBE,EAAgBC,EAAeoB,EAAgB,yCAClE,GAAI,OAAOrB,EAAW,IAClB,MAAM,IAAIlC,EAAkB,sCAAsC,EAGtE,GAAI,OAAOmC,EAAU,IACjB,MAAM,IAAInC,EAAkB,qCAAqC,EAGrE,IAAM+B,EAAU,wBACVC,EAAmB,CAAA,EAErB,OAAOE,EAAW,MAClBF,EAAQ,OAAYE,GAGpB,OAAOC,EAAU,MACjBH,EAAQ,MAAWG,GAGnB,OAAOoB,EAAW,MAClBvB,EAAQ,OAAYuB,GAGxB,IAAMtB,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,OAAQE,EAAK,CACvC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CA6BK,oBAAoBE,EAAgBC,EAAe1B,EAAc8C,EAAgB,yCACnF,GAAI,OAAOrB,EAAW,IAClB,MAAM,IAAIlC,EAAkB,sCAAsC,EAGtE,GAAI,OAAOmC,EAAU,IACjB,MAAM,IAAInC,EAAkB,qCAAqC,EAGrE,IAAM+B,EAAU,4BACVC,EAAmB,CAAA,EAErB,OAAOE,EAAW,MAClBF,EAAQ,OAAYE,GAGpB,OAAOC,EAAU,MACjBH,EAAQ,MAAWG,GAGnB,OAAO1B,EAAQ,MACfuB,EAAQ,IAASvB,GAGjB,OAAO8C,EAAW,MAClBvB,EAAQ,OAAYuB,GAGxB,IAAMtB,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,OAAQE,EAAK,CACvC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CA2BD,kBAAkBe,EAAyBC,EAAkBC,EAAkBC,EAAiB,CAC5F,GAAI,OAAOH,EAAa,IACpB,MAAM,IAAI/C,EAAkB,wCAAwC,EAGxE,IAAM+B,EAAU,oCAAoC,QAAQ,aAAcgB,CAAQ,EAC5Ef,EAAmB,CAAA,EAErB,OAAOgB,EAAY,MACnBhB,EAAQ,QAAagB,GAGrB,OAAOC,EAAY,MACnBjB,EAAQ,QAAaiB,GAGrB,OAAOC,EAAW,MAClBlB,EAAQ,OAAYkB,GAGxB,IAAMjB,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzDC,EAAQ,QAAa,KAAK,OAAO,OAAO,QAGxC,OAAW,CAAC9C,EAAKnB,CAAK,IAAK,OAAO,QAAQa,GAAQ,QAAQoD,CAAO,CAAC,EAC9DC,EAAI,aAAa,OAAO/C,EAAKnB,CAAK,EAEtC,GAAI,OAAO,OAAW,KAAe,QAAQ,SACzC,OAAO,SAAS,KAAOkE,EAAI,SAAQ,MAEnC,QAAOA,EAuBT,iBAAiBC,EAAgBU,EAAa,yCAChD,GAAI,OAAOV,EAAW,IAClB,MAAM,IAAIlC,EAAkB,sCAAsC,EAGtE,GAAI,OAAO4C,EAAU,IACjB,MAAM,IAAI5C,EAAkB,qCAAqC,EAGrE,IAAM+B,EAAU,wBACVC,EAAmB,CAAA,EAErB,OAAOE,EAAW,MAClBF,EAAQ,OAAYE,GAGpB,OAAOU,EAAU,MACjBZ,EAAQ,MAAWY,GAGvB,IAAMX,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,OAAQE,EAAK,CACvC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAyBK,mBAAmBvB,EAAW,yCAChC,GAAI,OAAOA,EAAQ,IACf,MAAM,IAAIT,EAAkB,mCAAmC,EAGnE,IAAM+B,EAAU,wBACVC,EAAmB,CAAA,EAErB,OAAOvB,EAAQ,MACfuB,EAAQ,IAASvB,GAGrB,IAAMwB,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,OAAQE,EAAK,CACvC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAeK,mBAAmBE,EAAgBY,EAAc,yCACnD,GAAI,OAAOZ,EAAW,IAClB,MAAM,IAAIlC,EAAkB,sCAAsC,EAGtE,GAAI,OAAO8C,EAAW,IAClB,MAAM,IAAI9C,EAAkB,sCAAsC,EAGtE,IAAM+B,EAAU,wBACVC,EAAmB,CAAA,EAErB,OAAOE,EAAW,MAClBF,EAAQ,OAAYE,GAGpB,OAAOY,EAAW,MAClBd,EAAQ,OAAYc,GAGxB,IAAMb,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,MAAOE,EAAK,CACtC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAiBK,yBAAuB,yCACzB,IAAMD,EAAU,8BACVC,EAAmB,CAAA,EAEnBC,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,OAAQE,EAAK,CACvC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CAeK,wBAAwBE,EAAgBY,EAAc,yCACxD,GAAI,OAAOZ,EAAW,IAClB,MAAM,IAAIlC,EAAkB,sCAAsC,EAGtE,GAAI,OAAO8C,EAAW,IAClB,MAAM,IAAI9C,EAAkB,sCAAsC,EAGtE,IAAM+B,EAAU,8BACVC,EAAmB,CAAA,EAErB,OAAOE,EAAW,MAClBF,EAAQ,OAAYE,GAGpB,OAAOY,EAAW,MAClBd,EAAQ,OAAYc,GAGxB,IAAMb,EAAM,IAAI,IAAI,KAAK,OAAO,OAAO,SAAWF,CAAO,EACzD,OAAO,MAAM,KAAK,OAAO,KAAK,MAAOE,EAAK,CACtC,eAAgB,oBACjBD,CAAO,EACb,CAAA,CACJ,MS5hDYwB,QAAU,GAEZA,GAAA,KAAQC,GACJ,SAASA,CAAI,KAGjBD,GAAA,MAASC,GACL,UAAUA,CAAI,KAGlBD,GAAA,OAAUC,GACN,WAAWA,CAAI,KAGnBD,GAAA,OAAUC,GACN,WAAWA,CAAI,KAGnBD,GAAA,OAAUC,GACN,WAAWA,CAAI,eEnBjBC,SAAAC,CAAE,CAaJ,OAAO,OAAOC,EAAU,CAC3B,OAAOA,EAGJ,OAAO,OAAOC,EAAkB,EAAC,CAEpC,IAAMC,EAASC,GAAAJ,EAAEK,GAAA,IAAAC,EAAA,EAAF,KAAAN,CAAE,EACbO,EAAgB,GACpB,QAASC,EAAI,EAAGA,EAAIN,EAASM,IAAK,CAC9B,IAAMC,EAAiB,KAAK,MAAM,KAAK,OAAM,EAAK,EAAE,EAAE,SAAS,EAAE,EACjEF,GAAiBE,CACpB,CACD,OAAON,EAASI,EAEvB,sBAvBO,IAAMG,EAAM,IAAI,KACVC,EAAM,KAAK,MAAMD,EAAI,QAAO,EAAK,GAAI,EACrCE,EAAOF,EAAI,gBAAe,EAIhC,OADqBC,EAAI,SAAS,EAAE,EAAIC,EAAK,SAAS,EAAE,EAAE,SAAS,EAAG,GAAG,CAE7E,MCXQC,IAAZ,SAAYA,EAAiB,CACzBA,EAAA,KAAA,MACJ,GAFYA,KAAAA,GAEX,CAAA,EAAA,MCFWC,IAAZ,SAAYA,EAAoB,CAC5BA,EAAA,MAAA,QACAA,EAAA,MAAA,QACAA,EAAA,KAAA,OACAA,EAAA,aAAA,cACJ,GALYA,KAAAA,GAKX,CAAA,EAAA,MCLWC,IAAZ,SAAYA,EAAa,CACrBA,EAAA,OAAA,SACAA,EAAA,MAAA,QACAA,EAAA,MAAA,QACAA,EAAA,UAAA,YACAA,EAAA,SAAA,WACAA,EAAA,UAAA,YACAA,EAAA,MAAA,QACAA,EAAA,IAAA,MACAA,EAAA,YAAA,cACAA,EAAA,QAAA,UACAA,EAAA,OAAA,SACAA,EAAA,QAAA,UACAA,EAAA,KAAA,OACAA,EAAA,SAAA,WACAA,EAAA,OAAA,SACAA,EAAA,OAAA,SACAA,EAAA,OAAA,SACAA,EAAA,SAAA,WACAA,EAAA,UAAA,YACAA,EAAA,OAAA,SACAA,EAAA,KAAA,OACAA,EAAA,KAAA,OACAA,EAAA,OAAA,SACAA,EAAA,cAAA,gBACAA,EAAA,MAAA,QACAA,EAAA,WAAA,aACAA,EAAA,MAAA,QACAA,EAAA,QAAA,UACAA,EAAA,OAAA,SACAA,EAAA,WAAA,aACAA,EAAA,cAAA,gBACAA,EAAA,OAAA,SACAA,EAAA,UAAA,YACAA,EAAA,MAAA,QACAA,EAAA,OAAA,SACAA,EAAA,OAAA,SACAA,EAAA,KAAA,OACAA,EAAA,KAAA,OACAA,EAAA,KAAA,MACJ,GAxCYA,KAAAA,GAwCX,CAAA,EAAA,MCxCWC,IAAZ,SAAYA,EAAO,CACfA,EAAA,aAAA,KACAA,EAAA,mBAAA,KACAA,EAAA,aAAA,KACAA,EAAA,gBAAA,KACAA,EAAA,mBAAA,KACAA,EAAA,SAAA,KACAA,EAAA,eAAA,KACAA,EAAA,OAAA,KACAA,EAAA,aAAA,KACAA,EAAA,cAAA,KACAA,EAAA,iBAAA,KACAA,EAAA,UAAA,KACAA,EAAA,MAAA,KACAA,EAAA,UAAA,IACJ,GAfYA,KAAAA,GAeX,CAAA,EAAA,MCfWC,IAAZ,SAAYA,EAAU,CAClBA,EAAA,gBAAA,OACAA,EAAA,UAAA,YACAA,EAAA,MAAA,QACAA,EAAA,SAAA,WACAA,EAAA,WAAA,SACAA,EAAA,SAAA,WACAA,EAAA,IAAA,MACAA,EAAA,UAAA,YACAA,EAAA,IAAA,MACAA,EAAA,WAAA,aACAA,EAAA,QAAA,UACAA,EAAA,gBAAA,mBACAA,EAAA,cAAA,kBACAA,EAAA,KAAA,OACAA,EAAA,IAAA,MACAA,EAAA,QAAA,SACJ,GAjBYA,KAAAA,GAiBX,CAAA,EAAA,MCjBWC,IAAZ,SAAYA,EAAI,CACZA,EAAA,YAAA,KACAA,EAAA,OAAA,KACAA,EAAA,QAAA,KACAA,EAAA,QAAA,KACAA,EAAA,mBAAA,KACAA,EAAA,UAAA,KACAA,EAAA,QAAA,KACAA,EAAA,kBAAA,KACAA,EAAA,UAAA,KACAA,EAAA,QAAA,KACAA,EAAA,WAAA,KACAA,EAAA,QAAA,KACAA,EAAA,QAAA,KACAA,EAAA,MAAA,KACAA,EAAA,YAAA,KACAA,EAAA,WAAA,KACAA,EAAA,SAAA,KACAA,EAAA,QAAA,KACAA,EAAA,QAAA,KACAA,EAAA,qBAAA,KACAA,EAAA,QAAA,KACAA,EAAA,OAAA,KACAA,EAAA,QAAA,KACAA,EAAA,OAAA,KACAA,EAAA,SAAA,KACAA,EAAA,iBAAA,KACAA,EAAA,OAAA,KACAA,EAAA,SAAA,KACAA,EAAA,uBAAA,KACAA,EAAA,OAAA,KACAA,EAAA,YAAA,KACAA,EAAA,MAAA,KACAA,EAAA,MAAA,KACAA,EAAA,YAAA,KACAA,EAAA,SAAA,KACAA,EAAA,6BAAA,KACAA,EAAA,mBAAA,KACAA,EAAA,SAAA,KACAA,EAAA,QAAA,KACAA,EAAA,UAAA,KACAA,EAAA,UAAA,KACAA,EAAA,KAAA,KACAA,EAAA,OAAA,KACAA,EAAA,cAAA,KACAA,EAAA,QAAA,KACAA,EAAA,SAAA,KACAA,EAAA,SAAA,KACAA,EAAA,QAAA,KACAA,EAAA,kBAAA,KACAA,EAAA,QAAA,KACAA,EAAA,QAAA,KACAA,EAAA,MAAA,KACAA,EAAA,QAAA,KACAA,EAAA,MAAA,KACAA,EAAA,QAAA,KACAA,EAAA,SAAA,KACAA,EAAA,QAAA,KACAA,EAAA,KAAA,KACAA,EAAA,OAAA,KACAA,EAAA,4BAAA,KACAA,EAAA,MAAA,KACAA,EAAA,cAAA,KACAA,EAAA,QAAA,KACAA,EAAA,MAAA,KACAA,EAAA,OAAA,KACAA,EAAA,OAAA,KACAA,EAAA,aAAA,KACAA,EAAA,iBAAA,KACAA,EAAA,OAAA,KACAA,EAAA,QAAA,KACAA,EAAA,UAAA,KACAA,EAAA,OAAA,KACAA,EAAA,SAAA,KACAA,EAAA,QAAA,KACAA,EAAA,MAAA,KACAA,EAAA,QAAA,KACAA,EAAA,UAAA,KACAA,EAAA,MAAA,KACAA,EAAA,QAAA,KACAA,EAAA,sBAAA,KACAA,EAAA,KAAA,KACAA,EAAA,QAAA,KACAA,EAAA,OAAA,KACAA,EAAA,MAAA,KACAA,EAAA,QAAA,KACAA,EAAA,OAAA,KACAA,EAAA,MAAA,KACAA,EAAA,WAAA,KACAA,EAAA,MAAA,KACAA,EAAA,WAAA,KACAA,EAAA,SAAA,KACAA,EAAA,SAAA,KACAA,EAAA,mBAAA,KACAA,EAAA,WAAA,KACAA,EAAA,OAAA,KACAA,EAAA,6BAAA,KACAA,EAAA,QAAA,KACAA,EAAA,QAAA,KACAA,EAAA,MAAA,KACAA,EAAA,WAAA,KACAA,EAAA,cAAA,KACAA,EAAA,SAAA,KACAA,EAAA,QAAA,KACAA,EAAA,UAAA,KACAA,EAAA,WAAA,KACAA,EAAA,OAAA,KACAA,EAAA,QAAA,KACAA,EAAA,OAAA,KACAA,EAAA,QAAA,KACAA,EAAA,WAAA,KACAA,EAAA,SAAA,KACAA,EAAA,OAAA,KACAA,EAAA,gBAAA,KACAA,EAAA,eAAA,KACAA,EAAA,KAAA,KACAA,EAAA,MAAA,KACAA,EAAA,QAAA,KACAA,EAAA,WAAA,KACAA,EAAA,SAAA,KACAA,EAAA,WAAA,KACAA,EAAA,WAAA,KACAA,EAAA,UAAA,KACAA,EAAA,OAAA,KACAA,EAAA,SAAA,KACAA,EAAA,QAAA,KACAA,EAAA,MAAA,KACAA,EAAA,QAAA,KACAA,EAAA,UAAA,KACAA,EAAA,YAAA,KACAA,EAAA,OAAA,KACAA,EAAA,MAAA,KACAA,EAAA,MAAA,KACAA,EAAA,WAAA,KACAA,EAAA,KAAA,KACAA,EAAA,SAAA,KACAA,EAAA,OAAA,KACAA,EAAA,KAAA,KACAA,EAAA,YAAA,KACAA,EAAA,MAAA,KACAA,EAAA,eAAA,KACAA,EAAA,OAAA,KACAA,EAAA,gBAAA,KACAA,EAAA,WAAA,KACAA,EAAA,SAAA,KACAA,EAAA,SAAA,KACAA,EAAA,MAAA,KACAA,EAAA,QAAA,KACAA,EAAA,OAAA,KACAA,EAAA,OAAA,KACAA,EAAA,YAAA,KACAA,EAAA,MAAA,KACAA,EAAA,QAAA,KACAA,EAAA,UAAA,KACAA,EAAA,eAAA,KACAA,EAAA,YAAA,KACAA,EAAA,WAAA,KACAA,EAAA,UAAA,KACAA,EAAA,QAAA,KACAA,EAAA,OAAA,KACAA,EAAA,WAAA,KACAA,EAAA,mBAAA,KACAA,EAAA,SAAA,KACAA,EAAA,SAAA,KACAA,EAAA,SAAA,KACAA,EAAA,OAAA,KACAA,EAAA,SAAA,KACAA,EAAA,WAAA,KACAA,EAAA,MAAA,KACAA,EAAA,KAAA,KACAA,EAAA,KAAA,KACAA,EAAA,SAAA,KACAA,EAAA,WAAA,KACAA,EAAA,aAAA,KACAA,EAAA,WAAA,KACAA,EAAA,MAAA,KACAA,EAAA,kBAAA,KACAA,EAAA,QAAA,KACAA,EAAA,OAAA,KACAA,EAAA,OAAA,KACAA,EAAA,SAAA,KACAA,EAAA,OAAA,KACAA,EAAA,QAAA,KACAA,EAAA,QAAA,KACAA,EAAA,aAAA,KACAA,EAAA,WAAA,KACAA,EAAA,YAAA,KACAA,EAAA,6BAAA,KACAA,EAAA,UAAA,KACAA,EAAA,QAAA,KACAA,EAAA,QAAA,KACAA,EAAA,MAAA,KACAA,EAAA,MAAA,KACAA,EAAA,YAAA,KACAA,EAAA,OAAA,KACAA,EAAA,SAAA,IACJ,GApMYA,KAAAA,GAoMX,CAAA,EAAA,MCpMWC,IAAZ,SAAYA,EAAe,CACvBA,EAAA,IAAA,MACAA,EAAA,KAAA,OACAA,EAAA,IAAA,MACAA,EAAA,MAAA,QACAA,EAAA,OAAA,SACAA,EAAA,QAAA,SACJ,GAPYA,KAAAA,GAOX,CAAA,EAAA,MCPWC,IAAZ,SAAYA,EAAY,CACpBA,EAAA,OAAA,SACAA,EAAA,QAAA,WACAA,EAAA,IAAA,MACAA,EAAA,SAAA,YACAA,EAAA,KAAA,OACAA,EAAA,MAAA,QACAA,EAAA,WAAA,cACAA,EAAA,OAAA,SACAA,EAAA,YAAA,cACJ,GAVYA,KAAAA,GAUX,CAAA,EAAA,MCVWC,IAAZ,SAAYA,EAAW,CACnBA,EAAA,IAAA,MACAA,EAAA,KAAA,OACAA,EAAA,IAAA,MACAA,EAAA,IAAA,MACAA,EAAA,KAAA,MACJ,GANYA,KAAAA,GAMX,CAAA,EAAA,ECJD,IAAMC,GAAS,IAAIC,GAEnBD,GACG,YAAY,8BAA8B,EAC1C,WAAW,qBAAqB,EAE5B,IAAME,GAAU,IAAIC,GAAQH,EAAM,ECFlC,IAAMI,GACXC,GAEAA,EAAQ,KACNC,GAAQC,GAAWC,GAAY,MAAMD,CAAM,CAAC,EAC5CE,EAAS,SAAY,CACnB,IAAMC,EAAc,MAAMC,GAAQ,IAAI,EACtC,OAAOC,GAAWF,CAAW,CAC/B,CAAC,EACDG,GAAYC,GAAQ,CAClB,IAAIC,EACJ,GAAID,aAAeE,EAAmB,CACpC,IAAMC,EAAgCH,EAEpCG,EAAW,OAAS,KACpBA,EAAW,OAAS,6BAEpBF,EAAYH,GAAW,MAAS,EAEhCG,EAAY,CACV,KAAM,0BACN,aAAcD,CAChB,CAEJ,MACEC,EAAY,CACV,KAAM,uBACN,aAAcD,CAChB,EACA,QAAQ,MACN,kEAAkE,KAAK,UAAUC,CAAS,CAAC,EAC7F,EAEF,OAAOG,GAAGH,CAAmB,CAC/B,CAAC,CACH,ECnCK,IAAMI,GACXC,GAEAA,EAAQ,KACNC,GACGC,GACCC,GAAiB,MAAMD,CAAM,GAC7B,OAAOA,EAAO,SAAY,UAC1BA,EAAO,QAAQ,KAAK,EAAE,OAAS,CACnC,EACAE,EAAS,MAAO,CAAE,QAASC,CAAM,IAAM,CACrC,IAAMC,EAAS,MAAMC,GAAQ,iBAAiBC,GAAG,OAAO,EAAGH,CAAK,EAChE,OAAOI,GAAaH,EAAO,MAAM,CACnC,CAAC,EACDI,GAAYC,GAAQ,CAClB,IAAIC,EACJ,GAAID,aAAeE,EAAmB,CACpC,IAAMC,EAAgCH,EAEpCG,EAAW,OAAS,KACpBA,EAAW,OAAS,sBAEpBF,EAAY,CACV,KAAM,uBACN,QAAS,CACP,aAAc,4FACd,MAAO,QACP,KAAM,wBACR,CACF,EAEAA,EAAY,CACV,KAAM,0BACN,aAAcD,CAChB,CAEJ,MACEC,EAAY,CACV,KAAM,uBACN,aAAcD,CAChB,EACA,QAAQ,MACN,yEAAyE,KAAK,UAAUC,CAAS,CAAC,EACpG,EAEF,OAAOG,GAAGH,CAAmB,CAC/B,CAAC,CACH,EC/CK,IAAMI,GACXC,GAEAA,EAAQ,KACNC,GACGC,GACCC,GAAkB,MAAMD,CAAM,GAC9BA,EAAO,SACP,OAAOA,EAAO,QAAQ,QAAW,UACjC,OAAOA,EAAO,QAAQ,KAAQ,UAC9BA,EAAO,QAAQ,IAAI,KAAK,EAAE,OAAS,CACvC,EACAE,EAAS,MAAO,CAAE,QAAAC,CAAQ,IAAM,CAC9B,IAAMC,EAAU,MAAMC,GAAQ,cAAcF,EAAQ,OAAQA,EAAQ,GAAG,EACvE,OAAOG,GAAiBF,CAAO,CACjC,CAAC,EACDG,GAAYC,GAAQ,CAClB,IAAIC,EACJ,OAAID,aAAeE,EACjBD,EAAY,CACV,KAAM,0BACN,aAAcD,CAChB,GAEAC,EAAY,CACV,KAAM,uBACN,aAAcD,CAChB,EACA,QAAQ,MACN,yEAAyE,KAAK,UAAUC,CAAS,CAAC,EACpG,GAEKE,GAAGF,CAAmB,CAC/B,CAAC,CACH,ECpCK,IAAMG,GACXC,GAEAA,EAAQ,KACNC,GAAQC,GAAWC,GAAiB,MAAMD,CAAM,CAAC,EACjDE,GAAI,IAAMC,GAAY,CAAC,CACzB,ECDF,IAAMC,GAAiBC,GAAqB,EAC/BC,GAAWC,GACtBC,GACAC,GACAC,GACAC,GACAC,EACF,EAEaC,GAAaC,GAAe,CACvC,QAAS,CACP,KAAMC,EACR,EACA,WAAaC,GACXA,EAAqB,EAAE,OAAOZ,EAAc,CAChD,CAAC,EAEDA,GAAe,IAAIE,EAA6C,EAQzD,IAAMW,GAAcJ,GAAW,SC/BvB,SAARK,GAA0BC,EAAO,CACtC,IAAMC,EAAeD,EAAM,SAAS,EAE9BE,EAAQC,GAAc,CAAE,GAAGF,CAAa,CAAC,EAEzCG,EAAcJ,EAAM,UAAU,IAAM,CACxC,IAAMK,EAAWL,EAAM,SAAS,EAChCM,GAAcJ,EAAOK,GAAUF,CAAQ,CAAC,CAC1C,CAAC,EACD,OAAAG,GAAU,IAAMJ,EAAY,CAAC,EACtBF,CACT,CCDA,IAAMO,GAAQC,GAASC,EAAU,EASjCC,GACE,IAAAC,EACGC,GAAa,CAACL,MAAOA,GAAK,IAAAM,UAAA,CAAA,OAAAF,EACxBG,GAAM,CAAA,CAAA,CAAA,CAAA,CAAA,EAIXC,SAASC,eAAe,KAAK,CAC/B,EACAC,GAAY,CACVC,KAAM,cACR,CAAC",
  "names": ["sharedConfig", "getContextId", "count", "num", "len", "setHydrateContext", "context", "nextHydrateContext", "equalFn", "a", "b", "$PROXY", "$TRACK", "$DEVCOMP", "signalOptions", "ERROR", "runEffects", "runQueue", "STALE", "PENDING", "UNOWNED", "Owner", "Transition", "Scheduler", "ExternalSourceConfig", "Listener", "Updates", "Effects", "ExecCount", "createRoot", "fn", "detachedOwner", "listener", "owner", "unowned", "current", "root", "UNOWNED", "updateFn", "untrack", "cleanNode", "runUpdates", "createSignal", "value", "options", "signalOptions", "s", "setter", "writeSignal", "readSignal", "createRenderEffect", "fn", "value", "options", "c", "createComputation", "STALE", "Scheduler", "Transition", "Updates", "updateComputation", "createMemo", "fn", "value", "options", "signalOptions", "c", "createComputation", "Scheduler", "Transition", "STALE", "Updates", "updateComputation", "readSignal", "batch", "fn", "runUpdates", "untrack", "ExternalSourceConfig", "Listener", "listener", "on", "deps", "options", "isArray", "prevInput", "defer", "prevValue", "input", "i", "result", "onCleanup", "fn", "Owner", "getListener", "Listener", "getOwner", "Owner", "runWithOwner", "o", "fn", "prev", "prevListener", "runUpdates", "err", "handleError", "startTransition", "fn", "Transition", "l", "Listener", "o", "Owner", "t", "Scheduler", "SuspenseContext", "res", "runUpdates", "transPending", "setTransPending", "createSignal", "createContext", "defaultValue", "options", "id", "createProvider", "useContext", "context", "value", "Owner", "children", "fn", "createMemo", "memo", "resolveChildren", "c", "SuspenseContext", "readSignal", "runningTransition", "Transition", "STALE", "updateComputation", "updates", "Updates", "runUpdates", "lookUpstream", "Listener", "sSlot", "writeSignal", "node", "value", "isComp", "current", "TransitionRunning", "i", "o", "Effects", "markDownstream", "cleanNode", "time", "ExecCount", "runComputation", "Owner", "nextValue", "owner", "listener", "err", "handleError", "createComputation", "fn", "init", "pure", "state", "options", "c", "UNOWNED", "ExternalSourceConfig", "track", "trigger", "createSignal", "ordinary", "onCleanup", "triggerInTransition", "startTransition", "inTransition", "x", "runTop", "PENDING", "untrack", "ancestors", "top", "prev", "wait", "res", "completeUpdates", "Scheduler", "scheduleQueue", "runQueue", "sources", "disposed", "e", "d", "v", "len", "setTransPending", "runEffects", "queue", "item", "tasks", "lookUpstream", "node", "ignore", "runningTransition", "Transition", "i", "source", "state", "STALE", "ExecCount", "runTop", "PENDING", "markDownstream", "o", "Updates", "Effects", "cleanNode", "index", "obs", "n", "reset", "top", "castError", "err", "runErrors", "fns", "owner", "f", "e", "handleError", "Owner", "ERROR", "error", "resolveChildren", "children", "results", "result", "createProvider", "id", "options", "props", "res", "createRenderEffect", "untrack", "FALLBACK", "hydrationEnabled", "createComponent", "Comp", "props", "hydrationEnabled", "sharedConfig", "c", "setHydrateContext", "nextHydrateContext", "untrack", "narrowedError", "name", "Show", "props", "keyed", "condition", "createMemo", "a", "b", "c", "child", "untrack", "narrowedError", "Errors", "resetErrorBoundaries", "fn", "booleans", "Properties", "reconcileArrays", "parentNode", "a", "b", "bLength", "aEnd", "bEnd", "aStart", "bStart", "after", "map", "node", "i", "index", "sequence", "t", "$$EVENTS", "render", "code", "element", "init", "options", "disposer", "createRoot", "dispose", "insert", "delegateEvents", "eventNames", "document", "e", "$$EVENTS", "i", "l", "name", "eventHandler", "insert", "parent", "accessor", "marker", "initial", "insertExpression", "createRenderEffect", "current", "isHydrating", "node", "sharedConfig", "eventHandler", "sharedConfig", "el", "ev", "key", "node", "handler", "data", "insertExpression", "parent", "value", "current", "marker", "unwrapArray", "hydrating", "isHydrating", "cleaned", "i", "t", "multi", "cleanChildren", "createRenderEffect", "v", "array", "currentArray", "normalizeIncomingArray", "nodes", "appendNodes", "reconcileArrays", "normalized", "unwrap", "dynamic", "len", "item", "prev", "replacement", "inserted", "isParent", "voidFn", "RequestContext", "isServer", "$RAW", "$NODE", "$HAS", "$SELF", "isWrappable", "obj", "proto", "$PROXY", "unwrap", "item", "set", "result", "unwrapped", "v", "prop", "$RAW", "i", "l", "keys", "desc", "getNodes", "target", "symbol", "nodes", "getNode", "property", "value", "s", "createSignal", "trackSelf", "target", "getListener", "getNode", "getNodes", "$NODE", "$SELF", "ownKeys", "setProperty", "state", "property", "value", "deleting", "prev", "len", "$HAS", "nodes", "getNodes", "$NODE", "node", "getNode", "i", "$SELF", "proxyDescriptor", "target", "property", "desc", "$PROXY", "$NODE", "v", "proxyTraps", "receiver", "$RAW", "$TRACK", "trackSelf", "nodes", "getNodes", "tracked", "value", "$HAS", "isFunction", "getListener", "getNode", "args", "batch", "isWrappable", "wrap", "setProperty", "unwrap", "ownKeys", "p", "keys", "proto", "isClass", "descriptors", "i", "l", "prop", "get", "og", "createMutable", "state", "options", "unwrappedStore", "modifyMutable", "modifier", "$ROOT", "applyState", "parent", "merge", "key", "previous", "isArray", "j", "start", "end", "newEnd", "item", "newIndicesNext", "keyVal", "temp", "newIndices", "len", "targetKeys", "previousKeys", "reconcile", "res", "createBeforeLeave", "listeners", "subscribe", "listener", "ignore", "confirm", "to", "options", "e", "l", "force", "depth", "saveCurrentDepth", "isServer", "keepDepth", "state", "notifyIfNotBlocked", "notify", "block", "prevDepth", "delta", "hasSchemeRegex", "trimPathRegex", "mockBase", "normalizePath", "path", "omitSlash", "s", "resolvePath", "base", "from", "basePath", "fromPath", "result", "invariant", "value", "message", "joinPaths", "extractSearchParams", "url", "params", "key", "createMatcher", "partial", "matchFilters", "pattern", "splat", "segments", "len", "location", "locSegments", "lenDiff", "match", "matchFilter", "i", "segment", "locSegment", "dynamic", "matchSegment", "remainder", "input", "filter", "isEqual", "scoreRoute", "route", "score", "createMemoObject", "fn", "map", "owner", "getOwner", "_", "property", "runWithOwner", "createMemo", "expandOptionals", "pattern", "match", "prefix", "suffix", "prefixes", "results", "expansion", "p", "MAX_REDIRECTS", "RouterContextObj", "createContext", "RouteContextObj", "useRouter", "invariant", "useContext", "useNavigate", "useRouter", "createRoutes", "routeDef", "base", "component", "preload", "load", "children", "info", "isLeaf", "shared", "asArray", "acc", "originalPath", "expandedPath", "expandOptionals", "path", "joinPaths", "pattern", "s", "createMatcher", "createBranch", "routes", "index", "scoreRoute", "location", "matches", "i", "route", "match", "value", "createBranches", "stack", "branches", "routeDefs", "len", "def", "isEmptyArray", "branch", "a", "b", "getRouteMatches", "createLocation", "state", "origin", "mockBase", "url", "createMemo", "prev", "path_", "pathname", "search", "hash", "key", "createMemoObject", "on", "extractSearchParams", "intent", "getIntent", "inPreloadFn", "getInPreloadFn", "setInPreloadFn", "createRouterContext", "integration", "getContext", "options", "source", "setSource", "utils", "parsePath", "p", "renderPath", "beforeLeave", "createBeforeLeave", "basePath", "resolvePath", "isRouting", "setIsRouting", "createSignal", "lastTransitionTarget", "transition", "newIntent", "newTarget", "reference", "startTransition", "setReference", "setState", "resetErrorBoundaries", "isServer", "submissions", "batch", "navigateEnd", "referrers", "initFromFlash", "params", "m", "baseRoute", "to", "createRenderEffect", "navigatorFactory", "preloadRoute", "navigateFromRoute", "untrack", "queryOnly", "replace", "resolve", "scroll", "nextState", "resolvedTo", "MAX_REDIRECTS", "current", "e", "voidFn", "useContext", "RouteContextObj", "next", "first", "prevIntent", "runWithOwner", "createRouteContext", "router", "parent", "outlet", "data", "createComponent", "createRouterComponent", "props", "context", "routerState", "RouterContextObj", "Root", "getOwner", "Routes", "Show", "dataOnly", "disposers", "root", "routeStates", "nextMatches", "prevMatches", "equal", "prevMatch", "nextMatch", "createRoot", "dispose", "createOutlet", "child", "dataOnly", "event", "routerState", "branches", "url", "prevMatches", "getRouteMatches", "matches", "match", "route", "params", "intercept", "value", "setValue", "get", "set", "v", "querySelector", "selector", "createRouter", "config", "ignore", "wrap", "signal", "createSignal", "a", "b", "next", "sharedConfig", "onCleanup", "createRouterComponent", "bindEvent", "target", "type", "handler", "scrollToHash", "hash", "fallbackTop", "el", "getPath", "u", "StaticRouter", "props", "e", "obj", "voidFn", "LocationHeader", "PRELOAD_TIMEOUT", "CACHE_TIMEOUT", "cacheMap", "isServer", "now", "k", "getCache", "req", "cache", "fn", "name", "cachedFn", "args", "getCache", "intent", "getIntent", "inPreloadFn", "getInPreloadFn", "navigate", "getOwner", "useNavigate", "now", "key", "hashKey", "cached", "tracking", "isServer", "e", "voidFn", "dataOnly", "data", "getListener", "onCleanup", "PRELOAD_TIMEOUT", "res", "handleResponse", "startTransition", "sharedConfig", "createSignal", "error", "v", "url", "LocationHeader", "value", "hashKey", "args", "_", "val", "isPlainObject", "result", "key", "obj", "proto", "actions", "setupNativeEvents", "preload", "explicitLinks", "actionBase", "transformUrl", "router", "basePath", "navigateFromRoute", "preloadTimeout", "isSvg", "el", "handleAnchor", "evt", "a", "svg", "href", "rel", "url", "handleAnchorClick", "res", "to", "state", "handleAnchorPreload", "handleAnchorIn", "handleAnchorOut", "handleFormSubmit", "actionRef", "mockBase", "handler", "actions", "data", "delegateEvents", "onCleanup", "Router", "props", "isServer", "StaticRouter", "getSource", "beforeLeave", "createBeforeLeave", "createRouter", "value", "replace", "scroll", "keepDepth", "scrollToHash", "saveCurrentDepth", "notify", "bindEvent", "notifyIfNotBlocked", "delta", "s", "StateContext", "createContext", "StateProvider", "props", "_$createComponent", "Provider", "value", "store", "children", "formatProdErrorMessage", "code", "$$observable", "symbol_observable_default", "randomString", "ActionTypes", "actionTypes_default", "isPlainObject", "obj", "proto", "createStore", "reducer", "preloadedState", "enhancer", "formatProdErrorMessage", "currentReducer", "currentState", "currentListeners", "nextListeners", "listenerIdCounter", "isDispatching", "ensureCanMutateNextListeners", "listener", "key", "getState", "subscribe", "isSubscribed", "listenerId", "dispatch", "action", "isPlainObject", "replaceReducer", "nextReducer", "actionTypes_default", "observable", "outerSubscribe", "observer", "observeState", "observerAsObserver", "symbol_observable_default", "assertReducerShape", "reducers", "key", "reducer", "actionTypes_default", "formatProdErrorMessage", "combineReducers", "reducerKeys", "finalReducers", "i", "finalReducerKeys", "unexpectedKeyCache", "shapeAssertionError", "e", "state", "action", "hasChanged", "nextState", "previousStateForKey", "nextStateForKey", "actionType", "compose", "funcs", "arg", "a", "b", "args", "applyMiddleware", "middlewares", "createStore", "reducer", "preloadedState", "store", "dispatch", "formatProdErrorMessage", "middlewareAPI", "action", "chain", "middleware", "isAction", "isPlainObject", "NOTHING", "DRAFTABLE", "DRAFT_STATE", "die", "error", "args", "getPrototypeOf", "isDraft", "value", "DRAFT_STATE", "isDraftable", "isPlainObject", "DRAFTABLE", "isMap", "isSet", "objectCtorString", "proto", "Ctor", "each", "obj", "iter", "getArchtype", "key", "entry", "index", "thing", "state", "DRAFT_STATE", "isMap", "isSet", "has", "prop", "set", "thing", "propOrOldValue", "value", "t", "getArchtype", "is", "x", "y", "isMap", "target", "isSet", "latest", "state", "shallowCopy", "base", "strict", "isPlain", "isPlainObject", "descriptors", "DRAFT_STATE", "keys", "key", "desc", "getPrototypeOf", "proto", "obj", "freeze", "deep", "isFrozen", "isDraft", "isDraftable", "dontMutateFrozenCollections", "die", "plugins", "getPlugin", "pluginKey", "plugin", "currentScope", "getCurrentScope", "createScope", "parent_", "immer_", "usePatchesInScope", "scope", "patchListener", "getPlugin", "revokeScope", "leaveScope", "revokeDraft", "enterScope", "immer", "draft", "state", "DRAFT_STATE", "processResult", "result", "baseDraft", "die", "isDraftable", "finalize", "maybeFreeze", "NOTHING", "rootScope", "value", "path", "isFrozen", "each", "key", "childValue", "finalizeProperty", "resultEach", "isSet", "parentState", "targetObject", "prop", "rootPath", "targetIsSet", "isDraft", "has", "res", "set", "deep", "freeze", "createProxyProxy", "base", "parent", "isArray", "target", "traps", "objectTraps", "arrayTraps", "revoke", "proxy", "source", "latest", "readPropFromProto", "peek", "prepareCopy", "createProxy", "desc", "getDescriptorFromProto", "current", "currentState", "is", "markChanged", "owner", "getPrototypeOf", "fn", "proto", "shallowCopy", "Immer", "config", "recipe", "defaultBase", "self", "args", "hasError", "p", "ip", "patches", "inversePatches", "i", "patch", "applyPatchesImpl", "isMap", "currentImpl", "copy", "immer", "Immer", "produce", "produceWithPatches", "setAutoFreeze", "setUseStrictShallowCopy", "applyPatches", "createDraft", "finishDraft", "createThunkMiddleware", "extraArgument", "dispatch", "getState", "next", "action", "thunk", "withExtraArgument", "composeWithDevTools", "compose", "devToolsEnhancer", "noop", "hasMatchFunction", "v", "createAction", "type", "prepareAction", "actionCreator", "args", "prepared", "formatProdErrorMessage", "action", "isAction", "Tuple", "_Tuple", "items", "arr", "freezeDraftable", "val", "isDraftable", "produce", "emplace", "map", "key", "handler", "value", "formatProdErrorMessage", "inserted", "isBoolean", "x", "buildGetDefaultMiddleware", "options", "thunk", "immutableCheck", "serializableCheck", "actionCreatorCheck", "middlewareArray", "Tuple", "withExtraArgument", "SHOULD_AUTOBATCH", "createQueueWithTimer", "timeout", "notify", "rAF", "autoBatchEnhancer", "options", "next", "args", "store", "notifying", "shouldNotifyAtEndOfTick", "notificationQueued", "listeners", "queueCallback", "notifyListeners", "l", "listener", "wrappedListener", "unsubscribe", "action", "SHOULD_AUTOBATCH", "buildGetDefaultEnhancers", "middlewareEnhancer", "autoBatch", "enhancerArray", "Tuple", "configureStore", "getDefaultMiddleware", "buildGetDefaultMiddleware", "reducer", "middleware", "devTools", "preloadedState", "enhancers", "rootReducer", "isPlainObject", "combineReducers", "formatProdErrorMessage", "finalMiddleware", "finalCompose", "compose", "composeWithDevTools", "applyMiddleware", "getDefaultEnhancers", "storeEnhancers", "composedEnhancer", "createStore", "executeReducerBuilderCallback", "builderCallback", "actionsMap", "actionMatchers", "defaultCaseReducer", "builder", "typeOrActionCreator", "type", "matcher", "isStateFunction", "x", "createReducer", "initialState", "mapOrBuilderCallback", "finalActionMatchers", "finalDefaultCaseReducer", "getInitialState", "freezeDraftable", "frozenInitialState", "state", "caseReducers", "cr", "previousState", "caseReducer", "isDraft", "result", "isDraftable", "createNextState", "draft", "matches", "hasMatchFunction", "isAnyOf", "matchers", "urlAlphabet", "nanoid", "size", "id", "i", "commonProperties", "RejectWithValue", "payload", "meta", "FulfillWithMeta", "miniSerializeError", "value", "simpleError", "property", "createAsyncThunk", "typePrefix", "payloadCreator", "options", "fulfilled", "createAction", "requestId", "arg", "pending", "rejected", "error", "actionCreator", "dispatch", "getState", "extra", "abortController", "abortHandler", "abortReason", "abort", "reason", "promise", "finalAction", "conditionResult", "isThenable", "abortedPromise", "_", "reject", "result", "err", "unwrapResult", "isAnyOf", "action", "asyncThunkSymbol", "asyncThunkCreator", "getType", "slice", "actionKey", "buildCreateSlice", "creators", "cAT", "asyncThunkSymbol", "options", "name", "reducerPath", "formatProdErrorMessage", "reducers", "buildReducerCreators", "reducerNames", "context", "contextMethods", "typeOrActionCreator", "reducer", "type", "matcher", "actionCreator", "reducerName", "reducerDefinition", "reducerDetails", "isAsyncThunkSliceReducerDefinition", "handleThunkCaseReducerDefinition", "handleNormalReducerDefinition", "buildReducer", "extraReducers", "actionMatchers", "defaultCaseReducer", "executeReducerBuilderCallback", "finalCaseReducers", "createReducer", "builder", "key", "sM", "m", "selectSelf", "state", "injectedSelectorCache", "_reducer", "action", "getInitialState", "makeSelectorProps", "injected", "selectSlice", "sliceState", "getSelectors", "selectState", "selectorCache", "emplace", "map", "selector", "wrapSelector", "injectable", "pathOpt", "config", "newReducerPath", "wrapper", "rootState", "args", "createSlice", "asyncThunk", "payloadCreator", "caseReducer", "prepare", "createNotation", "maybeReducerWithPrepare", "prepareCallback", "isCaseReducerWithPrepareDefinition", "createAction", "fulfilled", "pending", "rejected", "settled", "thunk", "noop", "listener", "completed", "cancelled", "taskCancelled", "taskCompleted", "listenerCancelled", "listenerCompleted", "assign", "alm", "addListener", "assign", "createAction", "alm", "clearAllListeners", "removeListener", "ORIGINAL_STATE", "formatProdErrorMessage", "code", "initialState", "authSlice", "createSlice", "state", "action", "willGetUser", "didGetUser", "didGetLoginEmail", "didGetUserId", "willCreateSession", "didCreateSession", "authSlice_default", "extendStatics", "d", "b", "p", "__extends", "__", "__awaiter", "thisArg", "_arguments", "P", "generator", "adopt", "value", "resolve", "reject", "fulfilled", "step", "e", "rejected", "result", "__generator", "body", "_", "t", "f", "y", "g", "verb", "n", "v", "op", "__values", "o", "s", "m", "i", "__read", "n", "r", "ar", "e", "error", "__spreadArray", "to", "from", "pack", "i", "l", "ar", "__await", "v", "__asyncGenerator", "thisArg", "_arguments", "generator", "g", "q", "verb", "awaitReturn", "f", "reject", "n", "a", "b", "resume", "step", "e", "settle", "r", "fulfill", "value", "__asyncValues", "o", "m", "i", "__values", "verb", "n", "v", "resolve", "reject", "settle", "d", "isFunction", "value", "createErrorClass", "createImpl", "_super", "instance", "ctorFunc", "UnsubscriptionError", "createErrorClass", "_super", "errors", "err", "i", "arrRemove", "arr", "item", "index", "Subscription", "initialTeardown", "errors", "_parentage", "_parentage_1", "__values", "_parentage_1_1", "parent_1", "initialFinalizer", "isFunction", "e", "UnsubscriptionError", "_finalizers", "_finalizers_1", "_finalizers_1_1", "finalizer", "execFinalizer", "err", "__spreadArray", "__read", "teardown", "_a", "parent", "arrRemove", "empty", "EMPTY_SUBSCRIPTION", "Subscription", "isSubscription", "value", "isFunction", "execFinalizer", "finalizer", "config", "timeoutProvider", "handler", "timeout", "args", "_i", "delegate", "__spreadArray", "__read", "handle", "reportUnhandledError", "err", "timeoutProvider", "onUnhandledError", "config", "noop", "COMPLETE_NOTIFICATION", "createNotification", "errorNotification", "error", "nextNotification", "value", "kind", "context", "errorContext", "cb", "config", "isRoot", "_a", "errorThrown", "error", "captureError", "err", "Subscriber", "_super", "__extends", "destination", "_this", "isSubscription", "EMPTY_OBSERVER", "next", "error", "complete", "SafeSubscriber", "value", "handleStoppedNotification", "nextNotification", "err", "errorNotification", "COMPLETE_NOTIFICATION", "Subscription", "_bind", "bind", "fn", "thisArg", "ConsumerObserver", "partialObserver", "value", "error", "handleUnhandledError", "err", "SafeSubscriber", "_super", "__extends", "observerOrNext", "complete", "_this", "isFunction", "context_1", "config", "Subscriber", "handleUnhandledError", "error", "config", "captureError", "reportUnhandledError", "defaultErrorHandler", "err", "handleStoppedNotification", "notification", "subscriber", "onStoppedNotification", "timeoutProvider", "EMPTY_OBSERVER", "noop", "observable", "identity", "x", "pipeFromArray", "fns", "identity", "input", "prev", "fn", "Observable", "subscribe", "operator", "observable", "observerOrNext", "error", "complete", "_this", "subscriber", "isSubscriber", "SafeSubscriber", "errorContext", "_a", "source", "sink", "err", "next", "promiseCtor", "getPromiseCtor", "resolve", "reject", "value", "operations", "_i", "pipeFromArray", "x", "getPromiseCtor", "promiseCtor", "_a", "config", "isObserver", "value", "isFunction", "isSubscriber", "Subscriber", "isSubscription", "hasLift", "source", "isFunction", "operate", "init", "liftedSource", "err", "createOperatorSubscriber", "destination", "onNext", "onComplete", "onError", "onFinalize", "OperatorSubscriber", "_super", "__extends", "shouldUnsubscribe", "_this", "value", "err", "closed_1", "_a", "Subscriber", "ObjectUnsubscribedError", "createErrorClass", "_super", "Subject", "_super", "__extends", "_this", "operator", "subject", "AnonymousSubject", "ObjectUnsubscribedError", "value", "errorContext", "_b", "__values", "_c", "observer", "err", "observers", "_a", "subscriber", "hasError", "isStopped", "EMPTY_SUBSCRIPTION", "Subscription", "arrRemove", "thrownError", "observable", "Observable", "destination", "source", "AnonymousSubject", "_super", "__extends", "destination", "source", "_this", "value", "_b", "_a", "err", "subscriber", "EMPTY_SUBSCRIPTION", "Subject", "dateTimestampProvider", "Action", "_super", "__extends", "scheduler", "work", "state", "delay", "Subscription", "intervalProvider", "handler", "timeout", "args", "_i", "delegate", "__spreadArray", "__read", "handle", "AsyncAction", "_super", "__extends", "scheduler", "work", "_this", "state", "delay", "id", "_a", "_id", "intervalProvider", "_scheduler", "error", "_delay", "errored", "errorValue", "e", "actions", "arrRemove", "Action", "Scheduler", "schedulerActionCtor", "now", "work", "delay", "state", "dateTimestampProvider", "AsyncScheduler", "_super", "__extends", "SchedulerAction", "now", "Scheduler", "_this", "action", "actions", "error", "QueueAction", "_super", "__extends", "scheduler", "work", "_this", "state", "delay", "id", "AsyncAction", "QueueScheduler", "_super", "__extends", "AsyncScheduler", "queueScheduler", "QueueScheduler", "QueueAction", "EMPTY", "Observable", "subscriber", "isScheduler", "value", "isFunction", "last", "arr", "popScheduler", "args", "isScheduler", "last", "popNumber", "defaultValue", "isArrayLike", "x", "isPromise", "value", "isFunction", "isInteropObservable", "input", "isFunction", "observable", "isAsyncIterable", "obj", "isFunction", "createInvalidObservableTypeError", "input", "getSymbolIterator", "iterator", "isIterable", "input", "isFunction", "iterator", "readableStreamLikeToAsyncGenerator", "readableStream", "reader", "__await", "_a", "_b", "value", "done", "isReadableStreamLike", "obj", "isFunction", "innerFrom", "input", "Observable", "isInteropObservable", "fromInteropObservable", "isArrayLike", "fromArrayLike", "isPromise", "fromPromise", "isAsyncIterable", "fromAsyncIterable", "isIterable", "fromIterable", "isReadableStreamLike", "fromReadableStreamLike", "createInvalidObservableTypeError", "obj", "subscriber", "obs", "observable", "isFunction", "array", "i", "promise", "value", "err", "reportUnhandledError", "iterable", "iterable_1", "__values", "iterable_1_1", "asyncIterable", "process", "readableStream", "readableStreamLikeToAsyncGenerator", "asyncIterable_1", "__asyncValues", "asyncIterable_1_1", "executeSchedule", "parentSubscription", "scheduler", "work", "delay", "repeat", "scheduleSubscription", "observeOn", "scheduler", "delay", "operate", "source", "subscriber", "createOperatorSubscriber", "value", "executeSchedule", "err", "subscribeOn", "scheduler", "delay", "operate", "source", "subscriber", "scheduleObservable", "input", "scheduler", "innerFrom", "subscribeOn", "observeOn", "schedulePromise", "input", "scheduler", "innerFrom", "subscribeOn", "observeOn", "scheduleArray", "input", "scheduler", "Observable", "subscriber", "i", "scheduleIterable", "input", "scheduler", "Observable", "subscriber", "iterator", "executeSchedule", "value", "done", "_a", "err", "isFunction", "scheduleAsyncIterable", "input", "scheduler", "Observable", "subscriber", "executeSchedule", "iterator", "result", "scheduleReadableStreamLike", "input", "scheduler", "scheduleAsyncIterable", "readableStreamLikeToAsyncGenerator", "scheduled", "input", "scheduler", "isInteropObservable", "scheduleObservable", "isArrayLike", "scheduleArray", "isPromise", "schedulePromise", "isAsyncIterable", "scheduleAsyncIterable", "isIterable", "scheduleIterable", "isReadableStreamLike", "scheduleReadableStreamLike", "createInvalidObservableTypeError", "from", "input", "scheduler", "scheduled", "innerFrom", "of", "args", "_i", "scheduler", "popScheduler", "from", "map", "project", "thisArg", "operate", "source", "subscriber", "index", "createOperatorSubscriber", "value", "mergeInternals", "source", "subscriber", "project", "concurrent", "onBeforeNext", "expand", "innerSubScheduler", "additionalFinalizer", "buffer", "active", "index", "isComplete", "checkComplete", "outerNext", "value", "doInnerSub", "innerComplete", "innerFrom", "createOperatorSubscriber", "innerValue", "bufferedValue", "executeSchedule", "err", "mergeMap", "project", "resultSelector", "concurrent", "isFunction", "a", "i", "map", "b", "ii", "innerFrom", "operate", "source", "subscriber", "mergeInternals", "mergeAll", "concurrent", "mergeMap", "identity", "merge", "args", "_i", "scheduler", "popScheduler", "concurrent", "popNumber", "sources", "innerFrom", "mergeAll", "from", "EMPTY", "filter", "predicate", "thisArg", "operate", "source", "subscriber", "index", "createOperatorSubscriber", "value", "catchError", "selector", "operate", "source", "subscriber", "innerSub", "syncUnsub", "handledResult", "createOperatorSubscriber", "err", "innerFrom", "StateObservable", "Observable", "Subject", "input$", "initialState", "subscriber", "subscription", "value", "combineEpics", "epics", "merger", "args", "merge", "epic", "output$", "consoleWarn", "createEpicMiddleware", "options", "QueueScheduler", "queueScheduler", "uniqueQueueScheduler", "epic$", "Subject", "store", "epicMiddleware", "_store", "actionSubject$", "stateSubject$", "action$", "observeOn", "state$", "StateObservable", "map", "epic", "output$", "mergeMap", "from", "subscribeOn", "next", "action", "result", "rootEpic", "appDidStart_authWillGetUser_epic", "action$", "filter", "action", "map", "willGetUser", "__awaiter", "thisArg", "_arguments", "P", "generator", "adopt", "value", "resolve", "reject", "fulfilled", "step", "e", "rejected", "result", "__classPrivateFieldGet", "receiver", "state", "kind", "f", "Service", "_Service", "client", "data", "prefix", "output", "key", "finalKey", "Query", "method", "attribute", "values", "start", "end", "attributes", "documentId", "limit", "offset", "queries", "query", "AppwriteException", "message", "code", "type", "response", "Client", "_a", "channels", "channel", "url", "_b", "_c", "_event", "event", "timeout", "cookie", "session", "messageData", "subscription", "_key", "endpoint", "endpointRealtime", "callback", "channelArray", "counter", "headers", "params", "options", "cookieFallback", "formData", "Account", "apiPath", "payload", "uri", "userId", "email", "password", "name", "identityId", "mfa", "otp", "factor", "challengeId", "oldPassword", "phone", "prefs", "secret", "provider", "success", "failure", "scopes", "sessionId", "targetId", "identifier", "providerId", "phrase", "Permission", "role", "ID", "_ID", "id", "padding", "baseId", "__classPrivateFieldGet", "_a", "_ID_hexTimestamp", "randomPadding", "i", "randomHexDigit", "now", "sec", "msec", "AuthenticatorType", "AuthenticationFactor", "OAuthProvider", "Browser", "CreditCard", "Flag", "ExecutionMethod", "ImageGravity", "ImageFormat", "client", "Client", "account", "Account", "authWillGetUser_authDidGetUser_epic", "action$", "filter", "action", "willGetUser", "mergeMap", "currAccount", "account", "didGetUser", "catchError", "err", "errAction", "AppwriteException", "typedError", "of", "authDidSetLoginEmail_authDidGetUserId_epic", "action$", "filter", "action", "didGetLoginEmail", "mergeMap", "email", "userId", "account", "ID", "didGetUserId", "catchError", "err", "errAction", "AppwriteException", "typedError", "of", "authWillCreateSession_authWillGetUser_epic", "action$", "filter", "action", "willCreateSession", "mergeMap", "payload", "session", "account", "didCreateSession", "catchError", "err", "errAction", "AppwriteException", "of", "authDidCreateSession_authWillGetUser_epic", "action$", "filter", "action", "didCreateSession", "map", "willGetUser", "epicMiddleware", "createEpicMiddleware", "rootEpic", "combineEpics", "appDidStart_authWillGetUser_epic", "authWillGetUser_authDidGetUser_epic", "authDidSetLoginEmail_authDidGetUserId_epic", "authWillCreateSession_authWillGetUser_epic", "authDidCreateSession_authWillGetUser_epic", "reduxStore", "configureStore", "authSlice_default", "getDefaultMiddleware", "appDispatch", "useRedux", "store", "currentState", "state", "createMutable", "unsubscribe", "newState", "modifyMutable", "reconcile", "onCleanup", "store", "useRedux", "reduxStore", "render", "_$createComponent", "StateProvider", "children", "Router", "document", "getElementById", "appDispatch", "type"]
}
